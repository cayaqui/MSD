// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CBSBudgetItems", b =>
                {
                    b.Property<Guid>("BudgetItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CBSId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BudgetItemId", "CBSId");

                    b.HasIndex("CBSId");

                    b.ToTable("CBSBudgetItems", "Cost");
                });

            modelBuilder.Entity("Domain.Entities.Auth.Permissions.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Module", "Resource");

                    b.ToTable("Permissions", "Security");
                });

            modelBuilder.Entity("Domain.Entities.Auth.Permissions.UserProjectPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GrantedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGranted")
                        .HasColumnType("bit");

                    b.Property<string>("PermissionCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.HasIndex("IsActive", "GrantedAt", "ExpiresAt");

                    b.HasIndex("UserId", "ProjectId", "PermissionCode")
                        .IsUnique();

                    b.ToTable("UserProjectPermissions", "Security", t =>
                        {
                            t.HasCheckConstraint("CK_UserProjectPermissions_ValidDates", "[ExpiresAt] IS NULL OR [ExpiresAt] > [GrantedAt]");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Auth.Security.ProjectTeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AllocationPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Role");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "ProjectId")
                        .IsUnique();

                    b.HasIndex("IsActive", "StartDate", "EndDate");

                    b.ToTable("ProjectTeamMembers", "Security", t =>
                        {
                            t.HasCheckConstraint("CK_ProjectTeamMembers_Dates", "[EndDate] IS NULL OR [EndDate] > [StartDate]");

                            t.HasCheckConstraint("CK_ProjectTeamMembers_Role", "[Role] IN ('PROJECT_MANAGER', 'PROJECT_ENGINEER', 'COST_CONTROLLER', 'PLANNER', 'QA_QC', 'DOCUMENT_CONTROLLER', 'TEAM_MEMBER', 'OBSERVER')");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Auth.Security.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompanyId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Department")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EntraId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GivenName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("LoginCount")
                        .HasColumnType("int");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OfficeLocation")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("PreferredLanguage")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("en");

                    b.Property<string>("Surname")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EntraId")
                        .IsUnique();

                    b.HasIndex("IsDeleted");

                    b.HasIndex("IsDeleted", "IsActive");

                    b.ToTable("Users", "Security");
                });

            modelBuilder.Entity("Domain.Entities.Auth.Security.UserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("LastActivityAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LastActivityAt");

                    b.HasIndex("SessionId")
                        .IsUnique();

                    b.HasIndex("StartedAt");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "IsActive");

                    b.ToTable("UserSessions", "Security");
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.ChangeOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ApprovalSequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal?>("ApprovedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ApprovedById")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("AttachmentsJson")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("JSON array of document references");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("ChangeOrderNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("CommitmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("ContingencyUsed")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ControlAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("USD");

                    b.Property<string>("CurrentApprovalLevel")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal>("EstimatedCostImpact")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("ImpactAnalysisDocument")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ImplementationEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImplementationNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ImplementationStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Justification")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QualityImpact")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("RejectedById")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestedById")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RequestorDepartment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ReviewedById")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RiskImpact")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ScheduleImpactDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ScopeImpact")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SubmittedById")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("WBSElementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("ChangeOrderNumber")
                        .IsUnique();

                    b.HasIndex("CommitmentId");

                    b.HasIndex("ControlAccountId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Priority");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RequestDate");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.HasIndex("WBSElementId");

                    b.HasIndex("ProjectId", "Status");

                    b.HasIndex("ProjectId", "Type");

                    b.ToTable("ChangeOrders", "Change", t =>
                        {
                            t.HasCheckConstraint("CK_ChangeOrders_ApprovedAmount", "[ApprovedAmount] IS NULL OR [ApprovedAmount] >= 0");

                            t.HasCheckConstraint("CK_ChangeOrders_ContingencyUsed", "[ContingencyUsed] IS NULL OR [ContingencyUsed] >= 0");

                            t.HasCheckConstraint("CK_ChangeOrders_EstimatedCostImpact", "[EstimatedCostImpact] >= 0");

                            t.HasCheckConstraint("CK_ChangeOrders_ImplementationDates", "[ImplementationEndDate] IS NULL OR [ImplementationStartDate] IS NULL OR [ImplementationEndDate] >= [ImplementationStartDate]");

                            t.HasCheckConstraint("CK_ChangeOrders_ScheduleImpactDays", "[ScheduleImpactDays] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.ChangeOrderApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovalLevel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ApproverId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("AuthorityLimit")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ChangeOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Conditions")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Decision")
                        .HasColumnType("int");

                    b.Property<DateTime>("DecisionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConditional")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsWithinAuthority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalLevel");

                    b.HasIndex("ApproverId");

                    b.HasIndex("ChangeOrderId");

                    b.HasIndex("Decision");

                    b.HasIndex("DecisionDate");

                    b.HasIndex("ChangeOrderId", "ApprovalLevel");

                    b.ToTable("ChangeOrderApprovals", "Change", t =>
                        {
                            t.HasCheckConstraint("CK_ChangeOrderApprovals_AuthorityLimit", "[AuthorityLimit] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.ChangeRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("ActualCostImpact")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ActualScheduleImpactDays")
                        .HasColumnType("int");

                    b.Property<string>("AffectedDisciplines")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("JSON array of discipline IDs");

                    b.Property<string>("AffectedMilestones")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("JSON array");

                    b.Property<string>("AffectedPackages")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("JSON array of package IDs");

                    b.Property<bool>("AffectsCriticalPath")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("AlternativeOptions")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ApprovalComments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ApprovalConditions")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovalRoute")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("JSON array of approval steps");

                    b.Property<Guid?>("ApprovedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("ApprovedCostImpact")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ApprovedScheduleImpactDays")
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<Guid?>("ChangeOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ClientApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("ClientApproved")
                        .HasColumnType("bit");

                    b.Property<string>("ClientComments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ClientReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ContractorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ControlAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("CostApproved")
                        .HasColumnType("bit");

                    b.Property<string>("CostBreakdown")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("JSON structure");

                    b.Property<int?>("CostImpactType")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("CostReviewComments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("CostReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CostReviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("USD");

                    b.Property<int>("CurrentApprovalLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("CurrentCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("DrawingReferences")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("JSON array");

                    b.Property<decimal?>("EstimatedCostImpact")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("EstimatedScheduleImpactDays")
                        .HasColumnType("int");

                    b.Property<bool>("HasCostImpact")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("HasQualityImpact")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("HasSafetyImpact")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("HasScheduleImpact")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("HasScopeImpact")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ImplementationEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImplementationNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ImplementationStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConvertedToChangeOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsImplemented")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsUrgent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LessonsLearned")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("OverallImpactLevel")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ProposedCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProposedSolution")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("QualityImpactDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RequestorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RequiredApprovalLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("RequiredByDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RequiresClientApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("RequiresTechnicalReview")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ReviewStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RiskAssessment")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("SafetyImpactDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("ScheduleApproved")
                        .HasColumnType("bit");

                    b.Property<string>("ScheduleReviewComments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ScheduleReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ScheduleReviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Source")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("SpecificationReferences")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("JSON array");

                    b.Property<string>("StandardReferences")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("JSON array");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("TechnicalJustification")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("TechnicalReviewComments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("TechnicalReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TechnicalReviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("TechnicallyApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("TrendId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("WBSElementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("Category");

                    b.HasIndex("ChangeOrderId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ContractorId");

                    b.HasIndex("ControlAccountId");

                    b.HasIndex("CostReviewerId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Priority");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RequestDate");

                    b.HasIndex("RequestorId");

                    b.HasIndex("RequiredByDate");

                    b.HasIndex("ScheduleReviewerId");

                    b.HasIndex("Status");

                    b.HasIndex("TechnicalReviewerId");

                    b.HasIndex("TrendId");

                    b.HasIndex("Type");

                    b.HasIndex("WBSElementId");

                    b.HasIndex("ProjectId", "Status");

                    b.HasIndex("ProjectId", "Type");

                    b.ToTable("ChangeRequests", "Change", t =>
                        {
                            t.HasCheckConstraint("CK_ChangeRequests_ActualCostImpact", "[ActualCostImpact] IS NULL OR [ActualCostImpact] >= 0");

                            t.HasCheckConstraint("CK_ChangeRequests_ApprovalLevels", "[CurrentApprovalLevel] >= 0 AND [RequiredApprovalLevel] >= 1");

                            t.HasCheckConstraint("CK_ChangeRequests_ApprovedCostImpact", "[ApprovedCostImpact] IS NULL OR [ApprovedCostImpact] >= 0");

                            t.HasCheckConstraint("CK_ChangeRequests_EstimatedCostImpact", "[EstimatedCostImpact] IS NULL OR [EstimatedCostImpact] >= 0");

                            t.HasCheckConstraint("CK_ChangeRequests_ScheduleImpactDays", "[EstimatedScheduleImpactDays] IS NULL OR [EstimatedScheduleImpactDays] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.ChangeRequestApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ApprovalLevel")
                        .HasColumnType("int");

                    b.Property<Guid>("ApproverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChangeRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalDate");

                    b.HasIndex("ApprovalLevel");

                    b.HasIndex("ApproverId");

                    b.HasIndex("ChangeRequestId");

                    b.HasIndex("ChangeRequestId", "ApprovalLevel");

                    b.ToTable("ChangeRequestApprovals", "Change", t =>
                        {
                            t.HasCheckConstraint("CK_ChangeRequestApprovals_ApprovalLevel", "[ApprovalLevel] >= 1 AND [ApprovalLevel] <= 10");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.ChangeRequestAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<Guid>("ChangeRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UploadedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("ChangeRequestId");

                    b.HasIndex("UploadedBy");

                    b.HasIndex("UploadedDate");

                    b.ToTable("ChangeRequestAttachments", "Change", t =>
                        {
                            t.HasCheckConstraint("CK_ChangeRequestAttachments_FileSize", "[FileSize] > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.ChangeRequestComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChangeRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsInternal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChangeRequestId");

                    b.HasIndex("CommentDate");

                    b.HasIndex("IsInternal");

                    b.HasIndex("UserId");

                    b.ToTable("ChangeRequestComments", "Change");
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.Trend", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlternativeSolutions")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Assumptions")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<Guid?>("ChangeOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ClientApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("ClientApproved")
                        .HasColumnType("bit");

                    b.Property<string>("ClientComments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("USD");

                    b.Property<int?>("Decision")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<Guid?>("DecisionByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DecisionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DecisionRationale")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("EstimatedCostImpact")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("EstimatedScheduleImpactDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("IdentifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ImpactLevel")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("ImplementationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConvertedToChangeOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal?>("MaxCostImpact")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinCostImpact")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MitigationStrategy")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal?>("MostLikelyCostImpact")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Priority")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<decimal>("Probability")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(50m);

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProposedSolution")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("QualityImpact")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid?>("RaisedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RequiresClientApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Risks")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("RootCause")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ScopeImpact")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("WBSElementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("ChangeOrderId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DecisionByUserId");

                    b.HasIndex("DueDate");

                    b.HasIndex("IdentifiedDate");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Priority");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RaisedByUserId");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.HasIndex("WBSElementId");

                    b.HasIndex("ProjectId", "Status");

                    b.ToTable("Trends", "Change", t =>
                        {
                            t.HasCheckConstraint("CK_Trends_EstimatedCostImpact", "[EstimatedCostImpact] IS NULL OR [EstimatedCostImpact] >= 0");

                            t.HasCheckConstraint("CK_Trends_EstimatedScheduleImpact", "[EstimatedScheduleImpactDays] IS NULL OR [EstimatedScheduleImpactDays] >= 0");

                            t.HasCheckConstraint("CK_Trends_MinMaxCostImpact", "[MinCostImpact] IS NULL OR [MaxCostImpact] IS NULL OR [MinCostImpact] <= [MaxCostImpact]");

                            t.HasCheckConstraint("CK_Trends_Probability", "[Probability] >= 0 AND [Probability] <= 100");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.TrendAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("TrendId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UploadedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TrendId");

                    b.HasIndex("UploadedBy");

                    b.HasIndex("UploadedDate");

                    b.ToTable("TrendAttachments", "Change", t =>
                        {
                            t.HasCheckConstraint("CK_TrendAttachments_FileSize", "[FileSize] > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.TrendComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("TrendId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommentDate");

                    b.HasIndex("TrendId");

                    b.HasIndex("UserId");

                    b.ToTable("TrendComments", "Change");
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.Variation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AdvancePaymentPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ApprovalComments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("ApprovalLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<Guid?>("ApprovedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ApprovedValue")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<decimal?>("CertifiedValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ChangeOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ClientApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClientApprovalReference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("ClientApproved")
                        .HasColumnType("bit");

                    b.Property<string>("ClientComments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ClientReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContractReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ContractorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContractorReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContractualBasis")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("USD");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("DisputeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisputeReason")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("DrawingReferences")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("EquipmentCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ImpactAnalysis")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal?>("ImplementedValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("IndirectCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsContractual")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsCriticalPathImpacted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDisputed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsImplemented")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsResolved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Justification")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal?>("LaborCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MaterialCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("NegotiatedValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OriginalValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OverheadPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PaidValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("PaymentTerms")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal?>("ProfitPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuantityChanges")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("JSON structure");

                    b.Property<string>("RateAdjustments")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("JSON structure");

                    b.Property<Guid?>("RequestedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RequiresClientApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ResolutionDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("RetentionPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ReviewedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RevisedCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ScopeOfWork")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("SpecificationReferences")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<decimal?>("SubcontractorCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TimeExtensionDays")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("TrendId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("Category");

                    b.HasIndex("ChangeOrderId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ContractorId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("IssuedDate");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RequestedByUserId");

                    b.HasIndex("ReviewedByUserId");

                    b.HasIndex("Status");

                    b.HasIndex("TrendId");

                    b.HasIndex("Type");

                    b.HasIndex("ProjectId", "Status");

                    b.ToTable("Variations", "Change", t =>
                        {
                            t.HasCheckConstraint("CK_Variations_ApprovalLevel", "[ApprovalLevel] >= 1 AND [ApprovalLevel] <= 5");

                            t.HasCheckConstraint("CK_Variations_ApprovedValue", "[ApprovedValue] >= 0");

                            t.HasCheckConstraint("CK_Variations_CostComponents", "([LaborCost] IS NULL OR [LaborCost] >= 0) AND ([MaterialCost] IS NULL OR [MaterialCost] >= 0) AND ([EquipmentCost] IS NULL OR [EquipmentCost] >= 0) AND ([SubcontractorCost] IS NULL OR [SubcontractorCost] >= 0) AND ([IndirectCost] IS NULL OR [IndirectCost] >= 0)");

                            t.HasCheckConstraint("CK_Variations_Implementation", "([ImplementedValue] IS NULL OR [ImplementedValue] >= 0) AND ([CertifiedValue] IS NULL OR [CertifiedValue] >= 0) AND ([PaidValue] IS NULL OR [PaidValue] >= 0)");

                            t.HasCheckConstraint("CK_Variations_OriginalValue", "[OriginalValue] >= 0");

                            t.HasCheckConstraint("CK_Variations_Percentages", "([OverheadPercentage] IS NULL OR ([OverheadPercentage] >= 0 AND [OverheadPercentage] <= 100)) AND ([ProfitPercentage] IS NULL OR ([ProfitPercentage] >= 0 AND [ProfitPercentage] <= 100)) AND ([AdvancePaymentPercentage] IS NULL OR ([AdvancePaymentPercentage] >= 0 AND [AdvancePaymentPercentage] <= 100)) AND ([RetentionPercentage] IS NULL OR ([RetentionPercentage] >= 0 AND [RetentionPercentage] <= 100))");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.VariationAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UploadedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VariationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("UploadedBy");

                    b.HasIndex("UploadedDate");

                    b.HasIndex("VariationId");

                    b.ToTable("VariationAttachments", "Change", t =>
                        {
                            t.HasCheckConstraint("CK_VariationAttachments_FileSize", "[FileSize] > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.VariationItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("OriginalQuantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("RevisedQuantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Unit")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("UnitRate")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("VariationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ItemCode");

                    b.HasIndex("VariationId");

                    b.ToTable("VariationItems", "Change", t =>
                        {
                            t.HasCheckConstraint("CK_VariationItems_Quantities", "([OriginalQuantity] IS NULL OR [OriginalQuantity] >= 0) AND ([RevisedQuantity] IS NULL OR [RevisedQuantity] >= 0)");

                            t.HasCheckConstraint("CK_VariationItems_UnitRate", "[UnitRate] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Configuration.Core.ProjectType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovalLevelsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CBSTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("DefaultContingencyPercentage")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(10m);

                    b.Property<string>("DefaultCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("USD");

                    b.Property<int>("DefaultDurationUnit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("DefaultProgressMethod")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Physical");

                    b.Property<int>("DefaultReportingPeriod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(7);

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("OBSTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RequiresBudget")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("RequiresCBS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("RequiresChangeManagement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("RequiresDocumentControl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("RequiresHSE")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("RequiresOBS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("RequiresQualityControl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("RequiresRiskManagement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("RequiresSchedule")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("RequiresWBS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid?>("RiskRegisterTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("WBSTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WorkflowStagesJson")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("IsActive", "IsDeleted");

                    b.ToTable("ProjectTypes", "Configuration", t =>
                        {
                            t.HasCheckConstraint("CK_ProjectTypes_DefaultContingencyPercentage", "[DefaultContingencyPercentage] >= 0 AND [DefaultContingencyPercentage] <= 100");

                            t.HasCheckConstraint("CK_ProjectTypes_DefaultDurationUnit", "[DefaultDurationUnit] >= 1 AND [DefaultDurationUnit] <= 4");

                            t.HasCheckConstraint("CK_ProjectTypes_DefaultReportingPeriod", "[DefaultReportingPeriod] >= 1");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Configuration.Core.SystemParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AllowedValuesJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("String");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEncrypted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsSystem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaxValue")
                        .HasColumnType("int");

                    b.Property<int?>("MinValue")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ValidationRule")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("IsPublic");

                    b.HasIndex("IsSystem");

                    b.HasIndex("Category", "Key")
                        .IsUnique();

                    b.HasIndex("IsPublic", "Category");

                    b.ToTable("SystemParameters", "Configuration", t =>
                        {
                            t.HasCheckConstraint("CK_SystemParameters_DataType", "[DataType] IN ('String', 'Number', 'Boolean', 'Date', 'Json')");

                            t.HasCheckConstraint("CK_SystemParameters_MinMaxValue", "[MinValue] IS NULL OR [MaxValue] IS NULL OR [MinValue] <= [MaxValue]");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Configuration.Templates.CBSTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodingScheme")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Numeric");

                    b.Property<int>("CostType")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Delimiter")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasDefaultValue(".");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IncludesContingency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IncludesIndirectCosts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("IndustryType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastUsedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UsageCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CostType");

                    b.HasIndex("IndustryType");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("IsPublic");

                    b.HasIndex("IndustryType", "CostType");

                    b.HasIndex("IsActive", "IsPublic", "IsDeleted");

                    b.ToTable("CBSTemplates", "Configuration", t =>
                        {
                            t.HasCheckConstraint("CK_CBSTemplates_CodingScheme", "[CodingScheme] IN ('Numeric', 'Alphabetic', 'Alphanumeric')");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Configuration.Templates.CBSTemplateElement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CBSTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CostType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("HierarchyPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsControlAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("UnitRate")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CBSTemplateId");

                    b.HasIndex("CostType");

                    b.HasIndex("HierarchyPath");

                    b.HasIndex("IsControlAccount");

                    b.HasIndex("Level");

                    b.HasIndex("ParentId");

                    b.HasIndex("CBSTemplateId", "Code")
                        .IsUnique();

                    b.HasIndex("CBSTemplateId", "IsControlAccount");

                    b.HasIndex("CBSTemplateId", "Level");

                    b.ToTable("CBSTemplateElements", "Configuration", t =>
                        {
                            t.HasCheckConstraint("CK_CBSTemplateElements_Level", "[Level] >= 1");

                            t.HasCheckConstraint("CK_CBSTemplateElements_UnitRate", "[UnitRate] IS NULL OR [UnitRate] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Configuration.Templates.WBSTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoGenerateCodes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CodeLength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(3);

                    b.Property<string>("CodingScheme")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Delimiter")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasDefaultValue(".");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IndustryType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastUsedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ProjectType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UsageCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IndustryType");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("IsPublic");

                    b.HasIndex("ProjectType");

                    b.HasIndex("IndustryType", "ProjectType");

                    b.HasIndex("IsActive", "IsPublic", "IsDeleted");

                    b.ToTable("WBSTemplates", "Configuration", t =>
                        {
                            t.HasCheckConstraint("CK_WBSTemplates_CodeLength", "[CodeLength] >= 1 AND [CodeLength] <= 10");

                            t.HasCheckConstraint("CK_WBSTemplates_CodingScheme", "[CodingScheme] IN ('Numeric', 'Alphabetic', 'Alphanumeric')");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Configuration.Templates.WBSTemplateElement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal?>("DefaultBudgetPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DefaultDiscipline")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("DefaultDurationDays")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ElementType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Phase");

                    b.Property<string>("HierarchyPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsOptional")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SequenceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("WBSTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ElementType");

                    b.HasIndex("HierarchyPath");

                    b.HasIndex("Level");

                    b.HasIndex("ParentId");

                    b.HasIndex("SequenceNumber");

                    b.HasIndex("WBSTemplateId");

                    b.HasIndex("WBSTemplateId", "Code")
                        .IsUnique();

                    b.HasIndex("WBSTemplateId", "Level");

                    b.ToTable("WBSTemplateElements", "Configuration", t =>
                        {
                            t.HasCheckConstraint("CK_WBSTemplateElements_DefaultBudgetPercentage", "[DefaultBudgetPercentage] IS NULL OR ([DefaultBudgetPercentage] >= 0 AND [DefaultBudgetPercentage] <= 100)");

                            t.HasCheckConstraint("CK_WBSTemplateElements_DefaultDurationDays", "[DefaultDurationDays] IS NULL OR [DefaultDurationDays] >= 0");

                            t.HasCheckConstraint("CK_WBSTemplateElements_Level", "[Level] >= 1");

                            t.HasCheckConstraint("CK_WBSTemplateElements_SequenceNumber", "[SequenceNumber] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.ChangeOrderDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChangeOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChangeOrderId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DocumentType");

                    b.HasIndex("IsActive");

                    b.HasIndex("UploadedDate");

                    b.HasIndex("ChangeOrderId", "DocumentType", "IsActive");

                    b.ToTable("ChangeOrderDocuments", "Contracts", t =>
                        {
                            t.HasCheckConstraint("CK_ChangeOrderDocuments_FileSize", "[FileSize] > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.ChangeOrderMilestone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChangeOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImpactDescription")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ImpactType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("MilestoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChangeOrderId");

                    b.HasIndex("ImpactType");

                    b.HasIndex("MilestoneId");

                    b.HasIndex("ChangeOrderId", "MilestoneId")
                        .IsUnique();

                    b.ToTable("ChangeOrderMilestones", "Contracts");
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.ChangeOrderRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChangeOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<Guid>("RelatedChangeOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RelationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChangeOrderId");

                    b.HasIndex("RelatedChangeOrderId");

                    b.HasIndex("RelationType");

                    b.HasIndex("ChangeOrderId", "RelatedChangeOrderId")
                        .IsUnique();

                    b.ToTable("ChangeOrderRelations", "Contracts", t =>
                        {
                            t.HasCheckConstraint("CK_ChangeOrderRelations_NotSelfReferencing", "[ChangeOrderId] <> [RelatedChangeOrderId]");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.Claim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActualResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ApprovedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ApprovedTimeExtension")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("AssessedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AssessedTimeExtension")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("AssessmentComments")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ClaimBasis")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ClaimNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClaimantName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("ClaimedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClaimedTimeExtension")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContractualReference")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("USD");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("Direction")
                        .HasColumnType("int");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FactualBasis")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("HasDetailedParticulars")
                        .HasColumnType("bit");

                    b.Property<bool>("HasExpertReport")
                        .HasColumnType("bit");

                    b.Property<bool>("HasMerit")
                        .HasColumnType("bit");

                    b.Property<bool>("HasNoticeOfClaim")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSupportingDocuments")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTimeBarred")
                        .HasColumnType("bit");

                    b.Property<string>("LegalBasis")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal>("LiabilityPercentage")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Metadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PaidAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Resolution")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResolutionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResolutionDetails")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("RespondentName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ResponseDueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SettlementTerms")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ClaimNumber")
                        .IsUnique();

                    b.HasIndex("ContractId");

                    b.HasIndex("Direction");

                    b.HasIndex("EventDate");

                    b.HasIndex("IsActive");

                    b.HasIndex("Priority");

                    b.HasIndex("ResponseDueDate");

                    b.HasIndex("Status");

                    b.HasIndex("SubmissionDate");

                    b.HasIndex("Type");

                    b.HasIndex("ContractId", "Status");

                    b.ToTable("Claims", "Contracts", t =>
                        {
                            t.HasCheckConstraint("CK_Claims_Amounts", "[ClaimedAmount] >= 0 AND [AssessedAmount] >= 0 AND [ApprovedAmount] >= 0 AND [PaidAmount] >= 0");

                            t.HasCheckConstraint("CK_Claims_Dates", "[NotificationDate] >= [EventDate] AND [SubmissionDate] >= [NotificationDate]");

                            t.HasCheckConstraint("CK_Claims_LiabilityPercentage", "[LiabilityPercentage] >= 0 AND [LiabilityPercentage] <= 100");

                            t.HasCheckConstraint("CK_Claims_TimeExtensions", "[ClaimedTimeExtension] >= 0 AND [AssessedTimeExtension] >= 0 AND [ApprovedTimeExtension] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.ClaimChangeOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChangeOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClaimId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("RelationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChangeOrderId");

                    b.HasIndex("ClaimId");

                    b.HasIndex("RelationType");

                    b.HasIndex("ClaimId", "ChangeOrderId")
                        .IsUnique();

                    b.ToTable("ClaimChangeOrders", "Contracts");
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.ClaimDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClaimId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DocumentType");

                    b.HasIndex("IsActive");

                    b.HasIndex("UploadedDate");

                    b.HasIndex("ClaimId", "DocumentType", "IsActive");

                    b.ToTable("ClaimDocuments", "Contracts", t =>
                        {
                            t.HasCheckConstraint("CK_ClaimDocuments_FileSize", "[FileSize] > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.ClaimRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClaimId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<Guid>("RelatedClaimId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RelationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("RelatedClaimId");

                    b.HasIndex("RelationType");

                    b.HasIndex("ClaimId", "RelatedClaimId")
                        .IsUnique();

                    b.ToTable("ClaimRelations", "Contracts", t =>
                        {
                            t.HasCheckConstraint("CK_ClaimRelations_NotSelfReferencing", "[ClaimId] <> [RelatedClaimId]");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("AmountInvoiced")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountPaid")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ApprovalComments")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("ContractDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContractDocumentUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ContractorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContractorReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("USD");

                    b.Property<DateTime>("CurrentEndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("ExchangeRate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 6)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(1.0m);

                    b.Property<string>("Exclusions")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("InsuranceRequirements")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDocumentUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Metadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("OriginalEndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OriginalValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PaymentBondAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaymentBondExpiry")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentDays")
                        .HasColumnType("int");

                    b.Property<string>("PaymentSchedule")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PaymentTerms")
                        .HasColumnType("int");

                    b.Property<string>("PenaltyClauses")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal>("PercentageComplete")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PerformanceBondAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PerformanceBondExpiry")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RequiresPaymentBond")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresPerformanceBond")
                        .HasColumnType("bit");

                    b.Property<decimal>("RetentionAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RetentionPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("int");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("SpecialConditions")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SubCategory")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TerminationClauses")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("ContractNumber")
                        .IsUnique();

                    b.HasIndex("ContractorId");

                    b.HasIndex("IsActive");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.HasIndex("ContractorId", "Status");

                    b.HasIndex("ProjectId", "Status");

                    b.HasIndex("Status", "CurrentEndDate");

                    b.ToTable("Contracts", "Contracts", t =>
                        {
                            t.HasCheckConstraint("CK_Contracts_CurrentValue", "[CurrentValue] >= 0");

                            t.HasCheckConstraint("CK_Contracts_Dates", "[CurrentEndDate] >= [StartDate]");

                            t.HasCheckConstraint("CK_Contracts_ExchangeRate", "[ExchangeRate] > 0");

                            t.HasCheckConstraint("CK_Contracts_PaymentDays", "[PaymentDays] >= 0");

                            t.HasCheckConstraint("CK_Contracts_PercentageComplete", "[PercentageComplete] >= 0 AND [PercentageComplete] <= 100");

                            t.HasCheckConstraint("CK_Contracts_RetentionPercentage", "[RetentionPercentage] >= 0 AND [RetentionPercentage] <= 100");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.ContractChangeOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Actua")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ApprovalComments")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Approve")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ChangeOrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("USD");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal>("Estimate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Hareakdown")
                        .HasColumnType("bit");

                    b.Property<bool>("HasScheduleAnalysis")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSupportingDocuments")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ImplementationEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ImplementationStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Justification")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Metadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal>("PercentageComplete")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("Priority")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("RejectedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionReason")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ReviewComments")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("RevisedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RiskAssessment")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("RiskMitigationPlan")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ScheduleImpact")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("ScheduleImpactDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ScopeImpact")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubmittedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalDate");

                    b.HasIndex("ChangeOrderNumber")
                        .IsUnique();

                    b.HasIndex("ContractId");

                    b.HasIndex("IsActive");

                    b.HasIndex("Priority");

                    b.HasIndex("Status");

                    b.HasIndex("SubmissionDate");

                    b.HasIndex("Type");

                    b.HasIndex("ContractId", "Status");

                    b.ToTable("ContractChangeOrders", "Contracts", t =>
                        {
                            t.HasCheckConstraint("CK_ContractChangeOrders_Amounts", "[Estimate] >= 0 AND [Approve] >= 0 AND [Actua] >= 0");

                            t.HasCheckConstraint("CK_ContractChangeOrders_ApprovalDates", "([ApprovalDate] IS NULL AND [RejectionDate] IS NULL) OR ([ApprovalDate] IS NOT NULL AND [RejectionDate] IS NULL) OR ([ApprovalDate] IS NULL AND [RejectionDate] IS NOT NULL)");

                            t.HasCheckConstraint("CK_ContractChangeOrders_PercentageComplete", "[PercentageComplete] >= 0 AND [PercentageComplete] <= 100");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.ContractDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DocumentType");

                    b.HasIndex("IsActive");

                    b.HasIndex("UploadedDate");

                    b.HasIndex("ContractId", "DocumentType", "IsActive");

                    b.ToTable("ContractDocuments", "Contracts", t =>
                        {
                            t.HasCheckConstraint("CK_ContractDocuments_FileSize", "[FileSize] > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.ContractMilestone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActualDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ApprovalComments")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CompletionCriteria")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("USD");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Deliverables")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("ForecastDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("InvoiceAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCritical")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInvoiced")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaymentMilestone")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastProgressUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Metadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MilestoneCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal>("PaymentAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PercentageComplete")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("PercentageOfContract")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PlannedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProgressComments")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("RequiresClientApproval")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RevisedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VarianceExplanation")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsCritical");

                    b.HasIndex("IsPaymentMilestone");

                    b.HasIndex("PlannedDate");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.HasIndex("ContractId", "MilestoneCode")
                        .IsUnique();

                    b.HasIndex("ContractId", "SequenceNumber");

                    b.HasIndex("ContractId", "Status");

                    b.ToTable("ContractMilestones", "Contracts", t =>
                        {
                            t.HasCheckConstraint("CK_ContractMilestones_Amounts", "[Amount] >= 0 AND [InvoiceAmount] >= 0 AND [PaymentAmount] >= 0");

                            t.HasCheckConstraint("CK_ContractMilestones_Dates", "[ActualDate] IS NULL OR [ActualDate] >= [PlannedDate]");

                            t.HasCheckConstraint("CK_ContractMilestones_PercentageComplete", "[PercentageComplete] >= 0 AND [PercentageComplete] <= 100");

                            t.HasCheckConstraint("CK_ContractMilestones_PercentageOfContract", "[PercentageOfContract] >= 0 AND [PercentageOfContract] <= 100");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.MilestoneDependency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DependencyType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasDefaultValue("FS");

                    b.Property<int>("LagDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("PredecessorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SuccessorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DependencyType");

                    b.HasIndex("PredecessorId");

                    b.HasIndex("SuccessorId");

                    b.HasIndex("PredecessorId", "SuccessorId")
                        .IsUnique();

                    b.ToTable("MilestoneDependencies", "Contracts", t =>
                        {
                            t.HasCheckConstraint("CK_MilestoneDependencies_DependencyType", "[DependencyType] IN ('FS', 'SS', 'FF', 'SF')");

                            t.HasCheckConstraint("CK_MilestoneDependencies_NotSelfReferencing", "[PredecessorId] <> [SuccessorId]");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.MilestoneDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("MilestoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DocumentType");

                    b.HasIndex("IsActive");

                    b.HasIndex("MilestoneId");

                    b.HasIndex("UploadedDate");

                    b.HasIndex("MilestoneId", "DocumentType", "IsActive");

                    b.ToTable("MilestoneDocuments", "Contracts", t =>
                        {
                            t.HasCheckConstraint("CK_MilestoneDocuments_FileSize", "[FileSize] > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.Valuation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AdvancePaymentRecovery")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountDue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ApprovalComments")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("ApprovedVariations")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("USD");

                    b.Property<decimal>("CurrentPeriodWork")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("GrossValuation")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("HasMeasurementSheets")
                        .HasColumnType("bit");

                    b.Property<bool>("HasProgressPhotos")
                        .HasColumnType("bit");

                    b.Property<bool>("HasQualityDocuments")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInvoiced")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<decimal>("LessPreviousCertificates")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LessRetention")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MaterialsOffSite")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MaterialsOnSite")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Metadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NetValuation")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal>("OtherDeductions")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaymentAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Penalties")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PendingVariations")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PercentageComplete")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PeriodEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodStartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PreviouslyCompletedWork")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RejectedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionReason")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal>("RetentionAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("TotalCompletedWork")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDeductions")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalMaterials")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("ValuationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ValuationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ValuationPeriod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("IsActive");

                    b.HasIndex("Status");

                    b.HasIndex("SubmissionDate");

                    b.HasIndex("ValuationDate");

                    b.HasIndex("ValuationNumber")
                        .IsUnique();

                    b.HasIndex("ContractId", "Status");

                    b.HasIndex("ContractId", "ValuationPeriod")
                        .IsUnique();

                    b.ToTable("Valuations", "Contracts", t =>
                        {
                            t.HasCheckConstraint("CK_Valuations_Amounts", "[GrossValuation] >= 0 AND [RetentionAmount] >= 0 AND [NetValuation] >= 0 AND [AmountDue] >= 0");

                            t.HasCheckConstraint("CK_Valuations_Dates", "[PeriodEndDate] >= [PeriodStartDate]");

                            t.HasCheckConstraint("CK_Valuations_PercentageComplete", "[PercentageComplete] >= 0 AND [PercentageComplete] <= 100");

                            t.HasCheckConstraint("CK_Valuations_ValuationPeriod", "[ValuationPeriod] > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.ValuationDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ValuationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DocumentType");

                    b.HasIndex("IsActive");

                    b.HasIndex("UploadedDate");

                    b.HasIndex("ValuationId");

                    b.HasIndex("ValuationId", "DocumentType", "IsActive");

                    b.ToTable("ValuationDocuments", "Contracts", t =>
                        {
                            t.HasCheckConstraint("CK_ValuationDocuments_FileSize", "[FileSize] > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.ValuationItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal>("ContractAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ContractQuantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("CurrentAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CurrentQuantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("PercentageComplete")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PreviousAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PreviousQuantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalQuantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("UnitRate")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("ValuationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WorkPackageCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("ValuationId");

                    b.HasIndex("WorkPackageCode");

                    b.HasIndex("ValuationId", "ItemCode")
                        .IsUnique();

                    b.ToTable("ValuationItems", "Contracts", t =>
                        {
                            t.HasCheckConstraint("CK_ValuationItems_Amounts", "[UnitRate] >= 0 AND [ContractAmount] >= 0 AND [PreviousAmount] >= 0 AND [CurrentAmount] >= 0 AND [TotalAmount] >= 0");

                            t.HasCheckConstraint("CK_ValuationItems_PercentageComplete", "[PercentageComplete] >= 0 AND [PercentageComplete] <= 100");

                            t.HasCheckConstraint("CK_ValuationItems_Quantities", "[ContractQuantity] >= 0 AND [PreviousQuantity] >= 0 AND [CurrentQuantity] >= 0 AND [TotalQuantity] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cost.Budget.Budget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovalComments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("BaselineDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ContingencyAmount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("ContingencyPercentage")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("USD");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("ExchangeRate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(1.0m);

                    b.Property<bool>("IsBaseline")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastRevisionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LockedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("LockedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ManagementReserve")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("ManagementReservePercentage")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("ParentBudgetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RevisionCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SubmittedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("IsBaseline");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ParentBudgetId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.HasIndex("Version");

                    b.HasIndex("ProjectId", "IsBaseline");

                    b.HasIndex("ProjectId", "Status");

                    b.HasIndex("ProjectId", "Version")
                        .IsUnique();

                    b.ToTable("Budgets", "Cost", t =>
                        {
                            t.HasCheckConstraint("CK_Budgets_ContingencyPercentage", "[ContingencyPercentage] >= 0 AND [ContingencyPercentage] <= 100");

                            t.HasCheckConstraint("CK_Budgets_ExchangeRate", "[ExchangeRate] > 0");

                            t.HasCheckConstraint("CK_Budgets_ManagementReservePercentage", "[ManagementReservePercentage] >= 0 AND [ManagementReservePercentage] <= 100");

                            t.HasCheckConstraint("CK_Budgets_TotalAmount", "[TotalAmount] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cost.Budget.BudgetItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountingCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("BudgetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<Guid?>("ControlAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CostType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("UnitOfMeasure")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("UnitRate")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("Category");

                    b.HasIndex("ControlAccountId");

                    b.HasIndex("CostType");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ItemCode");

                    b.HasIndex("PackageId");

                    b.HasIndex("BudgetId", "ItemCode")
                        .IsUnique();

                    b.HasIndex("BudgetId", "SortOrder");

                    b.HasIndex("ControlAccountId", "BudgetId");

                    b.ToTable("BudgetItems", "Cost", t =>
                        {
                            t.HasCheckConstraint("CK_BudgetItems_Amount", "[Amount] >= 0");

                            t.HasCheckConstraint("CK_BudgetItems_Quantity", "[Quantity] >= 0");

                            t.HasCheckConstraint("CK_BudgetItems_UnitRate", "[UnitRate] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cost.Budget.BudgetRevision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("BudgetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("NewAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PreviousAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RevisedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("RevisionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("IsApproved");

                    b.HasIndex("RevisionDate");

                    b.HasIndex("RevisionNumber");

                    b.HasIndex("BudgetId", "RevisionNumber")
                        .IsUnique();

                    b.ToTable("BudgetRevisions", "Cost", t =>
                        {
                            t.HasCheckConstraint("CK_BudgetRevisions_RevisionNumber", "[RevisionNumber] > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cost.Commitments.Commitment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountingReference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("AdvancePaymentAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovalNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("BudgetItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommitmentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("CommittedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ContractDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContractNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ContractorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ControlAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Deliverables")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpectedCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("InvoicedAmount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsFixedPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsTimeAndMaterial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastInvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OriginalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaidAmount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int?>("PaymentTermsDays")
                        .HasColumnType("int");

                    b.Property<decimal?>("PerformancePercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("RetentionAmount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("RetentionPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RevisedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ScopeOfWork")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Terms")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VendorReference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BudgetItemId");

                    b.HasIndex("CommitmentNumber")
                        .IsUnique();

                    b.HasIndex("ContractDate");

                    b.HasIndex("ContractorId");

                    b.HasIndex("ControlAccountId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.HasIndex("ContractorId", "Status");

                    b.HasIndex("ProjectId", "Status");

                    b.ToTable("Commitments", "Cost", t =>
                        {
                            t.HasCheckConstraint("CK_Commitments_Amounts", "[OriginalAmount] >= 0 AND [RevisedAmount] >= 0 AND [CommittedAmount] >= 0 AND [InvoicedAmount] >= 0 AND [PaidAmount] >= 0 AND [RetentionAmount] >= 0");

                            t.HasCheckConstraint("CK_Commitments_ContractType", "(([IsFixedPrice] = 1 AND [IsTimeAndMaterial] = 0) OR ([IsFixedPrice] = 0 AND [IsTimeAndMaterial] = 1))");

                            t.HasCheckConstraint("CK_Commitments_Dates", "[EndDate] > [StartDate]");

                            t.HasCheckConstraint("CK_Commitments_Percentages", "[RetentionPercentage] IS NULL OR ([RetentionPercentage] >= 0 AND [RetentionPercentage] <= 100)");

                            t.HasCheckConstraint("CK_Commitments_Performance", "[PerformancePercentage] IS NULL OR ([PerformancePercentage] >= 0 AND [PerformancePercentage] <= 100)");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cost.Commitments.CommitmentItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BudgetItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommitmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("DeliveredQuantity")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("DeliveryInstructions")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("DeliveryLocation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DetailedDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal?>("DiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DrawingNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("InvoicedAmount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("InvoicedQuantity")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ItemNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("LineTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MaterialCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("NetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaidAmount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("PromisedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("RequiredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SpecificationReference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Specifications")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<decimal?>("TaxAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TaxRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VendorItemCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BudgetItemId");

                    b.HasIndex("CommitmentId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ItemCode");

                    b.HasIndex("ItemNumber");

                    b.HasIndex("Status");

                    b.HasIndex("CommitmentId", "ItemNumber")
                        .IsUnique();

                    b.HasIndex("CommitmentId", "Status");

                    b.ToTable("CommitmentItems", "Cost", t =>
                        {
                            t.HasCheckConstraint("CK_CommitmentItems_Amounts", "[TotalPrice] >= 0 AND [NetAmount] >= 0 AND [LineTotal] >= 0");

                            t.HasCheckConstraint("CK_CommitmentItems_Percentages", "[DiscountPercentage] IS NULL OR ([DiscountPercentage] >= 0 AND [DiscountPercentage] <= 100)");

                            t.HasCheckConstraint("CK_CommitmentItems_Progress", "[DeliveredQuantity] >= 0 AND [InvoicedQuantity] >= 0 AND [InvoicedAmount] >= 0 AND [PaidAmount] >= 0");

                            t.HasCheckConstraint("CK_CommitmentItems_Quantity", "[Quantity] > 0");

                            t.HasCheckConstraint("CK_CommitmentItems_TaxRate", "[TaxRate] IS NULL OR ([TaxRate] >= 0 AND [TaxRate] <= 100)");

                            t.HasCheckConstraint("CK_CommitmentItems_UnitPrice", "[UnitPrice] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cost.Commitments.CommitmentRevision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("ChangeAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ChangeOrderReference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("ChangePercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CommitmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("PreviousAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("RevisedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RevisionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CommitmentId");

                    b.HasIndex("RevisionDate");

                    b.HasIndex("RevisionNumber");

                    b.HasIndex("CommitmentId", "RevisionNumber");

                    b.ToTable("CommitmentRevisions", "Cost", t =>
                        {
                            t.HasCheckConstraint("CK_CommitmentRevisions_Amounts", "[PreviousAmount] >= 0 AND [RevisedAmount] >= 0");

                            t.HasCheckConstraint("CK_CommitmentRevisions_RevisionNumber", "[RevisionNumber] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cost.Commitments.CommitmentWorkPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AllocatedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CommitmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("InvoicedAmount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("LastProgressUpdate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PaidAmount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("ProgressPercentage")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("RetainedAmount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("WBSElementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommitmentId");

                    b.HasIndex("ProgressPercentage");

                    b.HasIndex("WBSElementId");

                    b.HasIndex("CommitmentId", "WBSElementId")
                        .IsUnique();

                    b.ToTable("CommitmentWorkPackages", "Cost", t =>
                        {
                            t.HasCheckConstraint("CK_CommitmentWorkPackages_Amounts", "[AllocatedAmount] >= 0 AND [InvoicedAmount] >= 0 AND [RetainedAmount] >= 0 AND [PaidAmount] >= 0");

                            t.HasCheckConstraint("CK_CommitmentWorkPackages_InvoicedVsAllocated", "[InvoicedAmount] <= [AllocatedAmount]");

                            t.HasCheckConstraint("CK_CommitmentWorkPackages_PaidVsInvoiced", "[PaidAmount] <= [InvoicedAmount]");

                            t.HasCheckConstraint("CK_CommitmentWorkPackages_Progress", "[ProgressPercentage] >= 0 AND [ProgressPercentage] <= 100");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cost.Control.ActualCost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActualDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ControlAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CostItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("InvoiceReference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ActualDate");

                    b.HasIndex("ControlAccountId");

                    b.HasIndex("CostItemId");

                    b.HasIndex("CostItemId", "ActualDate");

                    b.ToTable("ActualCosts", "Cost", t =>
                        {
                            t.HasCheckConstraint("CK_ActualCosts_Amount", "[Amount] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cost.Control.ControlAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BAC")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BaselineDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CAMUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("ContingencyReserve")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("ManagementReserve")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("MeasurementMethod")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("PercentComplete")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid>("PhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CAMUserId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PhaseId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Status");

                    b.HasIndex("CAMUserId", "Status");

                    b.HasIndex("ProjectId", "Code")
                        .IsUnique();

                    b.HasIndex("ProjectId", "Status");

                    b.ToTable("ControlAccounts", "Cost", t =>
                        {
                            t.HasCheckConstraint("CK_ControlAccounts_BAC", "[BAC] >= 0");

                            t.HasCheckConstraint("CK_ControlAccounts_ContingencyReserve", "[ContingencyReserve] >= 0");

                            t.HasCheckConstraint("CK_ControlAccounts_ManagementReserve", "[ManagementReserve] >= 0");

                            t.HasCheckConstraint("CK_ControlAccounts_PercentComplete", "[PercentComplete] >= 0 AND [PercentComplete] <= 100");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cost.Control.ControlAccountAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AllocationPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ControlAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AssignedDate");

                    b.HasIndex("ControlAccountId");

                    b.HasIndex("IsActive");

                    b.HasIndex("Role");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "IsActive");

                    b.HasIndex("ControlAccountId", "UserId", "Role")
                        .IsUnique();

                    b.ToTable("ControlAccountAssignments", "Cost", t =>
                        {
                            t.HasCheckConstraint("CK_ControlAccountAssignments_AllocationPercentage", "[AllocationPercentage] IS NULL OR ([AllocationPercentage] >= 0 AND [AllocationPercentage] <= 100)");

                            t.HasCheckConstraint("CK_ControlAccountAssignments_EndDate", "[EndDate] IS NULL OR [EndDate] >= [AssignedDate]");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cost.Control.CostItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("ActualCost")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("CBSId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<decimal>("CommittedCost")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid?>("ControlAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CostCenter")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("ExchangeRate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(12, 6)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(1.0m);

                    b.Property<decimal>("ForecastCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PlannedCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VendorId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("WBSElementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CBSId");

                    b.HasIndex("Category");

                    b.HasIndex("ControlAccountId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ItemCode");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.HasIndex("WBSElementId");

                    b.HasIndex("ControlAccountId", "Type");

                    b.HasIndex("ProjectId", "ItemCode")
                        .IsUnique();

                    b.HasIndex("WBSElementId", "Category");

                    b.ToTable("CostItems", "Cost", t =>
                        {
                            t.HasCheckConstraint("CK_CostItems_Costs", "[PlannedCost] >= 0 AND [ActualCost] >= 0 AND [CommittedCost] >= 0 AND [ForecastCost] >= 0");

                            t.HasCheckConstraint("CK_CostItems_ExchangeRate", "[ExchangeRate] > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cost.Core.AccountCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CostSubType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CostType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Direct");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("EligibleForAcceleratedDepreciation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PackageCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("PhaseCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<Guid?>("PhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProjectCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RequiresIVA")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("SIICode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SIIDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SpecificCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AccountType");

                    b.HasIndex("Category");

                    b.HasIndex("CostType");

                    b.HasIndex("IsActive");

                    b.HasIndex("PhaseId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectId1");

                    b.HasIndex("ProjectId", "PhaseId");

                    b.ToTable("AccountCodes", "Cost", t =>
                        {
                            t.HasCheckConstraint("CK_AccountCodes_AccountType", "[AccountType] IN ('P', 'C', 'G', 'E')");

                            t.HasCheckConstraint("CK_AccountCodes_CostType", "[CostType] IN ('Direct', 'Indirect', 'Contingency')");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cost.Core.CBS", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountingCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("ActualCost")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("AllocationBasis")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("AllocationPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedChanges")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("CommittedCost")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("CostAccountCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CostCenter")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CostType")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("USD");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal?>("EstimateAccuracyHigh")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("EstimateAccuracyLow")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("EstimateClass")
                        .HasColumnType("int");

                    b.Property<decimal>("ForecastCost")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("FullPath")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsControlPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsLeafNode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsTimePhased")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("OriginalBudget")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("TimePhasedData")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CostType");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsControlPoint");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("IsLeafNode");

                    b.HasIndex("Level");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ParentId", "SequenceNumber");

                    b.HasIndex("ProjectId", "Code")
                        .IsUnique();

                    b.HasIndex("ProjectId", "Level");

                    b.ToTable("CBS", "Cost", t =>
                        {
                            t.HasCheckConstraint("CK_CBS_AllocationPercentage", "[AllocationPercentage] IS NULL OR ([AllocationPercentage] >= 0 AND [AllocationPercentage] <= 100)");

                            t.HasCheckConstraint("CK_CBS_Amounts", "[OriginalBudget] >= 0 AND [ApprovedChanges] >= 0 AND [CommittedCost] >= 0 AND [ActualCost] >= 0 AND [ForecastCost] >= 0");

                            t.HasCheckConstraint("CK_CBS_EstimateAccuracy", "([EstimateAccuracyLow] IS NULL AND [EstimateAccuracyHigh] IS NULL) OR ([EstimateAccuracyLow] <= 0 AND [EstimateAccuracyHigh] >= 0)");

                            t.HasCheckConstraint("CK_CBS_Level", "[Level] >= 0");

                            t.HasCheckConstraint("CK_CBS_SequenceNumber", "[SequenceNumber] > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cost.Core.CostControlReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ActualCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("BudgetedCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ControlAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CostPerformanceIndex")
                        .HasPrecision(5, 3)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostVariance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("EarnedValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EstimateAtCompletion")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EstimateToComplete")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ExchangeRateUSD")
                        .HasPrecision(12, 6)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImportedMaterialsPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("PeriodType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PhysicalProgressPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SchedulePerformanceIndex")
                        .HasPrecision(5, 3)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ScheduleVariance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ToCompletePerformanceIndex")
                        .HasPrecision(5, 3)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("UFValue")
                        .HasPrecision(12, 6)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("VarianceAtCompletion")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ControlAccountId");

                    b.HasIndex("PeriodType");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ReportDate");

                    b.HasIndex("ControlAccountId", "ReportDate");

                    b.HasIndex("ProjectId", "ReportDate");

                    b.ToTable("CostControlReports", "Cost", t =>
                        {
                            t.HasCheckConstraint("CK_CostControlReports_Amounts", "[BudgetedCost] >= 0 AND [ActualCost] >= 0 AND [EstimateAtCompletion] >= 0 AND [EstimateToComplete] >= 0");

                            t.HasCheckConstraint("CK_CostControlReports_ImportedMaterials", "[ImportedMaterialsPercentage] IS NULL OR ([ImportedMaterialsPercentage] >= 0 AND [ImportedMaterialsPercentage] <= 100)");

                            t.HasCheckConstraint("CK_CostControlReports_Indices", "[CostPerformanceIndex] >= 0 AND [SchedulePerformanceIndex] >= 0");

                            t.HasCheckConstraint("CK_CostControlReports_Progress", "[PhysicalProgressPercentage] >= 0 AND [PhysicalProgressPercentage] <= 100");

                            t.HasCheckConstraint("CK_CostControlReports_TCPI", "[ToCompletePerformanceIndex] IS NULL OR [ToCompletePerformanceIndex] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cost.Core.CostControlReportItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ActualCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BudgetedCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CostCategory")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CostControlReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CostPerformanceIndex")
                        .HasPrecision(5, 3)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostVariance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("EarnedValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EstimateAtCompletion")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsCritical")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PhysicalProgressPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ResponsiblePerson")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("ScheduleVariance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VarianceExplanation")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid?>("WBSElementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CostControlReportId");

                    b.HasIndex("SequenceNumber");

                    b.HasIndex("WBSElementId");

                    b.HasIndex("WorkPackageId");

                    b.HasIndex("CostControlReportId", "SequenceNumber");

                    b.ToTable("CostControlReportItems", "Cost", t =>
                        {
                            t.HasCheckConstraint("CK_CostControlReportItems_Amounts", "[BudgetedCost] >= 0 AND [ActualCost] >= 0 AND [EstimateAtCompletion] >= 0");

                            t.HasCheckConstraint("CK_CostControlReportItems_CPI", "[CostPerformanceIndex] >= 0");

                            t.HasCheckConstraint("CK_CostControlReportItems_OneLink", "([WBSElementId] IS NULL AND [WorkPackageId] IS NOT NULL) OR ([WBSElementId] IS NOT NULL AND [WorkPackageId] IS NULL) OR ([WBSElementId] IS NULL AND [WorkPackageId] IS NULL)");

                            t.HasCheckConstraint("CK_CostControlReportItems_Progress", "[PhysicalProgressPercentage] >= 0 AND [PhysicalProgressPercentage] <= 100");

                            t.HasCheckConstraint("CK_CostControlReportItems_SequenceNumber", "[SequenceNumber] > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cost.Core.ExchangeRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CurrencyFrom")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CurrencyTo")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOfficial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Rate")
                        .HasPrecision(12, 6)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("UFValue")
                        .HasPrecision(12, 6)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyFrom");

                    b.HasIndex("CurrencyTo");

                    b.HasIndex("Date");

                    b.HasIndex("IsOfficial");

                    b.HasIndex("ProjectId");

                    b.HasIndex("CurrencyFrom", "CurrencyTo", "Date");

                    b.HasIndex("ProjectId", "CurrencyFrom", "CurrencyTo", "Date");

                    b.ToTable("ExchangeRates", "Cost", t =>
                        {
                            t.HasCheckConstraint("CK_ExchangeRates_Currencies", "[CurrencyFrom] != [CurrencyTo]");

                            t.HasCheckConstraint("CK_ExchangeRates_Rate", "[Rate] > 0");

                            t.HasCheckConstraint("CK_ExchangeRates_UFValue", "[UFValue] IS NULL OR [UFValue] > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cost.Core.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovalNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BankReference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CommitmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContractorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("GrossAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("HasBackup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("InvoiceSequence")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsTaxExempt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("NetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaidAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentReference")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("PeriodEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("RetentionAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReviewedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("SubmittedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SupportingDocuments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("TaxRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("VariationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VendorInvoiceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CommitmentId");

                    b.HasIndex("ContractorId");

                    b.HasIndex("DueDate");

                    b.HasIndex("InvoiceDate");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique();

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.HasIndex("VariationId");

                    b.HasIndex("CommitmentId", "InvoiceDate");

                    b.ToTable("Invoices", "Cost", t =>
                        {
                            t.HasCheckConstraint("CK_Invoices_Amounts", "[GrossAmount] >= 0 AND [TotalAmount] >= 0 AND [NetAmount] >= 0 AND [PaidAmount] >= 0");

                            t.HasCheckConstraint("CK_Invoices_Dates", "[DueDate] >= [InvoiceDate] AND [PeriodEndDate] >= [PeriodStartDate]");

                            t.HasCheckConstraint("CK_Invoices_TaxRate", "[TaxRate] IS NULL OR ([TaxRate] >= 0 AND [TaxRate] <= 100)");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cost.Core.InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("BudgetItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CommitmentItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CompletionPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CostAccount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal?>("CumulativeQuantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DeliveryTicket")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("DiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ItemNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("NetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PreviousQuantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ServiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnitOfMeasure")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("WorkOrderNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BudgetItemId");

                    b.HasIndex("CommitmentItemId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ItemCode");

                    b.HasIndex("InvoiceId", "ItemNumber")
                        .IsUnique();

                    b.ToTable("InvoiceItems", "Cost", t =>
                        {
                            t.HasCheckConstraint("CK_InvoiceItems_Amounts", "[Amount] >= 0 AND [NetAmount] >= 0");

                            t.HasCheckConstraint("CK_InvoiceItems_DiscountAmount", "[DiscountAmount] IS NULL OR [DiscountAmount] >= 0");

                            t.HasCheckConstraint("CK_InvoiceItems_Progress", "([PreviousQuantity] IS NULL OR [PreviousQuantity] >= 0) AND ([CumulativeQuantity] IS NULL OR [CumulativeQuantity] >= 0) AND ([CompletionPercentage] IS NULL OR ([CompletionPercentage] >= 0 AND [CompletionPercentage] <= 100))");

                            t.HasCheckConstraint("CK_InvoiceItems_Quantity", "[Quantity] >= 0");

                            t.HasCheckConstraint("CK_InvoiceItems_UnitPrice", "[UnitPrice] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cost.Core.TimePhasedBudget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BaselineDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ControlAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("CumulativePlannedValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsBaseline")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("PeriodType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PlannedEquipmentCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PlannedLaborCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PlannedLaborHours")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PlannedMaterialCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PlannedOtherCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PlannedSubcontractCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PlannedValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RevisionNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ControlAccountId");

                    b.HasIndex("PeriodEnd");

                    b.HasIndex("PeriodStart");

                    b.HasIndex("PeriodType");

                    b.HasIndex("ControlAccountId", "PeriodStart");

                    b.ToTable("TimePhasedBudgets", "Cost", t =>
                        {
                            t.HasCheckConstraint("CK_TimePhasedBudgets_CumulativePlannedValue", "[CumulativePlannedValue] >= 0");

                            t.HasCheckConstraint("CK_TimePhasedBudgets_Period", "[PeriodEnd] >= [PeriodStart]");

                            t.HasCheckConstraint("CK_TimePhasedBudgets_PlannedCosts", "[PlannedLaborCost] >= 0 AND [PlannedMaterialCost] >= 0 AND [PlannedEquipmentCost] >= 0 AND [PlannedSubcontractCost] >= 0 AND [PlannedOtherCost] >= 0");

                            t.HasCheckConstraint("CK_TimePhasedBudgets_PlannedLaborHours", "[PlannedLaborHours] >= 0");

                            t.HasCheckConstraint("CK_TimePhasedBudgets_PlannedValue", "[PlannedValue] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cost.Core.WBSCBSMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AllocationBasis")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("AllocationPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CBSId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("WBSElementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AllocationPercentage");

                    b.HasIndex("CBSId");

                    b.HasIndex("WBSElementId");

                    b.HasIndex("WBSElementId", "CBSId")
                        .IsUnique();

                    b.ToTable("WBSCBSMappings", "Cost", t =>
                        {
                            t.HasCheckConstraint("CK_WBSCBSMappings_AllocationPercentage", "[AllocationPercentage] > 0 AND [AllocationPercentage] <= 100");

                            t.HasCheckConstraint("CK_WBSCBSMappings_EndDate", "[EndDate] IS NULL OR [EndDate] >= [EffectiveDate]");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cost.EVM.EVMRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AC")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ActualPercentComplete")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("BAC")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Comments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("ControlAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("DataDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EAC")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ETC")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EV")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsBaseline")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("PV")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PeriodNumber")
                        .HasColumnType("int");

                    b.Property<int>("PeriodType")
                        .HasColumnType("int");

                    b.Property<decimal?>("PlannedPercentComplete")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ControlAccountId");

                    b.HasIndex("DataDate");

                    b.HasIndex("IsApproved");

                    b.HasIndex("IsBaseline");

                    b.HasIndex("PeriodType");

                    b.HasIndex("Status");

                    b.HasIndex("Year");

                    b.HasIndex("ControlAccountId", "DataDate")
                        .IsUnique();

                    b.HasIndex("ControlAccountId", "IsBaseline");

                    b.HasIndex("ControlAccountId", "Year", "PeriodNumber");

                    b.ToTable("EVMRecords", "Cost", t =>
                        {
                            t.HasCheckConstraint("CK_EVMRecords_Percentages", "([PlannedPercentComplete] IS NULL OR ([PlannedPercentComplete] >= 0 AND [PlannedPercentComplete] <= 100)) AND ([ActualPercentComplete] IS NULL OR ([ActualPercentComplete] >= 0 AND [ActualPercentComplete] <= 100))");

                            t.HasCheckConstraint("CK_EVMRecords_PeriodNumber", "[PeriodNumber] > 0");

                            t.HasCheckConstraint("CK_EVMRecords_Values", "[PV] >= 0 AND [EV] >= 0 AND [AC] >= 0 AND [BAC] >= 0 AND [EAC] >= 0 AND [ETC] >= 0");

                            t.HasCheckConstraint("CK_EVMRecords_Year", "[Year] >= 2000 AND [Year] <= 2100");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Documents.Core.CommentAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlobContainerName")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("nvarchar(63)");

                    b.Property<string>("BlobName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("BlobStorageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BlobName");

                    b.HasIndex("CommentId");

                    b.HasIndex("UploadedDate");

                    b.ToTable("CommentAttachments", "Documents", t =>
                        {
                            t.HasCheckConstraint("CK_CommentAttachments_FileSize", "[FileSize] > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Documents.Core.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("ClientDocumentNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Confidentiality")
                        .HasColumnType("int");

                    b.Property<string>("ContractorDocumentNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("CurrentRevisionNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("CurrentVersion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("A");

                    b.Property<Guid?>("CurrentVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid?>("DisciplineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DownloadCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Keywords")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("LastDownloadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastViewDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LockedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LockedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Originator")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RetentionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RetentionPolicy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ReviewComments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ReviewCompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReviewDueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReviewedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TagsJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Category");

                    b.HasIndex("CurrentVersionId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("DocumentNumber")
                        .IsUnique();

                    b.HasIndex("IsDeleted");

                    b.HasIndex("LockedById");

                    b.HasIndex("PackageId");

                    b.HasIndex("PhaseId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ReviewDueDate");

                    b.HasIndex("ReviewStatus");

                    b.HasIndex("ReviewedById");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.HasIndex("ProjectId", "Status");

                    b.HasIndex("Type", "Status");

                    b.ToTable("Documents", "Documents", t =>
                        {
                            t.HasCheckConstraint("CK_Documents_Statistics", "[DownloadCount] >= 0 AND [ViewCount] >= 0");

                            t.HasCheckConstraint("CK_Documents_Version", "[CurrentRevisionNumber] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Documents.Core.DocumentComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocumentVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsResolved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("PageNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reference")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Resolution")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid?>("ResolvedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ResolvedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Section")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Severity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CommentDate");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DocumentVersionId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("IsResolved");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("ResolvedById");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.HasIndex("AuthorId", "CommentDate");

                    b.HasIndex("DocumentId", "Status");

                    b.ToTable("DocumentComments", "Documents", t =>
                        {
                            t.HasCheckConstraint("CK_DocumentComments_PageNumber", "[PageNumber] IS NULL OR [PageNumber] > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Documents.Core.DocumentDistribution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("AcknowledgedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("AcknowledgedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AcknowledgmentComments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DistributedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DistributionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DownloadCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FirstDownloadedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAcknowledged")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDownloaded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastDownloadedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Method")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("Purpose")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<Guid?>("RecipientCompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RecipientEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RecipientRole")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid?>("RecipientUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RequiresAcknowledgment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("TransmittalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DistributedById");

                    b.HasIndex("DistributionDate");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DocumentVersionId");

                    b.HasIndex("ExpiryDate");

                    b.HasIndex("IsAcknowledged");

                    b.HasIndex("IsDownloaded");

                    b.HasIndex("Method");

                    b.HasIndex("Purpose");

                    b.HasIndex("RecipientCompanyId");

                    b.HasIndex("RecipientUserId");

                    b.HasIndex("RequiresAcknowledgment");

                    b.HasIndex("TransmittalId");

                    b.HasIndex("DocumentId", "Method");

                    b.HasIndex("RecipientUserId", "DistributionDate");

                    b.ToTable("DocumentDistributions", "Documents", t =>
                        {
                            t.HasCheckConstraint("CK_DocumentDistributions_DownloadCount", "[DownloadCount] >= 0");

                            t.HasCheckConstraint("CK_DocumentDistributions_Recipient", "[RecipientUserId] IS NOT NULL OR [RecipientEmail] IS NOT NULL");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Documents.Core.DocumentPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanComment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("CanDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("CanDistribute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("CanDownload")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("CanEdit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("CanManagePermissions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("CanView")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GrantedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("GrantedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("GrantedById");

                    b.HasIndex("GrantedDate");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.HasIndex("ValidFrom");

                    b.HasIndex("ValidTo");

                    b.HasIndex("DocumentId", "RoleId")
                        .IsUnique()
                        .HasFilter("[RoleId] IS NOT NULL");

                    b.HasIndex("DocumentId", "UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("DocumentPermissions", "Documents", t =>
                        {
                            t.HasCheckConstraint("CK_DocumentPermissions_UserOrRole", "[UserId] IS NOT NULL OR [RoleId] IS NOT NULL");

                            t.HasCheckConstraint("CK_DocumentPermissions_ValidPeriod", "[ValidFrom] IS NULL OR [ValidTo] IS NULL OR [ValidTo] > [ValidFrom]");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Documents.Core.DocumentRelationship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EstablishedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EstablishedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RelatedDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RelationshipType")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("EstablishedById");

                    b.HasIndex("EstablishedDate");

                    b.HasIndex("RelatedDocumentId");

                    b.HasIndex("RelationshipType");

                    b.HasIndex("DocumentId", "RelatedDocumentId", "RelationshipType")
                        .IsUnique()
                        .HasDatabaseName("IX_DocumentRelationships_Unique");

                    b.ToTable("DocumentRelationships", "Documents", t =>
                        {
                            t.HasCheckConstraint("CK_DocumentRelationships_NotSelfReferencing", "[DocumentId] <> [RelatedDocumentId]");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Documents.Core.DocumentVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlobContainerName")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("nvarchar(63)");

                    b.Property<string>("BlobName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("BlobStorageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime?>("BlobUploadedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DownloadCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FileHash")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsCurrent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuperseded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssuePurpose")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("LastDownloadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewComments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReviewedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RevisionNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("SupersededById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UploadedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VersionComments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("BlobName");

                    b.HasIndex("DocumentId");

                    b.HasIndex("IsCurrent");

                    b.HasIndex("IsSuperseded");

                    b.HasIndex("IssueDate");

                    b.HasIndex("ReviewStatus");

                    b.HasIndex("ReviewedById");

                    b.HasIndex("SupersededById");

                    b.HasIndex("UploadedById");

                    b.HasIndex("DocumentId", "Version", "RevisionNumber")
                        .IsUnique();

                    b.ToTable("DocumentVersions", "Documents", t =>
                        {
                            t.HasCheckConstraint("CK_DocumentVersions_DownloadCount", "[DownloadCount] >= 0");

                            t.HasCheckConstraint("CK_DocumentVersions_FileSize", "[FileSize] > 0");

                            t.HasCheckConstraint("CK_DocumentVersions_RevisionNumber", "[RevisionNumber] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Documents.Transmittals.Transmittal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovalComments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("ApprovedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("DeliveryConfirmedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DeliveryConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryMethod")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("FromCompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FromContact")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FromEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FromPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDelivered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("PreparedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PreparedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Purpose")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("RequiresApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ResponseDueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResponseRequired")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("SentById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("ToCompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToContact")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ToEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ToPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("TransmittalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransmittalNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("FromCompanyId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PreparedById");

                    b.HasIndex("Priority");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SentById");

                    b.HasIndex("Status");

                    b.HasIndex("ToCompanyId");

                    b.HasIndex("TransmittalDate");

                    b.HasIndex("TransmittalNumber")
                        .IsUnique();

                    b.HasIndex("FromCompanyId", "TransmittalDate");

                    b.HasIndex("ProjectId", "Status");

                    b.ToTable("Transmittals", "Documents", t =>
                        {
                            t.HasCheckConstraint("CK_Transmittals_ResponseDue", "[ResponseDueDate] IS NULL OR [ResponseDueDate] > [TransmittalDate]");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Documents.Transmittals.TransmittalAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlobContainerName")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("nvarchar(63)");

                    b.Property<string>("BlobName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("BlobStorageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TransmittalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UploadedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BlobName");

                    b.HasIndex("TransmittalId");

                    b.HasIndex("UploadedById");

                    b.HasIndex("UploadedDate");

                    b.ToTable("TransmittalAttachments", "Documents", t =>
                        {
                            t.HasCheckConstraint("CK_TransmittalAttachments_FileSize", "[FileSize] > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Documents.Transmittals.TransmittalDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Copies")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Format")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsIncluded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Purpose")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("TransmittalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DocumentVersionId");

                    b.HasIndex("IsIncluded");

                    b.HasIndex("SortOrder");

                    b.HasIndex("TransmittalId");

                    b.HasIndex("TransmittalId", "DocumentId", "DocumentVersionId")
                        .IsUnique();

                    b.ToTable("TransmittalDocuments", "Documents", t =>
                        {
                            t.HasCheckConstraint("CK_TransmittalDocuments_Copies", "[Copies] > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Documents.Transmittals.TransmittalRecipient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AcknowledgedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AcknowledgmentComments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("AcknowledgmentToken")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryError")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DeliveryStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsAcknowledged")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDelivered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("RequiresAcknowledgment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Role")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("TransmittalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email");

                    b.HasIndex("IsAcknowledged");

                    b.HasIndex("IsDelivered");

                    b.HasIndex("RequiresAcknowledgment");

                    b.HasIndex("TransmittalId");

                    b.HasIndex("Type");

                    b.HasIndex("UserId");

                    b.HasIndex("TransmittalId", "Type");

                    b.ToTable("TransmittalRecipients", "Documents", t =>
                        {
                            t.HasCheckConstraint("CK_TransmittalRecipients_Recipient", "[UserId] IS NOT NULL OR [Email] IS NOT NULL OR [Name] IS NOT NULL");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("USD");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FiscalYearStart")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LogoContentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IsDeleted");

                    b.HasIndex("TaxId")
                        .IsUnique();

                    b.ToTable("Companies", "Organization");
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.Contractor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BankAccount")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankRoutingNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Certifications")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Classification")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("CreditLimit")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("DefaultCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("USD");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("HasInsurance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal?>("InsuranceAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InsuranceCompany")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("InsuranceExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsurancePolicyNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrequalified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PaymentTerms")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("PerformanceRating")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("PrequalificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PrequalificationNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SpecialtyAreas")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TradeName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Website")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Classification");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("IsPrequalified");

                    b.HasIndex("Name");

                    b.HasIndex("Status");

                    b.HasIndex("TaxId")
                        .IsUnique();

                    b.HasIndex("Type");

                    b.ToTable("Contractors", "Organization", t =>
                        {
                            t.HasCheckConstraint("CK_Contractors_CreditLimit", "[CreditLimit] >= 0");

                            t.HasCheckConstraint("CK_Contractors_InsuranceAmount", "[InsuranceAmount] >= 0 OR [InsuranceAmount] IS NULL");

                            t.HasCheckConstraint("CK_Contractors_PerformanceRating", "[PerformanceRating] >= 0 AND [PerformanceRating] <= 5 OR [PerformanceRating] IS NULL");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("DecimalDigits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<string>("DecimalSeparator")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasDefaultValue(".");

                    b.Property<decimal>("ExchangeRate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(1m);

                    b.Property<DateTime?>("ExchangeRateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExchangeRateSource")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsBaseCurrency")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabledForCommitments")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsEnabledForProjects")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NegativePattern")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("NumericCode")
                        .HasColumnType("int");

                    b.Property<string>("PluralName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PositivePattern")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("Rounding")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SymbolNative")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ThousandsSeparator")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasDefaultValue(",");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("IsBaseCurrency");

                    b.HasIndex("NumericCode")
                        .IsUnique();

                    b.HasIndex("IsEnabledForCommitments", "IsActive");

                    b.HasIndex("IsEnabledForProjects", "IsActive");

                    b.ToTable("Currencies", "Organization", t =>
                        {
                            t.HasCheckConstraint("CK_Currencies_DecimalDigits", "[DecimalDigits] >= 0 AND [DecimalDigits] <= 4");

                            t.HasCheckConstraint("CK_Currencies_ExchangeRate", "[ExchangeRate] > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.Discipline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ColorHex")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEngineering")
                        .HasColumnType("bit");

                    b.Property<bool>("IsManagement")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Name");

                    b.ToTable("Disciplines", "Organization");
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.OBSNode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AvailableFTE")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CostCenter")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("HierarchyPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NodeType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Department");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("TotalFTE")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("HierarchyPath");

                    b.HasIndex("IsActive");

                    b.HasIndex("ManagerId");

                    b.HasIndex("NodeType");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectId", "Code")
                        .IsUnique()
                        .HasFilter("[ProjectId] IS NOT NULL");

                    b.HasIndex("ProjectId", "IsActive");

                    b.ToTable("OBSNodes", "Organization", t =>
                        {
                            t.HasCheckConstraint("CK_OBSNodes_AvailableFTE", "[AvailableFTE] IS NULL OR ([AvailableFTE] >= 0 AND ([TotalFTE] IS NULL OR [AvailableFTE] <= [TotalFTE]))");

                            t.HasCheckConstraint("CK_OBSNodes_FTE", "[TotalFTE] IS NULL OR [TotalFTE] >= 0");

                            t.HasCheckConstraint("CK_OBSNodes_NodeType", "[NodeType] IN ('Company', 'Division', 'Department', 'Team', 'Role')");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.Operation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CostCenter")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ManagerEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ManagerName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("CompanyId", "Code")
                        .IsUnique();

                    b.ToTable("Operations", "Organization");
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContractNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContractType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("ContractValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ContractorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("USD");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("PackageType")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<Guid?>("PhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PlannedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PlannedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ProgressPercentage")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("WBSCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("WBSElementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ContractorId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PackageType");

                    b.HasIndex("PhaseId");

                    b.HasIndex("PlannedEndDate");

                    b.HasIndex("PlannedStartDate");

                    b.HasIndex("ProgressPercentage");

                    b.HasIndex("WBSCode");

                    b.HasIndex("WBSElementId");

                    b.ToTable("Packages", "Organization", t =>
                        {
                            t.HasCheckConstraint("CK_Packages_ActualDates", "([ActualStartDate] IS NULL AND [ActualEndDate] IS NULL) OR ([ActualStartDate] IS NOT NULL AND ([ActualEndDate] IS NULL OR [ActualEndDate] >= [ActualStartDate]))");

                            t.HasCheckConstraint("CK_Packages_Assignment", "([PhaseId] IS NULL AND [WBSElementId] IS NOT NULL) OR ([PhaseId] IS NOT NULL AND [WBSElementId] IS NULL) OR ([PhaseId] IS NULL AND [WBSElementId] IS NULL)");

                            t.HasCheckConstraint("CK_Packages_ContractValue", "[ContractValue] >= 0");

                            t.HasCheckConstraint("CK_Packages_PlannedDates", "[PlannedEndDate] >= [PlannedStartDate]");

                            t.HasCheckConstraint("CK_Packages_ProgressPercentage", "[ProgressPercentage] >= 0 AND [ProgressPercentage] <= 100");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.PackageDiscipline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ActualCost")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("ActualHours")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("USD");

                    b.Property<Guid>("DisciplineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("EstimatedCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EstimatedHours")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsLeadDiscipline")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastProgressUpdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LeadEngineerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ProgressPercentage")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("IsLeadDiscipline");

                    b.HasIndex("LeadEngineerId");

                    b.HasIndex("PackageId");

                    b.HasIndex("PackageId", "DisciplineId")
                        .IsUnique();

                    b.ToTable("PackageDisciplines", "Organization", t =>
                        {
                            t.HasCheckConstraint("CK_PackageDisciplines_ActualCost", "[ActualCost] >= 0");

                            t.HasCheckConstraint("CK_PackageDisciplines_ActualHours", "[ActualHours] >= 0");

                            t.HasCheckConstraint("CK_PackageDisciplines_EstimatedCost", "[EstimatedCost] >= 0");

                            t.HasCheckConstraint("CK_PackageDisciplines_EstimatedHours", "[EstimatedHours] >= 0");

                            t.HasCheckConstraint("CK_PackageDisciplines_ProgressPercentage", "[ProgressPercentage] >= 0 AND [ProgressPercentage] <= 100");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.Phase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ActualCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ApprovedBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("BaselineEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BaselineStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("CommittedCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("GateApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GateApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("KeyDeliverables")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("PhaseType")
                        .HasColumnType("int");

                    b.Property<decimal>("PlannedBudget")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PlannedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PlannedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ProgressPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RequiresGateApproval")
                        .HasColumnType("bit");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("WeightFactor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PhaseType");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectId", "Code")
                        .IsUnique();

                    b.HasIndex("IsActive", "PlannedStartDate", "PlannedEndDate");

                    b.ToTable("Phases", "Organization", t =>
                        {
                            t.HasCheckConstraint("CK_Phases_ActualDates", "[ActualEndDate] IS NULL OR [ActualStartDate] IS NULL OR [ActualEndDate] >= [ActualStartDate]");

                            t.HasCheckConstraint("CK_Phases_PlannedBudget", "[PlannedBudget] IS NULL OR [PlannedBudget] >= 0");

                            t.HasCheckConstraint("CK_Phases_PlannedDates", "[PlannedEndDate] > [PlannedStartDate]");

                            t.HasCheckConstraint("CK_Phases_ProgressPercentage", "[ProgressPercentage] >= 0 AND [ProgressPercentage] <= 100");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("ActualCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ApprovedBudget")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Assumptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BaselineDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BusinessCase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChangeOrderCount")
                        .HasColumnType("int");

                    b.Property<string>("Client")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("CommittedCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Constraints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ContingencyBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ContractNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CostCenter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("USD");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Deliverables")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("EarnedValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastProgressUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastProgressUpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Objectives")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PlannedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PlannedProgress")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PlannedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ProgressPercentage")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("ProjectCharter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectManagerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProjectTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scope")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SuccessCriteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalBudget")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("WBSCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OperationId");

                    b.HasIndex("ProjectManagerId");

                    b.HasIndex("ProjectTypeId");

                    b.HasIndex("Status");

                    b.HasIndex("OperationId", "Code")
                        .IsUnique();

                    b.HasIndex("IsActive", "PlannedStartDate", "PlannedEndDate");

                    b.ToTable("Projects", "Organization", t =>
                        {
                            t.HasCheckConstraint("CK_Projects_ActualDates", "[ActualEndDate] IS NULL OR [ActualStartDate] IS NULL OR [ActualEndDate] >= [ActualStartDate]");

                            t.HasCheckConstraint("CK_Projects_ApprovedBudget", "[ApprovedBudget] IS NULL OR [ApprovedBudget] >= 0");

                            t.HasCheckConstraint("CK_Projects_PlannedDates", "[PlannedEndDate] > [PlannedStartDate]");

                            t.HasCheckConstraint("CK_Projects_ProgressPercentage", "[ProgressPercentage] >= 0 AND [ProgressPercentage] <= 100");

                            t.HasCheckConstraint("CK_Projects_TotalBudget", "[TotalBudget] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.RAM", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AllocatedHours")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AllocatedPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ControlAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("OBSNodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResponsibilityType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WBSElementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ControlAccountId");

                    b.HasIndex("OBSNodeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ResponsibilityType");

                    b.HasIndex("WBSElementId");

                    b.HasIndex("ProjectId", "WBSElementId", "OBSNodeId", "ResponsibilityType")
                        .IsUnique();

                    b.ToTable("RAMAssignments", "Organization");
                });

            modelBuilder.Entity("Domain.Entities.Projects.Progress.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActivityCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ActualHours")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("DurationDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("PlannedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PlannedHours")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("PlannedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PredecessorActivities")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal>("ProgressPercentage")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("ResourceRate")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ScheduleVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SuccessorActivities")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("WBSElementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkPackageDetailsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivityCode")
                        .IsUnique();

                    b.HasIndex("PlannedEndDate");

                    b.HasIndex("PlannedStartDate");

                    b.HasIndex("ScheduleVersionId");

                    b.HasIndex("Status");

                    b.HasIndex("WBSElementId");

                    b.HasIndex("WorkPackageDetailsId");

                    b.HasIndex("Status", "PlannedStartDate");

                    b.HasIndex("WBSElementId", "ActivityCode")
                        .IsUnique();

                    b.HasIndex("WBSElementId", "Status");

                    b.ToTable("Activities", "Projects", t =>
                        {
                            t.HasCheckConstraint("CK_Activities_Dates", "[PlannedEndDate] > [PlannedStartDate]");

                            t.HasCheckConstraint("CK_Activities_DurationDays", "[DurationDays] > 0");

                            t.HasCheckConstraint("CK_Activities_Hours", "[PlannedHours] >= 0 AND [ActualHours] >= 0");

                            t.HasCheckConstraint("CK_Activities_Progress", "[ProgressPercentage] >= 0 AND [ProgressPercentage] <= 100");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Projects.Progress.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ContractorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("USD");

                    b.Property<string>("CurrentLocation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("CurrentProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("DailyRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EquipmentCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("HourlyRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsOwned")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("MaintenanceHours")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("NextMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PurchaseValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("YearOfManufacture")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("ContractorId");

                    b.HasIndex("CurrentProjectId");

                    b.HasIndex("EquipmentCode")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("IsAvailable");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("IsActive", "IsAvailable");

                    b.ToTable("Equipment", "Projects", t =>
                        {
                            t.HasCheckConstraint("CK_Equipment_DailyRate", "[DailyRate] IS NULL OR [DailyRate] >= 0");

                            t.HasCheckConstraint("CK_Equipment_HourlyRate", "[HourlyRate] IS NULL OR [HourlyRate] >= 0");

                            t.HasCheckConstraint("CK_Equipment_MaintenanceHours", "[MaintenanceHours] IS NULL OR [MaintenanceHours] >= 0");

                            t.HasCheckConstraint("CK_Equipment_PurchaseValue", "[PurchaseValue] IS NULL OR [PurchaseValue] >= 0");

                            t.HasCheckConstraint("CK_Equipment_YearOfManufacture", "[YearOfManufacture] IS NULL OR ([YearOfManufacture] >= 1900 AND [YearOfManufacture] <= 2100)");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Projects.Progress.Milestone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcceptanceCriteria")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("ActualDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CompletionCriteria")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal>("CompletionPercentage")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Deliverables")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("ForecastDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsContractual")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsCritical")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPaymentTriggered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MilestoneCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal?>("PaymentAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PaymentCurrency")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<Guid?>("PhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PlannedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PredecessorMilestones")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RequiresApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SuccessorMilestones")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("WorkPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsCompleted");

                    b.HasIndex("IsContractual");

                    b.HasIndex("IsCritical");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("MilestoneCode")
                        .IsUnique();

                    b.HasIndex("PhaseId");

                    b.HasIndex("PlannedDate");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Type");

                    b.HasIndex("WorkPackageId");

                    b.HasIndex("ProjectId", "MilestoneCode")
                        .IsUnique();

                    b.HasIndex("ProjectId", "PlannedDate");

                    b.HasIndex("ProjectId", "Type");

                    b.ToTable("Milestones", "Projects", t =>
                        {
                            t.HasCheckConstraint("CK_Milestones_CompletionPercentage", "[CompletionPercentage] >= 0 AND [CompletionPercentage] <= 100");

                            t.HasCheckConstraint("CK_Milestones_PaymentAmount", "[PaymentAmount] IS NULL OR [PaymentAmount] > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Projects.Progress.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ActualHours")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("ActualQuantity")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid?>("ContractorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("USD");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsOverAllocated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("PlannedHours")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("PlannedQuantity")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("ResourceCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UnitOfMeasure")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("UnitRate")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ContractorId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("IsOverAllocated");

                    b.HasIndex("ResourceCode")
                        .IsUnique();

                    b.HasIndex("Type");

                    b.HasIndex("UserId");

                    b.HasIndex("ActivityId", "Type");

                    b.HasIndex("UserId", "IsActive");

                    b.ToTable("Resources", "Projects", t =>
                        {
                            t.HasCheckConstraint("CK_Resources_ActualHours", "[ActualHours] >= 0");

                            t.HasCheckConstraint("CK_Resources_ActualQuantity", "[ActualQuantity] >= 0");

                            t.HasCheckConstraint("CK_Resources_Dates", "[EndDate] IS NULL OR [StartDate] IS NULL OR [EndDate] >= [StartDate]");

                            t.HasCheckConstraint("CK_Resources_PlannedHours", "[PlannedHours] >= 0");

                            t.HasCheckConstraint("CK_Resources_PlannedQuantity", "[PlannedQuantity] >= 0");

                            t.HasCheckConstraint("CK_Resources_UnitRate", "[UnitRate] IS NULL OR [UnitRate] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Projects.Progress.ScheduleVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovalComments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("BaselineDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("CriticalActivities")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("DataDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ImportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImportedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsBaseline")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("PlannedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PlannedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SourceSystem")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SubmittedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalActivities")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("TotalFloat")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DataDate");

                    b.HasIndex("IsBaseline");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Status");

                    b.HasIndex("Version");

                    b.HasIndex("ProjectId", "IsBaseline");

                    b.HasIndex("ProjectId", "Version")
                        .IsUnique();

                    b.ToTable("ScheduleVersions", "Projects", t =>
                        {
                            t.HasCheckConstraint("CK_ScheduleVersions_CriticalActivities", "[CriticalActivities] >= 0 AND [CriticalActivities] <= [TotalActivities]");

                            t.HasCheckConstraint("CK_ScheduleVersions_Dates", "[PlannedEndDate] >= [PlannedStartDate]");

                            t.HasCheckConstraint("CK_ScheduleVersions_TotalActivities", "[TotalActivities] >= 0");

                            t.HasCheckConstraint("CK_ScheduleVersions_TotalFloat", "[TotalFloat] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Projects.Progress.WBSElementProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovalComments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("ChildrenCount")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal>("CommittedCost")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int?>("CompletedChildrenCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("CurrentActualCost")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("CurrentProgress")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DaysDelayed")
                        .HasColumnType("int");

                    b.Property<string>("DelayReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DocumentReferences")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("JSON array of document IDs");

                    b.Property<decimal?>("EarnedValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("EquipmentHoursUsed")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ForecastEndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ForecastToComplete")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRollupProgress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Issues")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal?>("LaborHoursUsed")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MaterialQuantityUsed")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MeasurementMethod")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("MilestoneReferences")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("JSON array of milestone codes achieved");

                    b.Property<string>("MitigationActions")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("PhotoReferences")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("JSON array of photo IDs");

                    b.Property<decimal?>("PhysicalProgress")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhysicalProgressDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("PlannedValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PreviousActualCost")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("PreviousProgress")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ProgressDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReportedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("RequiresReview")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ResourceNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ReviewReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Risks")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("WBSElementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsApproved");

                    b.HasIndex("Month");

                    b.HasIndex("ProgressDate");

                    b.HasIndex("ReportedBy");

                    b.HasIndex("RequiresReview");

                    b.HasIndex("WBSElementId");

                    b.HasIndex("Week");

                    b.HasIndex("Year");

                    b.HasIndex("WBSElementId", "ProgressDate");

                    b.HasIndex("WBSElementId", "Year", "Month");

                    b.ToTable("WBSElementProgress", "Projects", t =>
                        {
                            t.HasCheckConstraint("CK_WBSElementProgress_Children", "([CompletedChildrenCount] IS NULL OR [ChildrenCount] IS NULL OR [CompletedChildrenCount] <= [ChildrenCount])");

                            t.HasCheckConstraint("CK_WBSElementProgress_Costs", "[PreviousActualCost] >= 0 AND [CurrentActualCost] >= 0 AND [CommittedCost] >= 0 AND [ForecastToComplete] >= 0");

                            t.HasCheckConstraint("CK_WBSElementProgress_EVM", "([EarnedValue] IS NULL OR [EarnedValue] >= 0) AND ([PlannedValue] IS NULL OR [PlannedValue] >= 0)");

                            t.HasCheckConstraint("CK_WBSElementProgress_PhysicalProgress", "[PhysicalProgress] IS NULL OR ([PhysicalProgress] >= 0 AND [PhysicalProgress] <= 100)");

                            t.HasCheckConstraint("CK_WBSElementProgress_Progress", "[CurrentProgress] >= 0 AND [CurrentProgress] <= 100 AND [PreviousProgress] >= 0 AND [PreviousProgress] <= 100");

                            t.HasCheckConstraint("CK_WBSElementProgress_Resources", "([LaborHoursUsed] IS NULL OR [LaborHoursUsed] >= 0) AND ([EquipmentHoursUsed] IS NULL OR [EquipmentHoursUsed] >= 0) AND ([MaterialQuantityUsed] IS NULL OR [MaterialQuantityUsed] >= 0)");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Projects.Progress.WorkPackageProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Comments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal>("CommittedCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("CurrentActualCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CurrentProgress")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DaysDelayed")
                        .HasColumnType("int");

                    b.Property<string>("DocumentReferences")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("JSON array of document IDs");

                    b.Property<decimal?>("EarnedValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ForecastCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Issues")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("MeasurementMethod")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("PhotoReferences")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("JSON array of photo IDs");

                    b.Property<decimal?>("PlannedValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PreviousActualCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PreviousProgress")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ProgressDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProgressPeriod")
                        .HasColumnType("int");

                    b.Property<string>("Risks")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("WorkPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsApproved");

                    b.HasIndex("ProgressDate");

                    b.HasIndex("ProgressPeriod");

                    b.HasIndex("WorkPackageId");

                    b.HasIndex("Year");

                    b.HasIndex("WorkPackageId", "ProgressDate");

                    b.HasIndex("WorkPackageId", "Year", "ProgressPeriod");

                    b.ToTable("WorkPackageProgress", "Projects", t =>
                        {
                            t.HasCheckConstraint("CK_WorkPackageProgress_Costs", "[PreviousActualCost] >= 0 AND [CurrentActualCost] >= 0 AND [CommittedCost] >= 0 AND [ForecastCost] >= 0");

                            t.HasCheckConstraint("CK_WorkPackageProgress_DaysDelayed", "[DaysDelayed] IS NULL OR [DaysDelayed] >= 0");

                            t.HasCheckConstraint("CK_WorkPackageProgress_EVM", "([EarnedValue] IS NULL OR [EarnedValue] >= 0) AND ([PlannedValue] IS NULL OR [PlannedValue] >= 0)");

                            t.HasCheckConstraint("CK_WorkPackageProgress_Progress", "[CurrentProgress] >= 0 AND [CurrentProgress] <= 100 AND [PreviousProgress] >= 0 AND [PreviousProgress] <= 100 AND [CurrentProgress] >= [PreviousProgress]");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Projects.WBS.PlanningPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ControlAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ConversionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConversionNotes")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ConvertedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal>("EstimatedBudget")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EstimatedHours")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsConverted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("PhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PlannedConversionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PlannedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PlannedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(99);

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ControlAccountId");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsConverted");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PhaseId");

                    b.HasIndex("PlannedConversionDate");

                    b.HasIndex("Priority");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Status");

                    b.HasIndex("ControlAccountId", "IsConverted");

                    b.HasIndex("ProjectId", "Code")
                        .IsUnique();

                    b.HasIndex("Status", "PlannedConversionDate");

                    b.ToTable("PlanningPackages", "Projects", t =>
                        {
                            t.HasCheckConstraint("CK_PlanningPackages_ConversionDate", "[PlannedConversionDate] <= [PlannedStartDate]");

                            t.HasCheckConstraint("CK_PlanningPackages_Dates", "[PlannedEndDate] > [PlannedStartDate]");

                            t.HasCheckConstraint("CK_PlanningPackages_EstimatedBudget", "[EstimatedBudget] >= 0");

                            t.HasCheckConstraint("CK_PlanningPackages_EstimatedHours", "[EstimatedHours] >= 0");

                            t.HasCheckConstraint("CK_PlanningPackages_Priority", "[Priority] >= 1 AND [Priority] <= 99");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Projects.WBS.WBSElement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcceptanceCriteria")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Assumptions")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Constraints")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<Guid?>("ControlAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("DeliverableDescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("ElementType")
                        .HasColumnType("int");

                    b.Property<string>("ExclusionsInclusions")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("FullPath")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ControlAccountId");

                    b.HasIndex("ElementType");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Level");

                    b.HasIndex("ParentId");

                    b.HasIndex("PhaseId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectId", "Code")
                        .IsUnique();

                    b.HasIndex("ProjectId", "ElementType");

                    b.HasIndex("ProjectId", "Level");

                    b.ToTable("WBSElements", "Projects", t =>
                        {
                            t.HasCheckConstraint("CK_WBSElements_Level", "[Level] >= 0");

                            t.HasCheckConstraint("CK_WBSElements_SequenceNumber", "[SequenceNumber] > 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Projects.WBS.WorkPackageDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ActualCost")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int?>("ActualDuration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BaselineDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BaselineEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BaselineStartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Budget")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CPI")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CommittedCost")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("USD");

                    b.Property<decimal>("EarnedValue")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("ForecastCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ForecastEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ForecastStartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FreeFloat")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsBaselined")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsCriticalPath")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("PhysicalProgressPercentage")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("PlannedDuration")
                        .HasColumnType("int");

                    b.Property<DateTime>("PlannedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PlannedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PlannedValue")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid?>("PrimaryDisciplineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProgressMethod")
                        .HasColumnType("int");

                    b.Property<decimal>("ProgressPercentage")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int?>("RemainingDuration")
                        .HasColumnType("int");

                    b.Property<Guid?>("ResponsibleUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("SPI")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal>("TotalFloat")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("WBSElementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("WeightFactor")
                        .HasPrecision(10, 4)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IsBaselined");

                    b.HasIndex("IsCriticalPath");

                    b.HasIndex("PlannedEndDate");

                    b.HasIndex("PlannedStartDate");

                    b.HasIndex("PrimaryDisciplineId");

                    b.HasIndex("ResponsibleUserId");

                    b.HasIndex("Status");

                    b.HasIndex("WBSElementId")
                        .IsUnique();

                    b.HasIndex("ResponsibleUserId", "Status");

                    b.HasIndex("Status", "PlannedStartDate");

                    b.ToTable("WorkPackageDetails", "Projects", t =>
                        {
                            t.HasCheckConstraint("CK_WorkPackageDetails_Budget", "[Budget] >= 0");

                            t.HasCheckConstraint("CK_WorkPackageDetails_Costs", "[ActualCost] >= 0 AND [CommittedCost] >= 0 AND [ForecastCost] >= 0");

                            t.HasCheckConstraint("CK_WorkPackageDetails_Dates", "[PlannedEndDate] > [PlannedStartDate]");

                            t.HasCheckConstraint("CK_WorkPackageDetails_Duration", "[PlannedDuration] > 0");

                            t.HasCheckConstraint("CK_WorkPackageDetails_PhysicalProgress", "[PhysicalProgressPercentage] >= 0 AND [PhysicalProgressPercentage] <= 100");

                            t.HasCheckConstraint("CK_WorkPackageDetails_Progress", "[ProgressPercentage] >= 0 AND [ProgressPercentage] <= 100");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Risks.Core.ChangeOrderImpact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AffectedStakeholders")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("JSON array of affected stakeholder IDs");

                    b.Property<string>("AffectedWBSCodes")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasComment("JSON array of affected WBS codes");

                    b.Property<int>("Area")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<Guid>("ChangeOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChangeOrderId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CostImpact")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal?>("MitigationCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MitigationPlan")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("ScheduleImpactDays")
                        .HasColumnType("int");

                    b.Property<int>("Severity")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Area");

                    b.HasIndex("ChangeOrderId");

                    b.HasIndex("ChangeOrderId1");

                    b.HasIndex("Severity");

                    b.HasIndex("ChangeOrderId", "Area");

                    b.ToTable("ChangeOrderImpacts", "Risks", t =>
                        {
                            t.HasCheckConstraint("CK_ChangeOrderImpacts_CostImpact", "[CostImpact] IS NULL OR [CostImpact] >= 0");

                            t.HasCheckConstraint("CK_ChangeOrderImpacts_MitigationCost", "[MitigationCost] IS NULL OR [MitigationCost] >= 0");

                            t.HasCheckConstraint("CK_ChangeOrderImpacts_ScheduleImpact", "[ScheduleImpactDays] IS NULL OR [ScheduleImpactDays] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Risks.Core.Risk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Cause")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClosureReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("CostImpact")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("IdentifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("IdentifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Impact")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NextReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Probability")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QualityImpact")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ResidualImpact")
                        .HasColumnType("int");

                    b.Property<int?>("ResidualProbability")
                        .HasColumnType("int");

                    b.Property<decimal?>("ResponseCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ResponseDueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ResponseOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResponsePlan")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("ResponseStrategy")
                        .HasColumnType("int");

                    b.Property<int?>("ScheduleImpact")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TriggerIndicators")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IdentifiedById");

                    b.HasIndex("IdentifiedDate");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ResponseOwnerId");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.HasIndex("ProjectId", "Status");

                    b.HasIndex("ProjectId", "Type");

                    b.ToTable("Risks", "Risks", t =>
                        {
                            t.HasCheckConstraint("CK_Risks_ClosedDate", "[ClosedDate] IS NULL OR [ClosedDate] >= [IdentifiedDate]");

                            t.HasCheckConstraint("CK_Risks_CostImpact", "[CostImpact] IS NULL OR [CostImpact] >= 0");

                            t.HasCheckConstraint("CK_Risks_Impact", "[Impact] >= 1 AND [Impact] <= 5");

                            t.HasCheckConstraint("CK_Risks_Probability", "[Probability] >= 1 AND [Probability] <= 5");

                            t.HasCheckConstraint("CK_Risks_ResidualImpact", "[ResidualImpact] IS NULL OR ([ResidualImpact] >= 1 AND [ResidualImpact] <= 5)");

                            t.HasCheckConstraint("CK_Risks_ResidualProbability", "[ResidualProbability] IS NULL OR ([ResidualProbability] >= 1 AND [ResidualProbability] <= 5)");

                            t.HasCheckConstraint("CK_Risks_ResponseCost", "[ResponseCost] IS NULL OR [ResponseCost] >= 0");

                            t.HasCheckConstraint("CK_Risks_ScheduleImpact", "[ScheduleImpact] IS NULL OR [ScheduleImpact] >= 0");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Risks.Core.RiskResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Actions")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal?>("ActualCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompletionNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("EffectivenessScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EstimatedCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ExpectedImpact")
                        .HasColumnType("int");

                    b.Property<int>("ExpectedProbability")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LessonsLearned")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RiskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("Strategy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DueDate");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RiskId");

                    b.HasIndex("Status");

                    b.HasIndex("RiskId", "Status");

                    b.ToTable("RiskResponses", "Risks", t =>
                        {
                            t.HasCheckConstraint("CK_RiskResponses_ActualCost", "[ActualCost] IS NULL OR [ActualCost] >= 0");

                            t.HasCheckConstraint("CK_RiskResponses_CompletedDate", "[CompletedDate] IS NULL OR [CompletedDate] >= [StartDate]");

                            t.HasCheckConstraint("CK_RiskResponses_EffectivenessScore", "[EffectivenessScore] IS NULL OR ([EffectivenessScore] >= 0 AND [EffectivenessScore] <= 100)");

                            t.HasCheckConstraint("CK_RiskResponses_EstimatedCost", "[EstimatedCost] >= 0");

                            t.HasCheckConstraint("CK_RiskResponses_ExpectedImpact", "[ExpectedImpact] >= 1 AND [ExpectedImpact] <= 5");

                            t.HasCheckConstraint("CK_RiskResponses_ExpectedProbability", "[ExpectedProbability] >= 1 AND [ExpectedProbability] <= 5");
                        });
                });

            modelBuilder.Entity("Domain.Entities.Risks.Core.RiskReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionsRequired")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ChangesIdentified")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("NewImpact")
                        .HasColumnType("int");

                    b.Property<int>("NewProbability")
                        .HasColumnType("int");

                    b.Property<int?>("NewStatus")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("NextReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PreviousImpact")
                        .HasColumnType("int");

                    b.Property<int>("PreviousProbability")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousStatus")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<bool>("ResponseStrategyChanged")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewNotes")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("ReviewedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RiskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("StatusChanged")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UpdatedResponsePlan")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("ReviewDate");

                    b.HasIndex("ReviewedById");

                    b.HasIndex("RiskId");

                    b.HasIndex("RiskId", "ReviewDate");

                    b.ToTable("RiskReviews", "Risks", t =>
                        {
                            t.HasCheckConstraint("CK_RiskReviews_NewImpact", "[NewImpact] >= 1 AND [NewImpact] <= 5");

                            t.HasCheckConstraint("CK_RiskReviews_NewProbability", "[NewProbability] >= 1 AND [NewProbability] <= 5");

                            t.HasCheckConstraint("CK_RiskReviews_NextReviewDate", "[NextReviewDate] IS NULL OR [NextReviewDate] > [ReviewDate]");

                            t.HasCheckConstraint("CK_RiskReviews_PreviousImpact", "[PreviousImpact] >= 1 AND [PreviousImpact] <= 5");

                            t.HasCheckConstraint("CK_RiskReviews_PreviousProbability", "[PreviousProbability] >= 1 AND [PreviousProbability] <= 5");
                        });
                });

            modelBuilder.Entity("Domain.Entities.UI.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsImportant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("MetadataJson")
                        .HasColumnType("ntext");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("Priority");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.HasIndex("UserId");

                    b.HasIndex("IsDeleted", "Status");

                    b.HasIndex("UserId", "IsImportant");

                    b.HasIndex("UserId", "Status");

                    b.HasIndex(new[] { "UserId", "Status", "CreatedAt" }, "IX_Notifications_User_Status_Date");

                    b.ToTable("Notifications", "UI", t =>
                        {
                            t.HasCheckConstraint("CK_Notification_ExpiresAt", "[ExpiresAt] IS NULL OR [ExpiresAt] >= [CreatedAt]");

                            t.HasCheckConstraint("CK_Notification_ReadDate", "[ReadAt] IS NULL OR [ReadAt] >= [CreatedAt]");
                        });
                });

            modelBuilder.Entity("OBSNodeMembers", b =>
                {
                    b.Property<Guid>("OBSNodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OBSNodeId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("OBSNodeMembers", "Organization");
                });

            modelBuilder.Entity("CBSBudgetItems", b =>
                {
                    b.HasOne("Domain.Entities.Cost.Budget.BudgetItem", null)
                        .WithMany()
                        .HasForeignKey("BudgetItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Cost.Core.CBS", null)
                        .WithMany()
                        .HasForeignKey("CBSId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Auth.Permissions.UserProjectPermission", b =>
                {
                    b.HasOne("Domain.Entities.Auth.Permissions.Permission", "Permission")
                        .WithMany("UserProjectPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany("UserProjectPermissions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Auth.Security.User", "User")
                        .WithMany("UserProjectPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Auth.Security.ProjectTeamMember", b =>
                {
                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany("ProjectTeamMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Auth.Security.User", "User")
                        .WithMany("ProjectTeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Auth.Security.UserSession", b =>
                {
                    b.HasOne("Domain.Entities.Auth.Security.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.ChangeOrder", b =>
                {
                    b.HasOne("Domain.Entities.Cost.Commitments.Commitment", "Commitment")
                        .WithMany()
                        .HasForeignKey("CommitmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Cost.Control.ControlAccount", "ControlAccount")
                        .WithMany()
                        .HasForeignKey("ControlAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Projects.WBS.WBSElement", "WBSElement")
                        .WithMany()
                        .HasForeignKey("WBSElementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Commitment");

                    b.Navigation("ControlAccount");

                    b.Navigation("Project");

                    b.Navigation("WBSElement");
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.ChangeOrderApproval", b =>
                {
                    b.HasOne("Domain.Entities.Change.Core.ChangeOrder", "ChangeOrder")
                        .WithMany("Approvals")
                        .HasForeignKey("ChangeOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangeOrder");
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.ChangeRequest", b =>
                {
                    b.HasOne("Domain.Entities.Auth.Security.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Change.Core.ChangeOrder", "ChangeOrder")
                        .WithMany()
                        .HasForeignKey("ChangeOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Cost.Control.ControlAccount", "ControlAccount")
                        .WithMany()
                        .HasForeignKey("ControlAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Auth.Security.User", "CostReviewer")
                        .WithMany()
                        .HasForeignKey("CostReviewerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Auth.Security.User", "Requestor")
                        .WithMany()
                        .HasForeignKey("RequestorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Auth.Security.User", "ScheduleReviewer")
                        .WithMany()
                        .HasForeignKey("ScheduleReviewerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Auth.Security.User", "TechnicalReviewer")
                        .WithMany()
                        .HasForeignKey("TechnicalReviewerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Change.Core.Trend", "Trend")
                        .WithMany()
                        .HasForeignKey("TrendId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Projects.WBS.WBSElement", "WBSElement")
                        .WithMany()
                        .HasForeignKey("WBSElementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApprovedBy");

                    b.Navigation("ChangeOrder");

                    b.Navigation("Contractor");

                    b.Navigation("ControlAccount");

                    b.Navigation("CostReviewer");

                    b.Navigation("Project");

                    b.Navigation("Requestor");

                    b.Navigation("ScheduleReviewer");

                    b.Navigation("TechnicalReviewer");

                    b.Navigation("Trend");

                    b.Navigation("WBSElement");
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.ChangeRequestApproval", b =>
                {
                    b.HasOne("Domain.Entities.Auth.Security.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Change.Core.ChangeRequest", "ChangeRequest")
                        .WithMany("Approvals")
                        .HasForeignKey("ChangeRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("ChangeRequest");
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.ChangeRequestAttachment", b =>
                {
                    b.HasOne("Domain.Entities.Change.Core.ChangeRequest", "ChangeRequest")
                        .WithMany("Attachments")
                        .HasForeignKey("ChangeRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Auth.Security.User", "UploadedByUser")
                        .WithMany()
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChangeRequest");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.ChangeRequestComment", b =>
                {
                    b.HasOne("Domain.Entities.Change.Core.ChangeRequest", "ChangeRequest")
                        .WithMany("Comments")
                        .HasForeignKey("ChangeRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Auth.Security.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChangeRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.Trend", b =>
                {
                    b.HasOne("Domain.Entities.Change.Core.ChangeOrder", "ChangeOrder")
                        .WithMany()
                        .HasForeignKey("ChangeOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Auth.Security.User", "DecisionByUser")
                        .WithMany()
                        .HasForeignKey("DecisionByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Auth.Security.User", "RaisedByUser")
                        .WithMany()
                        .HasForeignKey("RaisedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Projects.WBS.WBSElement", "WBSElement")
                        .WithMany()
                        .HasForeignKey("WBSElementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChangeOrder");

                    b.Navigation("DecisionByUser");

                    b.Navigation("Project");

                    b.Navigation("RaisedByUser");

                    b.Navigation("WBSElement");
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.TrendAttachment", b =>
                {
                    b.HasOne("Domain.Entities.Change.Core.Trend", "Trend")
                        .WithMany("Attachments")
                        .HasForeignKey("TrendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Auth.Security.User", "UploadedByUser")
                        .WithMany()
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Trend");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.TrendComment", b =>
                {
                    b.HasOne("Domain.Entities.Change.Core.Trend", "Trend")
                        .WithMany("Comments")
                        .HasForeignKey("TrendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Auth.Security.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Trend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.Variation", b =>
                {
                    b.HasOne("Domain.Entities.Auth.Security.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Change.Core.ChangeOrder", "ChangeOrder")
                        .WithMany()
                        .HasForeignKey("ChangeOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Auth.Security.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Auth.Security.User", "ReviewedByUser")
                        .WithMany()
                        .HasForeignKey("ReviewedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Change.Core.Trend", "Trend")
                        .WithMany()
                        .HasForeignKey("TrendId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApprovedByUser");

                    b.Navigation("ChangeOrder");

                    b.Navigation("Contractor");

                    b.Navigation("Project");

                    b.Navigation("RequestedByUser");

                    b.Navigation("ReviewedByUser");

                    b.Navigation("Trend");
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.VariationAttachment", b =>
                {
                    b.HasOne("Domain.Entities.Auth.Security.User", "UploadedByUser")
                        .WithMany()
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Change.Core.Variation", "Variation")
                        .WithMany("Attachments")
                        .HasForeignKey("VariationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadedByUser");

                    b.Navigation("Variation");
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.VariationItem", b =>
                {
                    b.HasOne("Domain.Entities.Change.Core.Variation", "Variation")
                        .WithMany("Items")
                        .HasForeignKey("VariationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variation");
                });

            modelBuilder.Entity("Domain.Entities.Configuration.Templates.CBSTemplateElement", b =>
                {
                    b.HasOne("Domain.Entities.Configuration.Templates.CBSTemplate", "CBSTemplate")
                        .WithMany("Elements")
                        .HasForeignKey("CBSTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Configuration.Templates.CBSTemplateElement", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CBSTemplate");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entities.Configuration.Templates.WBSTemplateElement", b =>
                {
                    b.HasOne("Domain.Entities.Configuration.Templates.WBSTemplateElement", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Configuration.Templates.WBSTemplate", "WBSTemplate")
                        .WithMany("Elements")
                        .HasForeignKey("WBSTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("WBSTemplate");
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.ChangeOrderDocument", b =>
                {
                    b.HasOne("Domain.Entities.Contracts.Core.ContractChangeOrder", "ChangeOrder")
                        .WithMany("Documents")
                        .HasForeignKey("ChangeOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangeOrder");
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.ChangeOrderMilestone", b =>
                {
                    b.HasOne("Domain.Entities.Contracts.Core.ContractChangeOrder", "ChangeOrder")
                        .WithMany("AffectedMilestones")
                        .HasForeignKey("ChangeOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Contracts.Core.ContractMilestone", "Milestone")
                        .WithMany("ChangeOrders")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChangeOrder");

                    b.Navigation("Milestone");
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.ChangeOrderRelation", b =>
                {
                    b.HasOne("Domain.Entities.Contracts.Core.ContractChangeOrder", "ChangeOrder")
                        .WithMany("RelatedChangeOrders")
                        .HasForeignKey("ChangeOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Contracts.Core.ContractChangeOrder", "RelatedChangeOrder")
                        .WithMany()
                        .HasForeignKey("RelatedChangeOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChangeOrder");

                    b.Navigation("RelatedChangeOrder");
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.Claim", b =>
                {
                    b.HasOne("Domain.Entities.Contracts.Core.Contract", "Contract")
                        .WithMany("Claims")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.ClaimChangeOrder", b =>
                {
                    b.HasOne("Domain.Entities.Contracts.Core.ContractChangeOrder", "ChangeOrder")
                        .WithMany("RelatedClaims")
                        .HasForeignKey("ChangeOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Contracts.Core.Claim", "Claim")
                        .WithMany("RelatedChangeOrders")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangeOrder");

                    b.Navigation("Claim");
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.ClaimDocument", b =>
                {
                    b.HasOne("Domain.Entities.Contracts.Core.Claim", "Claim")
                        .WithMany("Documents")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.ClaimRelation", b =>
                {
                    b.HasOne("Domain.Entities.Contracts.Core.Claim", "Claim")
                        .WithMany("RelatedClaims")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Contracts.Core.Claim", "RelatedClaim")
                        .WithMany()
                        .HasForeignKey("RelatedClaimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("RelatedClaim");
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.Contract", b =>
                {
                    b.HasOne("Domain.Entities.Organization.Core.Company", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.ContractChangeOrder", b =>
                {
                    b.HasOne("Domain.Entities.Contracts.Core.Contract", "Contract")
                        .WithMany("ChangeOrders")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.ContractDocument", b =>
                {
                    b.HasOne("Domain.Entities.Contracts.Core.Contract", "Contract")
                        .WithMany("Documents")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.ContractMilestone", b =>
                {
                    b.HasOne("Domain.Entities.Contracts.Core.Contract", "Contract")
                        .WithMany("Milestones")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.MilestoneDependency", b =>
                {
                    b.HasOne("Domain.Entities.Contracts.Core.ContractMilestone", "Predecessor")
                        .WithMany("Successors")
                        .HasForeignKey("PredecessorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Contracts.Core.ContractMilestone", "Successor")
                        .WithMany("Predecessors")
                        .HasForeignKey("SuccessorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Predecessor");

                    b.Navigation("Successor");
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.MilestoneDocument", b =>
                {
                    b.HasOne("Domain.Entities.Contracts.Core.ContractMilestone", "Milestone")
                        .WithMany("Documents")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Milestone");
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.Valuation", b =>
                {
                    b.HasOne("Domain.Entities.Contracts.Core.Contract", "Contract")
                        .WithMany("Valuations")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.ValuationDocument", b =>
                {
                    b.HasOne("Domain.Entities.Contracts.Core.Valuation", "Valuation")
                        .WithMany("Documents")
                        .HasForeignKey("ValuationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Valuation");
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.ValuationItem", b =>
                {
                    b.HasOne("Domain.Entities.Contracts.Core.Valuation", "Valuation")
                        .WithMany("Items")
                        .HasForeignKey("ValuationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Valuation");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Budget.Budget", b =>
                {
                    b.HasOne("Domain.Entities.Cost.Budget.Budget", "ParentBudget")
                        .WithMany("ChildBudgets")
                        .HasForeignKey("ParentBudgetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany("Budgets")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ParentBudget");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Budget.BudgetItem", b =>
                {
                    b.HasOne("Domain.Entities.Cost.Budget.Budget", "Budget")
                        .WithMany("BudgetItems")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Cost.Control.ControlAccount", "ControlAccount")
                        .WithMany()
                        .HasForeignKey("ControlAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Package", null)
                        .WithMany("BudgetItems")
                        .HasForeignKey("PackageId");

                    b.Navigation("Budget");

                    b.Navigation("ControlAccount");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Budget.BudgetRevision", b =>
                {
                    b.HasOne("Domain.Entities.Cost.Budget.Budget", "Budget")
                        .WithMany("Revisions")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Budget");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Commitments.Commitment", b =>
                {
                    b.HasOne("Domain.Entities.Cost.Budget.BudgetItem", "BudgetItem")
                        .WithMany()
                        .HasForeignKey("BudgetItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Contractor", "Contractor")
                        .WithMany("Commitments")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Cost.Control.ControlAccount", "ControlAccount")
                        .WithMany()
                        .HasForeignKey("ControlAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BudgetItem");

                    b.Navigation("Contractor");

                    b.Navigation("ControlAccount");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Commitments.CommitmentItem", b =>
                {
                    b.HasOne("Domain.Entities.Cost.Budget.BudgetItem", "BudgetItem")
                        .WithMany()
                        .HasForeignKey("BudgetItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Cost.Commitments.Commitment", "Commitment")
                        .WithMany("Items")
                        .HasForeignKey("CommitmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BudgetItem");

                    b.Navigation("Commitment");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Commitments.CommitmentRevision", b =>
                {
                    b.HasOne("Domain.Entities.Cost.Commitments.Commitment", "Commitment")
                        .WithMany("Revisions")
                        .HasForeignKey("CommitmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commitment");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Commitments.CommitmentWorkPackage", b =>
                {
                    b.HasOne("Domain.Entities.Cost.Commitments.Commitment", "Commitment")
                        .WithMany("WorkPackageAllocations")
                        .HasForeignKey("CommitmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Projects.WBS.WBSElement", "WBSElement")
                        .WithMany()
                        .HasForeignKey("WBSElementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Commitment");

                    b.Navigation("WBSElement");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Control.ActualCost", b =>
                {
                    b.HasOne("Domain.Entities.Cost.Control.ControlAccount", null)
                        .WithMany("ActualCosts")
                        .HasForeignKey("ControlAccountId");

                    b.HasOne("Domain.Entities.Cost.Control.CostItem", "CostItem")
                        .WithMany()
                        .HasForeignKey("CostItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CostItem");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Control.ControlAccount", b =>
                {
                    b.HasOne("Domain.Entities.Auth.Security.User", "CAMUser")
                        .WithMany()
                        .HasForeignKey("CAMUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Organization.Core.Phase", "Phase")
                        .WithMany("ControlAccounts")
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany("ControlAccounts")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CAMUser");

                    b.Navigation("Phase");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Control.ControlAccountAssignment", b =>
                {
                    b.HasOne("Domain.Entities.Cost.Control.ControlAccount", "ControlAccount")
                        .WithMany("Assignments")
                        .HasForeignKey("ControlAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Auth.Security.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ControlAccount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Control.CostItem", b =>
                {
                    b.HasOne("Domain.Entities.Cost.Core.CBS", "CBS")
                        .WithMany("CostItems")
                        .HasForeignKey("CBSId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Cost.Control.ControlAccount", "ControlAccount")
                        .WithMany("CostItems")
                        .HasForeignKey("ControlAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Projects.WBS.WBSElement", "WBSElement")
                        .WithMany()
                        .HasForeignKey("WBSElementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CBS");

                    b.Navigation("ControlAccount");

                    b.Navigation("Project");

                    b.Navigation("WBSElement");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Core.AccountCode", b =>
                {
                    b.HasOne("Domain.Entities.Organization.Core.Phase", "Phase")
                        .WithMany()
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Project", null)
                        .WithMany("AccountCodes")
                        .HasForeignKey("ProjectId1");

                    b.Navigation("Phase");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Core.CBS", b =>
                {
                    b.HasOne("Domain.Entities.Cost.Core.CBS", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Core.CostControlReport", b =>
                {
                    b.HasOne("Domain.Entities.Cost.Control.ControlAccount", "ControlAccount")
                        .WithMany("CostControlReports")
                        .HasForeignKey("ControlAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany("CostControlReports")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ControlAccount");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Core.CostControlReportItem", b =>
                {
                    b.HasOne("Domain.Entities.Cost.Core.CostControlReport", "CostControlReport")
                        .WithMany("Items")
                        .HasForeignKey("CostControlReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Projects.WBS.WBSElement", "WBSElement")
                        .WithMany()
                        .HasForeignKey("WBSElementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Projects.WBS.WorkPackageDetails", "WorkPackage")
                        .WithMany()
                        .HasForeignKey("WorkPackageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CostControlReport");

                    b.Navigation("WBSElement");

                    b.Navigation("WorkPackage");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Core.ExchangeRate", b =>
                {
                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany("ExchangeRates")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Core.Invoice", b =>
                {
                    b.HasOne("Domain.Entities.Cost.Commitments.Commitment", "Commitment")
                        .WithMany("Invoices")
                        .HasForeignKey("CommitmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Organization.Core.Contractor", "Contractor")
                        .WithMany("Invoices")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Change.Core.Variation", null)
                        .WithMany("Invoices")
                        .HasForeignKey("VariationId");

                    b.Navigation("Commitment");

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Core.InvoiceItem", b =>
                {
                    b.HasOne("Domain.Entities.Cost.Budget.BudgetItem", "BudgetItem")
                        .WithMany()
                        .HasForeignKey("BudgetItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Cost.Commitments.CommitmentItem", "CommitmentItem")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("CommitmentItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Cost.Core.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BudgetItem");

                    b.Navigation("CommitmentItem");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Core.TimePhasedBudget", b =>
                {
                    b.HasOne("Domain.Entities.Cost.Control.ControlAccount", "ControlAccount")
                        .WithMany("TimePhasedBudgets")
                        .HasForeignKey("ControlAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ControlAccount");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Core.WBSCBSMapping", b =>
                {
                    b.HasOne("Domain.Entities.Cost.Core.CBS", "CBS")
                        .WithMany()
                        .HasForeignKey("CBSId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Projects.WBS.WBSElement", "WBSElement")
                        .WithMany("CBSMappings")
                        .HasForeignKey("WBSElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CBS");

                    b.Navigation("WBSElement");
                });

            modelBuilder.Entity("Domain.Entities.Cost.EVM.EVMRecord", b =>
                {
                    b.HasOne("Domain.Entities.Cost.Control.ControlAccount", "ControlAccount")
                        .WithMany("EVMRecords")
                        .HasForeignKey("ControlAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ControlAccount");
                });

            modelBuilder.Entity("Domain.Entities.Documents.Core.CommentAttachment", b =>
                {
                    b.HasOne("Domain.Entities.Documents.Core.DocumentComment", "Comment")
                        .WithMany("Attachments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("Domain.Entities.Documents.Core.Document", b =>
                {
                    b.HasOne("Domain.Entities.Auth.Security.User", "AuthorUser")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Documents.Core.DocumentVersion", "CurrentVersionEntity")
                        .WithMany()
                        .HasForeignKey("CurrentVersionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Discipline", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Auth.Security.User", "LockedBy")
                        .WithMany()
                        .HasForeignKey("LockedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Phase", "Phase")
                        .WithMany()
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Auth.Security.User", "ReviewedBy")
                        .WithMany()
                        .HasForeignKey("ReviewedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AuthorUser");

                    b.Navigation("CurrentVersionEntity");

                    b.Navigation("Discipline");

                    b.Navigation("LockedBy");

                    b.Navigation("Package");

                    b.Navigation("Phase");

                    b.Navigation("Project");

                    b.Navigation("ReviewedBy");
                });

            modelBuilder.Entity("Domain.Entities.Documents.Core.DocumentComment", b =>
                {
                    b.HasOne("Domain.Entities.Auth.Security.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Documents.Core.Document", "Document")
                        .WithMany("Comments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Documents.Core.DocumentVersion", "DocumentVersion")
                        .WithMany("Comments")
                        .HasForeignKey("DocumentVersionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Documents.Core.DocumentComment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.Auth.Security.User", "ResolvedBy")
                        .WithMany()
                        .HasForeignKey("ResolvedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");

                    b.Navigation("Document");

                    b.Navigation("DocumentVersion");

                    b.Navigation("ParentComment");

                    b.Navigation("ResolvedBy");
                });

            modelBuilder.Entity("Domain.Entities.Documents.Core.DocumentDistribution", b =>
                {
                    b.HasOne("Domain.Entities.Auth.Security.User", "DistributedBy")
                        .WithMany()
                        .HasForeignKey("DistributedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Documents.Core.Document", "Document")
                        .WithMany("Distributions")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Documents.Core.DocumentVersion", "DocumentVersion")
                        .WithMany("Distributions")
                        .HasForeignKey("DocumentVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Organization.Core.Company", "RecipientCompany")
                        .WithMany()
                        .HasForeignKey("RecipientCompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Auth.Security.User", "RecipientUser")
                        .WithMany()
                        .HasForeignKey("RecipientUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Documents.Transmittals.Transmittal", "Transmittal")
                        .WithMany("DocumentDistributions")
                        .HasForeignKey("TransmittalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DistributedBy");

                    b.Navigation("Document");

                    b.Navigation("DocumentVersion");

                    b.Navigation("RecipientCompany");

                    b.Navigation("RecipientUser");

                    b.Navigation("Transmittal");
                });

            modelBuilder.Entity("Domain.Entities.Documents.Core.DocumentPermission", b =>
                {
                    b.HasOne("Domain.Entities.Documents.Core.Document", "Document")
                        .WithMany("Permissions")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Auth.Security.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Document");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Documents.Core.DocumentRelationship", b =>
                {
                    b.HasOne("Domain.Entities.Documents.Core.Document", "Document")
                        .WithMany("RelatedDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Documents.Core.Document", "RelatedDocument")
                        .WithMany("RelatedToDocuments")
                        .HasForeignKey("RelatedDocumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("RelatedDocument");
                });

            modelBuilder.Entity("Domain.Entities.Documents.Core.DocumentVersion", b =>
                {
                    b.HasOne("Domain.Entities.Documents.Core.Document", "Document")
                        .WithMany("Versions")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Auth.Security.User", "ReviewedBy")
                        .WithMany()
                        .HasForeignKey("ReviewedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Documents.Core.DocumentVersion", "SupersededBy")
                        .WithMany()
                        .HasForeignKey("SupersededById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Auth.Security.User", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("ReviewedBy");

                    b.Navigation("SupersededBy");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("Domain.Entities.Documents.Transmittals.Transmittal", b =>
                {
                    b.HasOne("Domain.Entities.Auth.Security.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Company", "FromCompany")
                        .WithMany()
                        .HasForeignKey("FromCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Auth.Security.User", "PreparedBy")
                        .WithMany()
                        .HasForeignKey("PreparedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Auth.Security.User", "SentBy")
                        .WithMany()
                        .HasForeignKey("SentById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Company", "ToCompany")
                        .WithMany()
                        .HasForeignKey("ToCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("FromCompany");

                    b.Navigation("PreparedBy");

                    b.Navigation("Project");

                    b.Navigation("SentBy");

                    b.Navigation("ToCompany");
                });

            modelBuilder.Entity("Domain.Entities.Documents.Transmittals.TransmittalAttachment", b =>
                {
                    b.HasOne("Domain.Entities.Documents.Transmittals.Transmittal", "Transmittal")
                        .WithMany("Attachments")
                        .HasForeignKey("TransmittalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transmittal");
                });

            modelBuilder.Entity("Domain.Entities.Documents.Transmittals.TransmittalDocument", b =>
                {
                    b.HasOne("Domain.Entities.Documents.Core.Document", "Document")
                        .WithMany("TransmittalDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Documents.Core.DocumentVersion", "DocumentVersion")
                        .WithMany("TransmittalDocuments")
                        .HasForeignKey("DocumentVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Documents.Transmittals.Transmittal", "Transmittal")
                        .WithMany("Documents")
                        .HasForeignKey("TransmittalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("DocumentVersion");

                    b.Navigation("Transmittal");
                });

            modelBuilder.Entity("Domain.Entities.Documents.Transmittals.TransmittalRecipient", b =>
                {
                    b.HasOne("Domain.Entities.Organization.Core.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Documents.Transmittals.Transmittal", "Transmittal")
                        .WithMany("Recipients")
                        .HasForeignKey("TransmittalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Auth.Security.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("Transmittal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.OBSNode", b =>
                {
                    b.HasOne("Domain.Entities.Auth.Security.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.OBSNode", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany("OBSNodes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Manager");

                    b.Navigation("Parent");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.Operation", b =>
                {
                    b.HasOne("Domain.Entities.Organization.Core.Company", "Company")
                        .WithMany("Operations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.Package", b =>
                {
                    b.HasOne("Domain.Entities.Organization.Core.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Phase", "Phase")
                        .WithMany()
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Projects.WBS.WBSElement", "WBSElement")
                        .WithMany()
                        .HasForeignKey("WBSElementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Contractor");

                    b.Navigation("Phase");

                    b.Navigation("WBSElement");
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.PackageDiscipline", b =>
                {
                    b.HasOne("Domain.Entities.Organization.Core.Discipline", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Auth.Security.User", "LeadEngineer")
                        .WithMany()
                        .HasForeignKey("LeadEngineerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discipline");

                    b.Navigation("LeadEngineer");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.Phase", b =>
                {
                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany("Phases")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.Project", b =>
                {
                    b.HasOne("Domain.Entities.Organization.Core.Currency", null)
                        .WithMany("Projects")
                        .HasForeignKey("CurrencyCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Operation", "Operation")
                        .WithMany("Projects")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Configuration.Core.ProjectType", null)
                        .WithMany("Projects")
                        .HasForeignKey("ProjectTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.RAM", b =>
                {
                    b.HasOne("Domain.Entities.Cost.Control.ControlAccount", "ControlAccount")
                        .WithMany()
                        .HasForeignKey("ControlAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.OBSNode", "OBSNode")
                        .WithMany()
                        .HasForeignKey("OBSNodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany("RAMAssignments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Projects.WBS.WBSElement", "WBSElement")
                        .WithMany()
                        .HasForeignKey("WBSElementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ControlAccount");

                    b.Navigation("OBSNode");

                    b.Navigation("Project");

                    b.Navigation("WBSElement");
                });

            modelBuilder.Entity("Domain.Entities.Projects.Progress.Activity", b =>
                {
                    b.HasOne("Domain.Entities.Projects.Progress.ScheduleVersion", null)
                        .WithMany("Activities")
                        .HasForeignKey("ScheduleVersionId");

                    b.HasOne("Domain.Entities.Projects.WBS.WBSElement", "WBSElement")
                        .WithMany()
                        .HasForeignKey("WBSElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Projects.WBS.WorkPackageDetails", "WorkPackageDetails")
                        .WithMany()
                        .HasForeignKey("WorkPackageDetailsId");

                    b.Navigation("WBSElement");

                    b.Navigation("WorkPackageDetails");
                });

            modelBuilder.Entity("Domain.Entities.Projects.Progress.Equipment", b =>
                {
                    b.HasOne("Domain.Entities.Organization.Core.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Project", "CurrentProject")
                        .WithMany()
                        .HasForeignKey("CurrentProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Contractor");

                    b.Navigation("CurrentProject");
                });

            modelBuilder.Entity("Domain.Entities.Projects.Progress.Milestone", b =>
                {
                    b.HasOne("Domain.Entities.Organization.Core.Phase", "Phase")
                        .WithMany("Milestones")
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany("Milestones")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Phase");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.Projects.Progress.Resource", b =>
                {
                    b.HasOne("Domain.Entities.Projects.Progress.Activity", "Activity")
                        .WithMany("Resources")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Organization.Core.Contractor", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Projects.Progress.Equipment", null)
                        .WithMany("ResourceAllocations")
                        .HasForeignKey("EquipmentId");

                    b.HasOne("Domain.Entities.Auth.Security.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Activity");

                    b.Navigation("Contractor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Projects.Progress.ScheduleVersion", b =>
                {
                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.Projects.Progress.WBSElementProgress", b =>
                {
                    b.HasOne("Domain.Entities.Projects.WBS.WBSElement", "WBSElement")
                        .WithMany()
                        .HasForeignKey("WBSElementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WBSElement");
                });

            modelBuilder.Entity("Domain.Entities.Projects.WBS.PlanningPackage", b =>
                {
                    b.HasOne("Domain.Entities.Cost.Control.ControlAccount", "ControlAccount")
                        .WithMany("PlanningPackages")
                        .HasForeignKey("ControlAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Organization.Core.Phase", "Phase")
                        .WithMany("PlanningPackages")
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany("PlanningPackages")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ControlAccount");

                    b.Navigation("Phase");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.Projects.WBS.WBSElement", b =>
                {
                    b.HasOne("Domain.Entities.Cost.Control.ControlAccount", "ControlAccount")
                        .WithMany("WorkPackages")
                        .HasForeignKey("ControlAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Projects.WBS.WBSElement", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Phase", null)
                        .WithMany("WBSElements")
                        .HasForeignKey("PhaseId");

                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany("WBSElements")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ControlAccount");

                    b.Navigation("Parent");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.Projects.WBS.WorkPackageDetails", b =>
                {
                    b.HasOne("Domain.Entities.Organization.Core.Discipline", "PrimaryDiscipline")
                        .WithMany()
                        .HasForeignKey("PrimaryDisciplineId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Auth.Security.User", "ResponsibleUser")
                        .WithMany()
                        .HasForeignKey("ResponsibleUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Projects.WBS.WBSElement", "WBSElement")
                        .WithOne("WorkPackageDetails")
                        .HasForeignKey("Domain.Entities.Projects.WBS.WorkPackageDetails", "WBSElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryDiscipline");

                    b.Navigation("ResponsibleUser");

                    b.Navigation("WBSElement");
                });

            modelBuilder.Entity("Domain.Entities.Risks.Core.ChangeOrderImpact", b =>
                {
                    b.HasOne("Domain.Entities.Change.Core.ChangeOrder", "ChangeOrder")
                        .WithMany()
                        .HasForeignKey("ChangeOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Change.Core.ChangeOrder", null)
                        .WithMany("Impacts")
                        .HasForeignKey("ChangeOrderId1");

                    b.Navigation("ChangeOrder");
                });

            modelBuilder.Entity("Domain.Entities.Risks.Core.Risk", b =>
                {
                    b.HasOne("Domain.Entities.Auth.Security.User", "IdentifiedBy")
                        .WithMany()
                        .HasForeignKey("IdentifiedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Auth.Security.User", "ResponseOwner")
                        .WithMany()
                        .HasForeignKey("ResponseOwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("IdentifiedBy");

                    b.Navigation("Project");

                    b.Navigation("ResponseOwner");
                });

            modelBuilder.Entity("Domain.Entities.Risks.Core.RiskResponse", b =>
                {
                    b.HasOne("Domain.Entities.Auth.Security.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Risks.Core.Risk", "Risk")
                        .WithMany("Responses")
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Risk");
                });

            modelBuilder.Entity("Domain.Entities.Risks.Core.RiskReview", b =>
                {
                    b.HasOne("Domain.Entities.Auth.Security.User", "ReviewedBy")
                        .WithMany()
                        .HasForeignKey("ReviewedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Risks.Core.Risk", "Risk")
                        .WithMany("Reviews")
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReviewedBy");

                    b.Navigation("Risk");
                });

            modelBuilder.Entity("Domain.Entities.UI.Notification", b =>
                {
                    b.HasOne("Domain.Entities.Organization.Core.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Organization.Core.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Entities.Auth.Security.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OBSNodeMembers", b =>
                {
                    b.HasOne("Domain.Entities.Organization.Core.OBSNode", null)
                        .WithMany()
                        .HasForeignKey("OBSNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Auth.Security.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Auth.Permissions.Permission", b =>
                {
                    b.Navigation("UserProjectPermissions");
                });

            modelBuilder.Entity("Domain.Entities.Auth.Security.User", b =>
                {
                    b.Navigation("ProjectTeamMembers");

                    b.Navigation("UserProjectPermissions");
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.ChangeOrder", b =>
                {
                    b.Navigation("Approvals");

                    b.Navigation("Impacts");
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.ChangeRequest", b =>
                {
                    b.Navigation("Approvals");

                    b.Navigation("Attachments");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.Trend", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Domain.Entities.Change.Core.Variation", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Invoices");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.Entities.Configuration.Core.ProjectType", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Domain.Entities.Configuration.Templates.CBSTemplate", b =>
                {
                    b.Navigation("Elements");
                });

            modelBuilder.Entity("Domain.Entities.Configuration.Templates.CBSTemplateElement", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Domain.Entities.Configuration.Templates.WBSTemplate", b =>
                {
                    b.Navigation("Elements");
                });

            modelBuilder.Entity("Domain.Entities.Configuration.Templates.WBSTemplateElement", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.Claim", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("RelatedChangeOrders");

                    b.Navigation("RelatedClaims");
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.Contract", b =>
                {
                    b.Navigation("ChangeOrders");

                    b.Navigation("Claims");

                    b.Navigation("Documents");

                    b.Navigation("Milestones");

                    b.Navigation("Valuations");
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.ContractChangeOrder", b =>
                {
                    b.Navigation("AffectedMilestones");

                    b.Navigation("Documents");

                    b.Navigation("RelatedChangeOrders");

                    b.Navigation("RelatedClaims");
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.ContractMilestone", b =>
                {
                    b.Navigation("ChangeOrders");

                    b.Navigation("Documents");

                    b.Navigation("Predecessors");

                    b.Navigation("Successors");
                });

            modelBuilder.Entity("Domain.Entities.Contracts.Core.Valuation", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Budget.Budget", b =>
                {
                    b.Navigation("BudgetItems");

                    b.Navigation("ChildBudgets");

                    b.Navigation("Revisions");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Commitments.Commitment", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Items");

                    b.Navigation("Revisions");

                    b.Navigation("WorkPackageAllocations");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Commitments.CommitmentItem", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Control.ControlAccount", b =>
                {
                    b.Navigation("ActualCosts");

                    b.Navigation("Assignments");

                    b.Navigation("CostControlReports");

                    b.Navigation("CostItems");

                    b.Navigation("EVMRecords");

                    b.Navigation("PlanningPackages");

                    b.Navigation("TimePhasedBudgets");

                    b.Navigation("WorkPackages");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Core.CBS", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("CostItems");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Core.CostControlReport", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.Entities.Cost.Core.Invoice", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("Domain.Entities.Documents.Core.Document", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Distributions");

                    b.Navigation("Permissions");

                    b.Navigation("RelatedDocuments");

                    b.Navigation("RelatedToDocuments");

                    b.Navigation("TransmittalDocuments");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("Domain.Entities.Documents.Core.DocumentComment", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Domain.Entities.Documents.Core.DocumentVersion", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Distributions");

                    b.Navigation("TransmittalDocuments");
                });

            modelBuilder.Entity("Domain.Entities.Documents.Transmittals.Transmittal", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("DocumentDistributions");

                    b.Navigation("Documents");

                    b.Navigation("Recipients");
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.Company", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.Contractor", b =>
                {
                    b.Navigation("Commitments");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.Currency", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.OBSNode", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.Operation", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.Package", b =>
                {
                    b.Navigation("BudgetItems");
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.Phase", b =>
                {
                    b.Navigation("ControlAccounts");

                    b.Navigation("Milestones");

                    b.Navigation("PlanningPackages");

                    b.Navigation("WBSElements");
                });

            modelBuilder.Entity("Domain.Entities.Organization.Core.Project", b =>
                {
                    b.Navigation("AccountCodes");

                    b.Navigation("Budgets");

                    b.Navigation("ControlAccounts");

                    b.Navigation("CostControlReports");

                    b.Navigation("ExchangeRates");

                    b.Navigation("Milestones");

                    b.Navigation("OBSNodes");

                    b.Navigation("Phases");

                    b.Navigation("PlanningPackages");

                    b.Navigation("ProjectTeamMembers");

                    b.Navigation("RAMAssignments");

                    b.Navigation("UserProjectPermissions");

                    b.Navigation("WBSElements");
                });

            modelBuilder.Entity("Domain.Entities.Projects.Progress.Activity", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("Domain.Entities.Projects.Progress.Equipment", b =>
                {
                    b.Navigation("ResourceAllocations");
                });

            modelBuilder.Entity("Domain.Entities.Projects.Progress.ScheduleVersion", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("Domain.Entities.Projects.WBS.WBSElement", b =>
                {
                    b.Navigation("CBSMappings");

                    b.Navigation("Children");

                    b.Navigation("WorkPackageDetails");
                });

            modelBuilder.Entity("Domain.Entities.Risks.Core.Risk", b =>
                {
                    b.Navigation("Responses");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
