@page "/profile"
@using MudBlazor
@using Microsoft.AspNetCore.Components.Authorization
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@inject AuthenticationStateProvider AuthStateProvider
@* @inject Web.Services.Implementation.UserPhotoService UserPhotoService *@

<PageTitle>Mi Perfil - EzPro MSD</PageTitle>

<div class="fade-in">
    <!-- Page Header -->
    <MudGrid Class="mb-4">
        <MudItem xs="12">
            <MudText Typo="Typo.h4" Class="mb-1" Style="font-weight: 700;">
                Mi Perfil
            </MudText>
        </MudItem>
    </MudGrid>

    <MudGrid>
        <!-- Profile Card -->
        <MudItem xs="12" md="4">
            <MudCard>
                <MudCardContent Class="text-center pa-6">
                    <!-- Avatar -->
                    <MudAvatar Size="Size.Large" Style="width: 120px; height: 120px; margin: 0 auto 1rem;">
                        @if (!string.IsNullOrEmpty(_userAvatar) && (_userAvatar.StartsWith("http") || _userAvatar.StartsWith("data:")))
                        {
                            <MudImage Src="@_userAvatar" />
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Large" />
                        }
                    </MudAvatar>
                    
                    <!-- User Name -->
                    <MudText Typo="Typo.h5" Class="mb-1" Style="font-weight: 600;">
                        @_userName
                    </MudText>
                    
                    <!-- User Email -->
                    <MudText Typo="Typo.body1" Color="Color.Default" Class="mb-4">
                        @_userEmail
                    </MudText>
                    
                    <!-- Role -->
                    <MudChip T="string" Text="Usuario" Color="Color.Primary" Size="Size.Medium" />
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Profile Information -->
        <MudItem xs="12" md="8">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Class="mb-4" Style="font-weight: 600;">
                        Información del Perfil
                    </MudText>
                    
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudText Typo="Typo.caption" Color="Color.Default">Nombre</MudText>
                            <MudText Typo="Typo.body1" Class="mb-3">@_userName</MudText>
                        </MudItem>
                        
                        <MudItem xs="12" sm="6">
                            <MudText Typo="Typo.caption" Color="Color.Default">Correo Electrónico</MudText>
                            <MudText Typo="Typo.body1" Class="mb-3">@_userEmail</MudText>
                        </MudItem>
                        
                        <MudItem xs="12" sm="6">
                            <MudText Typo="Typo.caption" Color="Color.Default">Rol</MudText>
                            <MudText Typo="Typo.body1" Class="mb-3">Usuario</MudText>
                        </MudItem>
                        
                        <MudItem xs="12" sm="6">
                            <MudText Typo="Typo.caption" Color="Color.Default">Estado</MudText>
                            <MudText Typo="Typo.body1" Class="mb-3">Activo</MudText>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</div>

@code {
    private string _userName = "Usuario";
    private string _userEmail = "usuario@empresa.com";
    private string? _userAvatar = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Obtener información del usuario desde el contexto de autenticación
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                _userName = user.FindFirst("name")?.Value 
                    ?? user.FindFirst(System.Security.Claims.ClaimTypes.Name)?.Value
                    ?? user.Identity.Name 
                    ?? "Usuario";
                    
                _userEmail = user.FindFirst("email")?.Value 
                    ?? user.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value
                    ?? user.FindFirst("preferred_username")?.Value
                    ?? "usuario@empresa.com";
                    
                // Foto deshabilitada temporalmente por problemas de conectividad
                // await LoadUserPhoto();
            }
        }
        catch (Exception ex)
        {
            // Log silencioso del error
            Console.WriteLine($"Error loading profile: {ex.Message}");
        }
    }
    
    /*
    private async Task LoadUserPhoto()
    {
        try
        {
            var userDto = await UserPhotoService.GetCurrentUserAsync();
            if (userDto != null)
            {
                if (!string.IsNullOrEmpty(userDto.PhotoUrl))
                {
                    _userAvatar = userDto.PhotoUrl;
                    StateHasChanged();
                }
                
                // También actualizar otros datos si están disponibles
                if (!string.IsNullOrEmpty(userDto.Name))
                    _userName = userDto.Name;
                    
                if (!string.IsNullOrEmpty(userDto.Email))
                    _userEmail = userDto.Email;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user photo: {ex.Message}");
        }
    }
    */
}