@page "/users/new"
@page "/users/{Id:guid}/edit"
@inject IUserService UserService
@inject ICompanyService CompanyService
@inject NavigationManager Navigation
@inject IToastService Toast
@attribute [Authorize]

<PageTitle>@(IsEdit ? "Editar" : "Nuevo") Usuario - EzPro</PageTitle>

<div class="page-header">
    <div class="row align-items-center">
        <div class="col">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb mb-0">
                    <li class="breadcrumb-item"><a href="/users">Usuarios</a></li>
                    <li class="breadcrumb-item active">@(IsEdit ? "Editar" : "Nuevo")</li>
                </ol>
            </nav>
            <h1 class="page-title mt-2">
                <i class="fa-light fa-user me-2"></i>@(IsEdit ? "Editar" : "Nuevo") Usuario
            </h1>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-8">
        <div class="card">
            <div class="card-body">
                <EditForm Model="model" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    
                    <div class="row g-3">
                        <!-- Información personal -->
                        <div class="col-12">
                            <h5 class="mb-3">Información personal</h5>
                        </div>
                        
                        <div class="col-md-6">
                            <label class="form-label">Nombre <span class="text-danger">*</span></label>
                            <EzInputText @bind-Value="model.GivenName" Placeholder="Nombre" disabled="@IsEdit" />
                            <ValidationMessage For="() => model.GivenName" />
                        </div>
                        
                        <div class="col-md-6">
                            <label class="form-label">Apellido <span class="text-danger">*</span></label>
                            <EzInputText @bind-Value="model.Surname" Placeholder="Apellido" disabled="@IsEdit" />
                            <ValidationMessage For="() => model.Surname" />
                        </div>
                        
                        <div class="col-12">
                            <label class="form-label">Email <span class="text-danger">*</span></label>
                            <EzInputText @bind-Value="model.Email" type="email" Placeholder="usuario@empresa.cl" disabled="@IsEdit" />
                            <ValidationMessage For="() => model.Email" />
                            @if (IsEdit)
                            {
                                <small class="text-muted">El email no se puede modificar ya que está vinculado con Azure AD</small>
                            }
                        </div>
                        
                        <!-- Información laboral -->
                        <div class="col-12 mt-4">
                            <h5 class="mb-3">Información laboral</h5>
                        </div>
                        
                        <div class="col-md-6">
                            <label class="form-label">Cargo</label>
                            <EzInputText @bind-Value="model.JobTitle" Placeholder="Ej: Jefe de Proyectos" />
                        </div>
                        
                        <div class="col-md-6">
                            <label class="form-label">Teléfono</label>
                            <EzInputText @bind-Value="model.PhoneNumber" Placeholder="+56 9 1234 5678" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Idioma preferido</label>
                            <InputSelect @bind-Value="model.PreferredLanguage" Options="@languageOptions"/>
                        </div>
                        
                        <!-- Rol y permisos -->
                        <div class="col-12 mt-4">
                            <h5 class="mb-3">Rol y permisos</h5>
                        </div>
                       
                        
                        @if (!IsEdit)
                        {
                            <div class="col-12 mt-4">
                                <div class="alert alert-info">
                                    <i class="fa-light fa-info-circle me-2"></i>
                                    El usuario recibirá un correo de invitación para configurar su contraseña
                                    y completar el proceso de registro.
                                </div>
                            </div>
                        }
                    </div>
                    
                    <div class="mt-4 d-flex justify-content-end gap-2">
                        <button type="button" class="btn btn-light" @onclick="Cancel">
                            <i class="fa-light fa-times me-2"></i>Cancelar
                        </button>
                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            else
                            {
                                <i class="fa-light fa-save me-2"></i>
                            }
                            Guardar
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    
    <div class="col-lg-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title mb-3">Foto de perfil</h5>
                
                <div class="text-center mb-3">
                    @if (!string.IsNullOrEmpty(currentUser?.PhotoUrl))
                    {
                        <img src="@currentUser.PhotoUrl" 
                             alt="Foto de perfil" 
                             class="rounded-circle"
                             style="width: 150px; height: 150px; object-fit: cover;">
                    }
                    else
                    {
                        <div class="rounded-circle bg-primary bg-opacity-10 d-flex align-items-center justify-content-center mx-auto"
                             style="width: 150px; height: 150px;">
                            <i class="fa-light fa-user fa-3x text-primary"></i>
                        </div>
                    }
                </div>
                
                @if (IsEdit)
                {
                    <p class="text-muted text-center small">
                        La foto de perfil se sincroniza automáticamente desde Azure AD
                    </p>
                    
                    <button class="btn btn-outline-primary w-100" @onclick="SyncWithAzureAD">
                        <i class="fa-light fa-sync me-2"></i>Sincronizar con Azure AD
                    </button>
                }
            </div>
        </div>
        
        @if (IsEdit)
        {
            <div class="card mt-3">
                <div class="card-body">
                    <h5 class="card-title mb-3">Estado de la cuenta</h5>
                    
                    @if (currentUser?.IsActive == true)
                    {
                        <div class="alert alert-success mb-3">
                            <i class="fa-light fa-check-circle me-2"></i>
                            Cuenta activa
                        </div>
                        <button class="btn btn-warning w-100" @onclick="DeactivateUser">
                            <i class="fa-light fa-ban me-2"></i>Desactivar cuenta
                        </button>
                    }
                    else
                    {
                        <div class="alert alert-warning mb-3">
                            <i class="fa-light fa-exclamation-triangle me-2"></i>
                            Cuenta inactiva
                        </div>
                        <button class="btn btn-success w-100" @onclick="ActivateUser">
                            <i class="fa-light fa-check me-2"></i>Activar cuenta
                        </button>
                    }
                    
                    @if (currentUser?.LastLoginAt.HasValue == true)
                    {
                        <p class="text-muted small mt-3 mb-0">
                            Último acceso: @currentUser.LastLoginAt.Value.ToString("dd/MM/yyyy HH:mm")
                        </p>
                    }
                </div>
            </div>
            
            <div class="card mt-3">
                <div class="card-body">
                    <h5 class="card-title text-danger mb-3">Zona de peligro</h5>
                    <p class="text-muted">Esta acción no se puede deshacer.</p>
                    <button class="btn btn-danger" @onclick="DeleteUser">
                        <i class="fa-light fa-trash me-2"></i>Eliminar usuario
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public Guid? Id { get; set; }
    
    private UserFormModel model = new();
    private UserDto? currentUser;
    private List<CompanyDto> companies = new();
    private bool isSubmitting = false;
    
    private bool IsEdit => Id.HasValue;
    private List<SelectOption> languageOptions = new()
    {
        new SelectOption("es-CL", "Español (Chile)"),
        new SelectOption("en-US", "English (US)")
      
    };
    

    // private List<(string Value, string Name, string Description)> availableRoles = new()
    // {
    //     ("Administrator", "Administrador", "Control total del sistema y configuración"),
    //     ("ProjectManager", "Jefe de Proyecto", "Gestión completa de proyectos asignados"),
    //     ("ProjectController", "Controlador de Proyecto", "Control y seguimiento de proyectos"),
    //     ("TeamMember", "Miembro del Equipo", "Acceso a tareas y proyectos asignados"),
    //     ("Viewer", "Observador", "Solo lectura de proyectos autorizados")
    // };

    protected override async Task OnInitializedAsync()
    {
        await LoadCompanies();
        
        if (IsEdit)
        {
            await LoadUser();
        }
    }

    private async Task LoadCompanies()
    {
        var response = await CompanyService.GetCompaniesAsync();
        if (response.IsSuccess && response.Data != null)
        {
            companies = response.Data;
        }
    }

    private async Task LoadUser()
    {
        var response = await UserService.GetUserByIdAsync(Id!.Value);
        if (response.IsSuccess && response.Data != null)
        {
            currentUser = response.Data;
            model = new UserFormModel
            {
                Email = currentUser.Email ?? "",
                GivenName = currentUser.GivenName ?? "",
                Surname = currentUser.Surname ?? "",
                JobTitle = currentUser.JobTitle,
                PhoneNumber = currentUser.PhoneNumber,
                PreferredLanguage = currentUser.PreferredLanguage ?? "es-CL"
            };
        }
        else
        {
            await Toast.ShowErrorAsync("Error al cargar el usuario");
            Navigation.NavigateTo("/users");
        }
    }

    private async Task HandleSubmit()
    {
        isSubmitting = true;
        try
        {
            ApiResponse<UserDto> response;
            
            if (IsEdit)
            {
                var updateDto = new UpdateUserDto
                {
                    Name = $"{model.GivenName} {model.Surname}",
                    GivenName = model.GivenName,
                    Surname = model.Surname,
                    JobTitle = model.JobTitle,
                    PhoneNumber = model.PhoneNumber,
                    CompanyId = string.IsNullOrEmpty(model.CompanyId) ? null : model.CompanyId,
                    PreferredLanguage = model.PreferredLanguage
                };
                response = await UserService.UpdateUserAsync(Id!.Value, updateDto);
            }
            else
            {
                var createDto = new CreateUserDto
                {
                    Email = model.Email,
                    Name = $"{model.GivenName} {model.Surname}",
                    GivenName = model.GivenName,
                    Surname = model.Surname,
                    JobTitle = model.JobTitle,
                    PhoneNumber = model.PhoneNumber,
                    PreferredLanguage = model.PreferredLanguage,
                };
                response = await UserService.CreateUserAsync(createDto);
            }

            if (response.IsSuccess)
            {
                await Toast.ShowSuccessAsync($"Usuario {(IsEdit ? "actualizado" : "creado")} exitosamente");
                Navigation.NavigateTo($"/users/{(IsEdit ? Id : response.Data!.Id)}");
            }
            else
            {
                await Toast.ShowErrorAsync(response.Message ?? "Error al guardar el usuario");
            }
        }
        catch (Exception ex)
        {
            await Toast.ShowErrorAsync("Error inesperado al guardar");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task ActivateUser()
    {
        var response = await UserService.ActivateUserAsync(Id!.Value);
        if (response.IsSuccess)
        {
            currentUser = response.Data;
            await Toast.ShowSuccessAsync("Usuario activado");
        }
    }

    private async Task DeactivateUser()
    {
        var response = await UserService.DeactivateUserAsync(Id!.Value);
        if (response.IsSuccess)
        {
            currentUser = response.Data;
            await Toast.ShowSuccessAsync("Usuario desactivado");
        }
    }

    private async Task SyncWithAzureAD()
    {
        isSubmitting = true;
        try
        {
            var response = await UserService.SyncUserWithAzureADAsync(Id!.Value);
            if (response.IsSuccess)
            {
                await Toast.ShowSuccessAsync("Sincronización completada");
                await LoadUser();
            }
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task DeleteUser()
    {
        // TODO: Agregar confirmación
        var response = await UserService.DeleteUserAsync(Id!.Value);
        if (response.IsSuccess)
        {
            await Toast.ShowSuccessAsync("Usuario eliminado");
            Navigation.NavigateTo("/users");
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/users");
    }

    private class UserFormModel
    {
        [Required(ErrorMessage = "El email es requerido")]
        [EmailAddress(ErrorMessage = "Email inválido")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "El nombre es requerido")]
        public string GivenName { get; set; } = "";

        [Required(ErrorMessage = "El apellido es requerido")]
        public string Surname { get; set; } = "";

        public string? JobTitle { get; set; }
        public string? PhoneNumber { get; set; }
        
        [Required(ErrorMessage = "La empresa es requerida")]
        public string? CompanyId { get; set; }
        
        public string PreferredLanguage { get; set; } = "es-CL";
        public string Role { get; set; } = "TeamMember";
    }
}