@page "/profile-simple"
@using Core.DTOs.Auth.Users
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using Web.Services.Interfaces.Auth
@inject IAuthService AuthService
@inject IApiService ApiService
@inject ILoggingService Logger
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JS

<PageTitle>Mi Perfil - EzPro MSD</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="fade-in">
            <!-- Page Header -->
            <MudGrid Class="mb-4">
                <MudItem xs="12">
                    <MudText Typo="Typo.h4" Class="mb-1" Style="font-weight: 700;">
                        Mi Perfil
                    </MudText>
                </MudItem>
            </MudGrid>

            <MudGrid>
                <!-- Profile Card -->
                <MudItem xs="12" md="4">
                    <MudCard>
                        <MudCardContent Class="text-center pa-6">
                            <!-- Avatar -->
                            <MudAvatar Size="Size.Large" Style="width: 120px; height: 120px; margin: 0 auto 1rem;">
                                @if (!string.IsNullOrEmpty(_userPhoto))
                                {
                                    <MudImage Src="@_userPhoto" />
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Large" />
                                }
                            </MudAvatar>
                            
                            <!-- User Name -->
                            <MudText Typo="Typo.h5" Class="mb-1" Style="font-weight: 600;">
                                @_userName
                            </MudText>
                            
                            <!-- User Email -->
                            <MudChip T="string" Icon="@Icons.Material.Filled.Email" Color="Color.Primary" Variant="Variant.Text">
                                @_userEmail
                            </MudChip>
                            
                            @if (_lastSyncTime != null)
                            {
                                <MudText Typo="Typo.caption" Color="Color.Default" Class="mt-2">
                                    <MudIcon Icon="@Icons.Material.Filled.CloudDone" Size="Size.Small" Class="me-1" />
                                    Última sincronización: @_lastSyncTime.Value.ToString("dd/MM/yyyy HH:mm")
                                </MudText>
                            }
                            
                            <MudDivider Class="my-4" />
                            
                            <!-- Actions -->
                            <MudStack Spacing="2">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Sync" 
                                          FullWidth="true" OnClick="SyncWithEntraId" Disabled="@_isSyncing">
                                    @if (_isSyncing)
                                    {
                                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                        <span class="ms-2">Sincronizando...</span>
                                    }
                                    else
                                    {
                                        <span>Sincronizar con Entra ID</span>
                                    }
                                </MudButton>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <!-- Profile Information -->
                <MudItem xs="12" md="8">
                    <MudCard>
                        <MudCardContent>
                            <MudText Typo="Typo.h6" Style="font-weight: 600;" Class="mb-4">
                                Información Personal
                            </MudText>

                            <MudGrid>
                                <MudItem xs="12" sm="6">
                                    <div class="profile-field mb-4">
                                        <MudText Typo="Typo.caption" Color="Color.Default" Class="mb-1">
                                            Nombre Completo
                                        </MudText>
                                        <MudText Typo="Typo.body1">
                                            @_userName
                                        </MudText>
                                    </div>
                                </MudItem>
                                
                                <MudItem xs="12" sm="6">
                                    <div class="profile-field mb-4">
                                        <MudText Typo="Typo.caption" Color="Color.Default" Class="mb-1">
                                            Correo Electrónico
                                        </MudText>
                                        <MudText Typo="Typo.body1">
                                            @_userEmail
                                        </MudText>
                                    </div>
                                </MudItem>
                                
                                <MudItem xs="12" sm="6">
                                    <div class="profile-field mb-4">
                                        <MudText Typo="Typo.caption" Color="Color.Default" Class="mb-1">
                                            Cargo
                                        </MudText>
                                        <MudText Typo="Typo.body1">
                                            @(_userRole ?? "No especificado")
                                        </MudText>
                                    </div>
                                </MudItem>
                                
                                <MudItem xs="12" sm="6">
                                    <div class="profile-field mb-4">
                                        <MudText Typo="Typo.caption" Color="Color.Default" Class="mb-1">
                                            Departamento
                                        </MudText>
                                        <MudText Typo="Typo.body1">
                                            @(_department ?? "No especificado")
                                        </MudText>
                                    </div>
                                </MudItem>
                                
                                <MudItem xs="12" sm="6">
                                    <div class="profile-field mb-4">
                                        <MudText Typo="Typo.caption" Color="Color.Default" Class="mb-1">
                                            Teléfono
                                        </MudText>
                                        <MudText Typo="Typo.body1">
                                            @(_phone ?? "No especificado")
                                        </MudText>
                                    </div>
                                </MudItem>
                                
                                <MudItem xs="12" sm="6">
                                    <div class="profile-field mb-4">
                                        <MudText Typo="Typo.caption" Color="Color.Default" Class="mb-1">
                                            Ubicación
                                        </MudText>
                                        <MudText Typo="Typo.body1">
                                            @(_location ?? "No especificado")
                                        </MudText>
                                    </div>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </div>
    </Authorized>
    <NotAuthorized>
        <MudContainer>
            <MudAlert Severity="Severity.Warning">
                No estás autenticado. Por favor inicia sesión.
                <MudButton Color="Color.Primary" Href="authentication/login" Class="ml-2">
                    Iniciar Sesión
                </MudButton>
            </MudAlert>
        </MudContainer>
    </NotAuthorized>
    <Authorizing>
        <MudContainer>
            <MudCard>
                <MudCardContent Class="text-center pa-8">
                    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" Class="mb-4" />
                    <MudText Typo="Typo.h6">Verificando autenticación...</MudText>
                </MudCardContent>
            </MudCard>
        </MudContainer>
    </Authorizing>
</AuthorizeView>

<style>
    .profile-field {
        padding: 0.5rem 0;
    }
    
    .fade-in {
        animation: fadeIn 0.3s ease-in;
    }
    
    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

@code {
    // User Information
    private UserDto? _currentUser;
    private string _userName = "Usuario";
    private string _userEmail = "usuario@empresa.com";
    private string? _userRole;
    private string? _department;
    private string? _phone;
    private string? _location;
    private string? _userPhoto;
    private bool _isSyncing = false;
    private DateTime? _lastSyncTime = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await JS.InvokeVoidAsync("console.log", "[ProfileSimple] OnInitializedAsync started");
            Logger.LogInfo("Cargando página de perfil simplificada...");
            
            // La autorización se maneja con AuthorizeView, así que solo cargamos el perfil
            await LoadUserProfile();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "[ProfileSimple] Error in OnInitializedAsync:", ex.Message);
            Logger.LogError(ex, "Error al cargar el perfil de usuario");
        }
    }

    private async Task LoadUserProfile()
    {
        try
        {
            await JS.InvokeVoidAsync("console.log", "[ProfileSimple] LoadUserProfile started");
            _currentUser = await AuthService.GetCurrentUserAsync();
            
            if (_currentUser != null)
            {
                await JS.InvokeVoidAsync("console.log", "[ProfileSimple] User loaded:", _currentUser.DisplayName);
                Logger.LogInfo($"Perfil cargado para usuario: {_currentUser.DisplayName}");
                
                // Actualizar información del usuario
                _userName = _currentUser.DisplayName;
                _userEmail = _currentUser.Email;
                _userRole = _currentUser.JobTitle;
                _department = _currentUser.Department;
                _location = _currentUser.OfficeLocation;
                _phone = _currentUser.MobilePhone ?? _currentUser.PhoneNumber;
                
                // Si el usuario ha iniciado sesión recientemente, podríamos inferir una sincronización
                if (_currentUser.LastLoginAt != null)
                {
                    _lastSyncTime = _currentUser.LastLoginAt;
                }
                
                // Cargar foto del usuario si está disponible
                if (!string.IsNullOrEmpty(_currentUser.PhotoUrl))
                {
                    _userPhoto = _currentUser.PhotoUrl;
                }
                
                StateHasChanged();
            }
            else
            {
                await JS.InvokeVoidAsync("console.log", "[ProfileSimple] No user data returned");
                Logger.LogWarning("No se pudo obtener la información del usuario");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "[ProfileSimple] Error loading profile:", ex.Message);
            Logger.LogError(ex, "Error al cargar el perfil del usuario");
        }
    }

    private async Task SyncWithEntraId()
    {
        try
        {
            _isSyncing = true;
            StateHasChanged();
            
            await JS.InvokeVoidAsync("console.log", "[ProfileSimple] Starting sync with Entra ID");
            Logger.LogInfo("Iniciando sincronización con Entra ID...");
            
            // Llamar al endpoint de sincronización en el API
            var syncedUser = await ApiService.PostAsync<object, UserDto>("api/auth/sync", new { });
            
            if (syncedUser != null)
            {
                await JS.InvokeVoidAsync("console.log", "[ProfileSimple] Sync successful:", syncedUser.DisplayName);
                _currentUser = syncedUser;
                
                // Actualizar la información mostrada
                _userName = syncedUser.DisplayName;
                _userEmail = syncedUser.Email;
                _userRole = syncedUser.JobTitle;
                _department = syncedUser.Department;
                _location = syncedUser.OfficeLocation;
                _phone = syncedUser.MobilePhone ?? syncedUser.PhoneNumber;
                
                // Actualizar foto si está disponible
                if (!string.IsNullOrEmpty(syncedUser.PhotoUrl))
                {
                    _userPhoto = syncedUser.PhotoUrl;
                }
                
                // Actualizar tiempo de última sincronización
                _lastSyncTime = DateTime.Now;
                
                Logger.LogInfo("Perfil sincronizado exitosamente con Entra ID");
                StateHasChanged();
            }
            else
            {
                await JS.InvokeVoidAsync("console.log", "[ProfileSimple] Sync returned no data");
                Logger.LogWarning("La sincronización no devolvió datos");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "[ProfileSimple] Sync error:", ex.Message);
            Logger.LogError(ex, "Error durante la sincronización con Entra ID");
        }
        finally
        {
            _isSyncing = false;
            StateHasChanged();
        }
    }
}