@using Core.DTOs.Projects.WorkPackageDetails
@using Core.DTOs.Auth.Users
@using Core.Enums.Progress
@using MudBlazor
@using Web.Services.Interfaces.Projects
@using Web.Services.Interfaces.Auth
@inject IPlanningPackageApiService PlanningPackageService
@inject IUserApiService UserService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@isFormValid">
            <MudGrid>
                <MudItem xs="12">
                    <MudAlert Severity="Severity.Info" Dense="true">
                        <MudText Typo="Typo.body1">
                            Se convertirán <strong>@PlanningPackageCount</strong> paquetes de planificación a paquetes de trabajo.
                        </MudText>
                    </MudAlert>
                </MudItem>

                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-2">Configuración de Conversión</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                        Esta configuración se aplicará a todos los paquetes seleccionados.
                    </MudText>
                </MudItem>

                <MudItem xs="12">
                    <MudSelect T="ProgressMethod"
                               @bind-Value="dto.ProgressMethod"
                               Label="Método de Progreso"
                               Required="true"
                               RequiredError="El método de progreso es requerido"
                               Variant="Variant.Outlined"
                               HelperText="Se aplicará a todos los paquetes">
                        <MudSelectItem Value="ProgressMethod.WeightedActivities">Actividades Ponderadas</MudSelectItem>
                        <MudSelectItem Value="ProgressMethod.Milestones">Hitos</MudSelectItem>
                        <MudSelectItem Value="ProgressMethod.UnitsProduced">Unidades Producidas</MudSelectItem>
                        <MudSelectItem Value="ProgressMethod.DurationBased">Basado en Duración</MudSelectItem>
                    </MudSelect>
                </MudItem>

                <MudItem xs="12">
                    <MudAutocomplete T="UserDto"
                                     @bind-Value="selectedUser"
                                     Label="Usuario Responsable (Opcional)"
                                     SearchFunc="@SearchUsers"
                                     ToStringFunc="@(u => u?.DisplayName ?? string.Empty)"
                                     Variant="Variant.Outlined"
                                     CoerceText="true"
                                     HelperText="Si no se especifica, se mantendrá el responsable actual">
                        <ItemTemplate Context="user">
                            <MudGrid AlignItems="Center">
                                <MudItem xs="2">
                                    <MudAvatar Size="Size.Small">
                                        @if (!string.IsNullOrEmpty(user.PhotoUrl))
                                        {
                                            <MudImage Src="@user.PhotoUrl" />
                                        }
                                        else
                                        {
                                            @user.DisplayName.Substring(0, 1).ToUpper()
                                        }
                                    </MudAvatar>
                                </MudItem>
                                <MudItem xs="10">
                                    <MudText>@user.DisplayName</MudText>
                                    <MudText Typo="Typo.caption">@user.Email</MudText>
                                </MudItem>
                            </MudGrid>
                        </ItemTemplate>
                    </MudAutocomplete>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudDatePicker Label="Fecha de Conversión"
                                   @bind-Date="conversionDate"
                                   Variant="Variant.Outlined"
                                   Editable="true"
                                   DateFormat="dd/MM/yyyy"
                                   DisableFuture="true" />
                </MudItem>

                @* StartProgressTracking property was removed from DTO
                <MudItem xs="12" md="6">
                    <MudSwitch @bind-Value="dto.StartProgressTracking"
                               Label="Iniciar seguimiento de progreso"
                               Color="Color.Primary" />
                </MudItem> *@

                @* Notes property was removed from DTO
                <MudItem xs="12">
                    <MudTextField T="string"
                                  @bind-Value="dto.Notes"
                                  Label="Notas de Conversión"
                                  Lines="3"
                                  Variant="Variant.Outlined"
                                  HelperText="Se agregará a todos los paquetes convertidos" />
                </MudItem> *@

                <MudItem xs="12">
                    <MudAlert Severity="Severity.Warning">
                        <MudText Typo="Typo.body2">
                            <strong>Importante:</strong> Esta operación no se puede deshacer.
                        </MudText>
                        <MudText Typo="Typo.caption" Class="mt-2">
                            • Todos los paquetes seleccionados se convertirán permanentemente<br/>
                            • Se habilitará el seguimiento de progreso para cada paquete<br/>
                            • Se generarán métricas de valor ganado (EVM) individuales
                        </MudText>
                    </MudAlert>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
        <MudButton Color="Color.Primary" 
                   Variant="Variant.Filled" 
                   OnClick="Submit"
                   Disabled="@(!isFormValid || isProcessing)">
            @if (isProcessing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Convirtiendo @processedCount de @PlanningPackageCount...</MudText>
            }
            else
            {
                <MudText>Convertir Todo</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    
    [Parameter] public List<Guid> PlanningPackageIds { get; set; } = new();
    [Parameter] public int PlanningPackageCount { get; set; }

    private MudForm form = default!;
    private bool isFormValid;
    private bool isProcessing;
    private int processedCount = 0;
    
    private ConvertPlanningToWorkPackageDto dto = new()
    {
        ProgressMethod = ProgressMethod.WeightedActivities
        // StartProgressTracking = true // Property removed from DTO
    };
    
    private UserDto? selectedUser;
    private DateTime? conversionDate = DateTime.Today;

    private async Task<IEnumerable<UserDto>> SearchUsers(string value, CancellationToken cancellationToken = default)
    {
        try
        {
            var filter = new UserFilterDto
            {
                SearchTerm = value,
                IsActive = true,
                PageSize = 10
            };
            
            var result = await UserService.SearchUsersAsync(filter);
            return result?.Items ?? new List<UserDto>();
        }
        catch
        {
            return new List<UserDto>();
        }
    }

    private async Task Submit()
    {
        try
        {
            isProcessing = true;
            processedCount = 0;
            
            dto.ResponsibleUserId = selectedUser?.Id;
            // dto.ConversionDate = conversionDate ?? DateTime.Today; // Property not available
            
            var result = await PlanningPackageService.BulkConvertToWorkPackagesAsync(PlanningPackageIds, dto);
            
            if (result != null)
            {
                processedCount = result.SuccessCount;
                
                if (result.SuccessCount == result.TotalCount)
                {
                    Snackbar.Add($"Se convirtieron exitosamente {result.SuccessCount} paquetes de planificación", Severity.Success);
                    MudDialog.Close(DialogResult.Ok(true));
                }
                else if (result.SuccessCount > 0)
                {
                    Snackbar.Add($"Se convirtieron {result.SuccessCount} de {result.TotalCount} paquetes. {result.TotalCount - result.SuccessCount} fallaron.", Severity.Warning);
                    MudDialog.Close(DialogResult.Ok(true));
                }
                else
                {
                    Snackbar.Add("No se pudo convertir ningún paquete de planificación", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Error al realizar la conversión masiva", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void Cancel() => MudDialog.Cancel();
}