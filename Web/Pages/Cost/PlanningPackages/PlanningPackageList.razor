@page "/projects/{ProjectId:guid}/planning-packages"
@using Core.DTOs.Common
@using Core.DTOs.Cost.PlanningPackages
@using Core.DTOs.Cost.ControlAccounts
@using Core.DTOs.Projects
@using MudBlazor
@using Web.Services.Interfaces.Projects
@using Web.Services.Interfaces.Cost
@using Web.Services.Interfaces.Organization
@inject IPlanningPackageApiService PlanningPackageService
@inject IControlAccountApiService ControlAccountService
@inject IProjectApiService ProjectService
@inject INavigationService NavigationService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime

<PageTitle>Paquetes de Planificación | EzPro</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="py-4">
    <MudGrid>
        <!-- Header -->
        <MudItem xs="12">
            <MudPaper Class="pa-4 mb-4" Elevation="0">
                <MudGrid AlignItems="Center">
                    <MudItem xs="12" md="6">
                        <MudText Typo="Typo.h4">
                            <MudIcon Icon="@Icons.Material.Filled.Schedule" Class="mr-2" />
                            Paquetes de Planificación
                        </MudText>
                        @if (project != null)
                        {
                            <MudText Typo="Typo.subtitle1" Color="Color.Secondary">
                                @project.Name
                            </MudText>
                        }
                    </MudItem>
                    <MudItem xs="12" md="6" Class="d-flex justify-end">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   OnClick="@(() => OpenCreateDialog())">
                            Nuevo Paquete
                        </MudButton>
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Download"
                                   OnClick="ExportToExcel"
                                   Class="ml-2">
                            Exportar
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>

        <!-- Filters -->
        <MudItem xs="12">
            <MudPaper Class="pa-4 mb-4">
                <MudGrid>
                    <MudItem xs="12" md="4">
                        <MudTextField T="string"
                                      @bind-Value="searchTerm"
                                      Label="Buscar"
                                      Placeholder="Código, nombre o descripción..."
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Search"
                                      Immediate="true"
                                      DebounceInterval="300"
                                      Variant="Variant.Outlined"
                                      Clearable="true"
                                      OnClearButtonClick="@(() => { searchTerm = string.Empty; LoadData(); })" />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudAutocomplete T="ControlAccountDto"
                                         @bind-Value="selectedControlAccount"
                                         Label="Cuenta de Control"
                                         SearchFunc="@SearchControlAccounts"
                                         ToStringFunc="@(ca => ca?.Code + " - " + ca?.Name)"
                                         Variant="Variant.Outlined"
                                         Clearable="true"
                                         CoerceText="true"
                                         ResetValueOnEmptyText="true"
                                         OnClearButtonClick="@(() => { selectedControlAccount = null; LoadData(); })">
                            <ItemTemplate Context="ca">
                                <MudText>@ca.Code - @ca.Name</MudText>
                            </ItemTemplate>
                        </MudAutocomplete>
                    </MudItem>
                    <MudItem xs="12" md="4" Class="d-flex align-center">
                        <MudSwitch @bind-Value="showOnlyUnconverted"
                                   Label="Solo no convertidos"
                                   Color="Color.Primary" />
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>

        <!-- Budget Summary Card -->
        @if (selectedControlAccount != null && budgetSummary != null)
        {
            <MudItem xs="12">
                <MudPaper Class="pa-4 mb-4">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudText Typo="Typo.h6" Class="mb-2">
                                Resumen de Presupuesto - @selectedControlAccount.Name
                            </MudText>
                        </MudItem>
                        <MudItem xs="12" md="3">
                            <MudText Typo="Typo.caption">Presupuesto Total</MudText>
                            <MudText Typo="Typo.h6">@budgetSummary.TotalBudget.ToString("C")</MudText>
                        </MudItem>
                        <MudItem xs="12" md="3">
                            <MudText Typo="Typo.caption">Presupuesto Asignado</MudText>
                            <MudText Typo="Typo.h6" Color="Color.Success">@budgetSummary.AllocatedBudget.ToString("C")</MudText>
                        </MudItem>
                        <MudItem xs="12" md="3">
                            <MudText Typo="Typo.caption">Presupuesto No Asignado</MudText>
                            <MudText Typo="Typo.h6" Color="Color.Warning">@budgetSummary.UnallocatedBudget.ToString("C")</MudText>
                        </MudItem>
                        <MudItem xs="12" md="3">
                            <MudText Typo="Typo.caption">Paquetes de Planificación</MudText>
                            <MudText Typo="Typo.h6">@budgetSummary.PlanningPackageCount</MudText>
                        </MudItem>
                        <MudItem xs="12" Class="d-flex justify-end">
                            <MudButton Variant="Variant.Outlined"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.Calculate"
                                       OnClick="@(() => OpenRedistributeBudgetDialog())">
                                Redistribuir Presupuesto
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
        }

        <!-- Data Table -->
        <MudItem xs="12">
            <MudPaper>
                <MudTable Items="@planningPackages"
                          Dense="true"
                          Hover="true"
                          Loading="@isLoading"
                          LoadingProgressColor="Color.Primary"
                          @bind-SelectedItem="selectedPlanningPackage"
                          OnRowClick="@((TableRowClickEventArgs<PlanningPackageDto> e) => ViewDetails(e.Item))"
                          RowsPerPage="pageSize"
                          CurrentPage="@((pageNumber - 1))">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Paquetes de Planificación</MudText>
                        <MudSpacer />
                        @if (selectedItems.Count > 0)
                        {
                            <MudButton Variant="Variant.Text"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.Transform"
                                       OnClick="BulkConvertToWorkPackages">
                                Convertir a Paquetes de Trabajo (@selectedItems.Count)
                            </MudButton>
                        }
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>
                            <MudCheckBox T="bool"
                                         Value="@(selectedItems.Count == planningPackages.Count && planningPackages.Any())"
                                         ValueChanged="@(value => SelectAll(value))" />
                        </MudTh>
                        @* <MudTh>Código WBS</MudTh> *@
                        <MudTh>Nombre</MudTh>
                        <MudTh>Cuenta de Control</MudTh>
                        <MudTh Style="text-align:right">Presupuesto</MudTh>
                        <MudTh>Fecha Inicio</MudTh>
                        <MudTh>Fecha Fin</MudTh>
                        <MudTh>Estado</MudTh>
                        <MudTh>Acciones</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <MudCheckBox T="bool"
                                         Value="@(selectedItems.Contains(context.Id))"
                                         ValueChanged="@(value => ToggleSelection(context.Id, value))" />
                        </MudTd>
                        @* WBSCode not available in PlanningPackageDto *@
                        <MudTd DataLabel="Nombre">
                            <MudText Typo="Typo.body2">@context.Name</MudText>
                            @if (!string.IsNullOrWhiteSpace(context.Description))
                            {
                                <MudText Typo="Typo.caption" Color="Color.Secondary">@context.Description</MudText>
                            }
                        </MudTd>
                        <MudTd DataLabel="Cuenta de Control">
                            <MudText Typo="Typo.body2">@context.ControlAccountCode</MudText>
                        </MudTd>
                        <MudTd DataLabel="Presupuesto" Style="text-align:right">
                            <MudText Typo="Typo.body2">@context.Budget.ToString("C")</MudText>
                        </MudTd>
                        <MudTd DataLabel="Fecha Inicio">
                            <MudText Typo="Typo.body2">@context.PlannedStartDate.ToString("dd/MM/yyyy")</MudText>
                        </MudTd>
                        <MudTd DataLabel="Fecha Fin">
                            <MudText Typo="Typo.body2">@context.PlannedEndDate.ToString("dd/MM/yyyy")</MudText>
                        </MudTd>
                        <MudTd DataLabel="Estado">
                            @if (context.IsConverted)
                            {
                                <MudChip T="string" Size="Size.Small" Color="Color.Success">Convertido</MudChip>
                            }
                            else
                            {
                                <MudChip T="string" Size="Size.Small" Color="Color.Warning">Planificación</MudChip>
                            }
                        </MudTd>
                        <MudTd DataLabel="Acciones">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                           Title="Editar"
                                           Size="Size.Small"
                                           OnClick="@(() => OpenEditDialog(context))"
                                           OnClickStopPropagation="true" />
                            @if (!context.IsConverted)
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Transform"
                                               Title="Convertir a Paquete de Trabajo"
                                               Size="Size.Small"
                                               Color="Color.Primary"
                                               OnClick="@(() => ConvertToWorkPackage(context))"
                                               OnClickStopPropagation="true" />
                            }
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                           Title="Eliminar"
                                           Size="Size.Small"
                                           Color="Color.Error"
                                           OnClick="@(() => DeletePlanningPackage(context))"
                                           OnClickStopPropagation="true" />
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }"
                                       RowsPerPageString="Filas por página"
                                       InfoFormat="{first_item}-{last_item} de {all_items}" />
                    </PagerContent>
                </MudTable>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Parameter] public string ProjectId { get; set; } = string.Empty;

    private ProjectDto? project;
    private List<PlanningPackageDto> planningPackages = new();
    private PlanningPackageDto? selectedPlanningPackage;
    private HashSet<Guid> selectedItems = new();
    private Core.DTOs.Cost.PlanningPackages.PlanningPackageBudgetSummaryDto? budgetSummary;
    
    private bool isLoading;
    private string searchTerm = string.Empty;
    private ControlAccountDto? selectedControlAccount;
    private bool showOnlyUnconverted = false;
    
    private int pageNumber = 1;
    private int pageSize = 25;
    private int totalPages;

    protected override async Task OnInitializedAsync()
    {
        await LoadProject();
        await LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Guid.TryParse(ProjectId, out var projectGuid))
        {
            await LoadData();
        }
    }

    private async Task LoadProject()
    {
        if (Guid.TryParse(ProjectId, out var projectGuid))
        {
            project = await ProjectService.GetProjectByIdAsync(projectGuid);
        }
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            planningPackages.Clear();
            budgetSummary = null;

            if (!Guid.TryParse(ProjectId, out var projectGuid))
                return;

            if (showOnlyUnconverted)
            {
                planningPackages = await PlanningPackageService.GetUnconvertedPlanningPackagesAsync(projectGuid);
            }
            else if (selectedControlAccount != null)
            {
                planningPackages = await PlanningPackageService.GetPlanningPackagesByControlAccountAsync(selectedControlAccount.Id);
                budgetSummary = await PlanningPackageService.GetPlanningPackageBudgetSummaryAsync(selectedControlAccount.Id);
            }
            else
            {
                var parameters = new QueryParameters
                {
                    PageNumber = pageNumber,
                    PageSize = pageSize,
                    SearchTerm = searchTerm,
                    SortBy = "WBSCode",
                    SortDirection = "asc"
                };

                var result = await PlanningPackageService.GetPlanningPackagesAsync(projectGuid, parameters);
                planningPackages = result.Items.ToList();
                totalPages = result.TotalPages;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al cargar datos: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task<IEnumerable<ControlAccountDto>> SearchControlAccounts(string value, CancellationToken cancellationToken = default)
    {
        try
        {
            if (!Guid.TryParse(ProjectId, out var projectGuid))
                return new List<ControlAccountDto>();

            var filter = new ControlAccountFilterDto
            {
                ProjectId = projectGuid,
                SearchTerm = value,
                PageSize = 10,
                OnlyActive = true
            };
            
            var result = await ControlAccountService.GetControlAccountsAsync(filter);
            return result?.Items ?? new List<ControlAccountDto>();
        }
        catch
        {
            return new List<ControlAccountDto>();
        }
    }

    private void SelectAll(bool selectAll)
    {
        if (selectAll)
        {
            selectedItems = planningPackages.Select(p => p.Id).ToHashSet();
        }
        else
        {
            selectedItems.Clear();
        }
    }

    private void ToggleSelection(Guid id, bool selected)
    {
        if (selected)
        {
            selectedItems.Add(id);
        }
        else
        {
            selectedItems.Remove(id);
        }
    }

    private void ViewDetails(PlanningPackageDto planningPackage)
    {
        NavigationService.NavigateTo($"/projects/{ProjectId}/planning-packages/{planningPackage.Id}");
    }

    private async Task OpenCreateDialog()
    {
        var parameters = new DialogParameters
        {
            ["ProjectId"] = Guid.Parse(ProjectId),
            ["Mode"] = DialogMode.Create
        };

        var dialog = await DialogService.ShowAsync<PlanningPackageDialog>("Nuevo Paquete de Planificación", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task OpenEditDialog(PlanningPackageDto planningPackage)
    {
        var parameters = new DialogParameters
        {
            ["ProjectId"] = Guid.Parse(ProjectId),
            ["PlanningPackageId"] = planningPackage.Id,
            ["Mode"] = DialogMode.Edit
        };

        var dialog = await DialogService.ShowAsync<PlanningPackageDialog>("Editar Paquete de Planificación", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task OpenRedistributeBudgetDialog()
    {
        if (selectedControlAccount == null || budgetSummary == null)
            return;

        var parameters = new DialogParameters<RedistributeBudgetDialog>
        {
            { x => x.ControlAccountId, selectedControlAccount.Id },
            { x => x.PlanningPackages, planningPackages },
            { x => x.BudgetSummary, budgetSummary }
        };

        var dialog = await DialogService.ShowAsync<RedistributeBudgetDialog>("Redistribuir Presupuesto", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task ConvertToWorkPackage(PlanningPackageDto planningPackage)
    {
        var parameters = new DialogParameters<ConvertPlanningToWorkPackageDialog>
        {
            { x => x.PlanningPackageId, planningPackage.Id },
            { x => x.PlanningPackageName, planningPackage.Name }
        };

        var dialog = await DialogService.ShowAsync<ConvertPlanningToWorkPackageDialog>("Convertir a Paquete de Trabajo", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task BulkConvertToWorkPackages()
    {
        if (!selectedItems.Any())
            return;

        var parameters = new DialogParameters<BulkConvertPlanningPackagesDialog>
        {
            { x => x.PlanningPackageIds, selectedItems.ToList() },
            { x => x.PlanningPackageCount, selectedItems.Count }
        };

        var dialog = await DialogService.ShowAsync<BulkConvertPlanningPackagesDialog>("Conversión Masiva a Paquetes de Trabajo", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            selectedItems.Clear();
            await LoadData();
        }
    }

    private async Task DeletePlanningPackage(PlanningPackageDto planningPackage)
    {
        var result = await DialogService.ShowMessageBox(
            "Eliminar Paquete de Planificación",
            $"¿Está seguro que desea eliminar el paquete de planificación '{planningPackage.Name}'?",
            yesText: "Eliminar",
            cancelText: "Cancelar");

        if (result == true)
        {
            try
            {
                var success = await PlanningPackageService.DeletePlanningPackageAsync(planningPackage.Id);
                if (success)
                {
                    Snackbar.Add("Paquete de planificación eliminado exitosamente", Severity.Success);
                    await LoadData();
                }
                else
                {
                    Snackbar.Add("Error al eliminar el paquete de planificación", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task ExportToExcel()
    {
        try
        {
            if (!Guid.TryParse(ProjectId, out var projectGuid))
                return;

            var data = await PlanningPackageService.ExportPlanningPackagesAsync(projectGuid);
            if (data != null && data.Length > 0)
            {
                var fileName = $"PaquetesPlanificacion_{DateTime.Now:yyyyMMdd_HHmmss}.xlsx";
                await JSRuntime.InvokeVoidAsync(
                    "downloadFile",
                    fileName,
                    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    data);
                
                Snackbar.Add("Exportación completada exitosamente", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al exportar: {ex.Message}", Severity.Error);
        }
    }

    // Enumeración para el modo del diálogo
    private enum DialogMode
    {
        Create,
        Edit
    }
}