@page "/budgets"
@using Core.DTOs.Cost.Budgets
@using Core.DTOs.Common
@using Core.Enums.Cost
@using Web.Services.Interfaces.Cost
@using Web.Services.Interfaces
@inject IBudgetApiService BudgetService
@inject INavigationService Navigation
@inject IToastService Toast
@inject IDialogService DialogService

<PageTitle>Budgets</PageTitle>

<MudBreadcrumbs Items="_breadcrumbs" />

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudGrid>
        <MudItem xs="12" Class="d-flex justify-space-between align-center mb-4">
            <div>
                <MudText Typo="Typo.h4">Budgets</MudText>
                <MudText Typo="Typo.subtitle1" Color="Color.Secondary">Manage project budgets and revisions</MudText>
            </div>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="CreateBudget">
                New Budget
            </MudButton>
        </MudItem>
    </MudGrid>

    <MudPaper Elevation="2" Class="pa-4">
        <MudGrid>
            <MudItem xs="12" md="4">
                <MudTextField @bind-Value="_searchTerm" Label="Search" Placeholder="Search budgets..." 
                             Variant="Variant.Outlined" Adornment="Adornment.Start" 
                             AdornmentIcon="@Icons.Material.Filled.Search" DebounceInterval="300"
                             OnDebounceIntervalElapsed="SearchBudgets" />
            </MudItem>
            <MudItem xs="12" md="3">
                <MudSelect T="string" Label="Status" @bind-Value="_statusFilter" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@("")">All Statuses</MudSelectItem>
                    <MudSelectItem Value="@("Draft")">Draft</MudSelectItem>
                    <MudSelectItem Value="@("PendingApproval")">Pending Approval</MudSelectItem>
                    <MudSelectItem Value="@("Approved")">Approved</MudSelectItem>
                    <MudSelectItem Value="@("Baseline")">Baseline</MudSelectItem>
                    <MudSelectItem Value="@("Locked")">Locked</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="3">
                <MudSwitch @bind-Value="_showBaselinesOnly" Label="Baselines Only" Color="Color.Primary" />
            </MudItem>
            <MudItem xs="12" md="2" Class="d-flex align-end">
                <MudButton Variant="Variant.Outlined" FullWidth OnClick="ResetFilters">
                    Reset
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudPaper Elevation="2" Class="mt-4">
        @if (_loading)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
        }
        
        <MudTable Items="@_budgets" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh>Budget Name</MudTh>
                <MudTh>Project</MudTh>
                <MudTh>Version</MudTh>
                <MudTh>Total Amount</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Created Date</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Budget Name">
                    <MudText>@context.Name</MudText>
                    @if (context.IsBaseline)
                    {
                        <MudChip T="string" Size="Size.Small" Color="Color.Success" Variant="Variant.Text">Baseline</MudChip>
                    }
                </MudTd>
                <MudTd DataLabel="Project">@context.ProjectName</MudTd>
                <MudTd DataLabel="Version">@context.Version</MudTd>
                <MudTd DataLabel="Total Amount">
                    <MudText>@context.TotalAmount.ToString("C")</MudText>
                </MudTd>
                <MudTd DataLabel="Status">
                    <MudChip T="string" Size="Size.Small" Color="@GetStatusColor(context.Status.ToString())" Variant="Variant.Text">
                        @context.Status.ToString()
                    </MudChip>
                </MudTd>
                <MudTd DataLabel="Created Date">@context.CreatedAt.ToString("yyyy-MM-dd")</MudTd>
                <MudTd DataLabel="Actions">
                    <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Primary" Size="Size.Small" 
                                   OnClick="@(() => ViewBudget(context.Id))" Title="View" />
                    @if (context.Status == BudgetStatus.Draft)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Secondary" Size="Size.Small" 
                                       OnClick="@(() => EditBudget(context.Id))" Title="Edit" />
                        <MudIconButton Icon="@Icons.Material.Filled.Send" Color="Color.Success" Size="Size.Small" 
                                       OnClick="@(() => SubmitForApproval(context))" Title="Submit for Approval" />
                    }
                    @if (context.Status == BudgetStatus.PendingApproval)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Small" 
                                       OnClick="@(() => ApproveBudget(context))" Title="Approve" />
                        <MudIconButton Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" Size="Size.Small" 
                                       OnClick="@(() => RejectBudget(context))" Title="Reject" />
                    }
                    @if (context.Status == BudgetStatus.Approved && !context.IsBaseline)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Flag" Color="Color.Warning" Size="Size.Small" 
                                       OnClick="@(() => SetAsBaseline(context))" Title="Set as Baseline" />
                    }
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" 
                                   OnClick="@(() => DeleteBudget(context))" Title="Delete" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudPaper>
</MudContainer>

@code {
    private List<BreadcrumbItem> _breadcrumbs = new()
    {
        new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Cost Management", href: null, disabled: true),
        new BreadcrumbItem("Budgets", href: "/budgets", disabled: true)
    };

    private List<BudgetDto> _budgets = new();
    private bool _loading = false;
    private string _searchTerm = string.Empty;
    private string _statusFilter = string.Empty;
    private bool _showBaselinesOnly = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadBudgets();
    }

    private async Task LoadBudgets()
    {
        _loading = true;
        try
        {
            var filter = new BudgetFilterDto
            {
                SearchTerm = _searchTerm,
                Status = _statusFilter,
                IsBaseline = _showBaselinesOnly ? true : null,
                PageSize = 50
            };

            var result = await BudgetService.GetBudgetsAsync(filter);
            _budgets = result?.Items?.ToList() ?? new List<BudgetDto>();
        }
        catch (Exception ex)
        {
            Toast.ShowError("Error loading budgets");
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task SearchBudgets(string searchTerm)
    {
        _searchTerm = searchTerm;
        await LoadBudgets();
    }

    private async Task ResetFilters()
    {
        _searchTerm = string.Empty;
        _statusFilter = string.Empty;
        _showBaselinesOnly = false;
        await LoadBudgets();
    }

    private void CreateBudget()
    {
        Navigation.NavigateTo("/budgets/new");
    }

    private void ViewBudget(Guid id)
    {
        Navigation.NavigateTo($"/budgets/{id}");
    }

    private void EditBudget(Guid id)
    {
        Navigation.NavigateTo($"/budgets/{id}/edit");
    }

    private async Task SubmitForApproval(BudgetDto budget)
    {
        var confirm = await DialogService.ShowMessageBox(
            "Submit for Approval",
            $"Are you sure you want to submit budget '{budget.Name}' for approval?",
            yesText: "Submit", cancelText: "Cancel");

        if (confirm == true)
        {
            _loading = true;
            try
            {
                var success = await BudgetService.SubmitBudgetForApprovalAsync(budget.Id);
                if (success)
                {
                    Toast.ShowSuccess("Budget submitted for approval");
                    await LoadBudgets();
                }
                else
                {
                    Toast.ShowError("Failed to submit budget for approval");
                }
            }
            catch (Exception ex)
            {
                Toast.ShowError("Error submitting budget for approval");
            }
            finally
            {
                _loading = false;
            }
        }
    }

    private async Task ApproveBudget(BudgetDto budget)
    {
        var parameters = new DialogParameters<BudgetApprovalDialog>
        {
            { x => x.BudgetName, budget.Name },
            { x => x.IsApproval, true }
        };

        var dialog = await DialogService.ShowAsync<BudgetApprovalDialog>("Approve Budget", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is string comments)
        {
            _loading = true;
            try
            {
                var dto = new ApproveBudgetDto { Comments = comments };
                var success = await BudgetService.ApproveBudgetAsync(budget.Id, dto);
                if (success)
                {
                    Toast.ShowSuccess("Budget approved successfully");
                    await LoadBudgets();
                }
                else
                {
                    Toast.ShowError("Failed to approve budget");
                }
            }
            catch (Exception ex)
            {
                Toast.ShowError("Error approving budget");
            }
            finally
            {
                _loading = false;
            }
        }
    }

    private async Task RejectBudget(BudgetDto budget)
    {
        var parameters = new DialogParameters<BudgetApprovalDialog>
        {
            { x => x.BudgetName, budget.Name },
            { x => x.IsApproval, false }
        };

        var dialog = await DialogService.ShowAsync<BudgetApprovalDialog>("Reject Budget", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is string reason)
        {
            _loading = true;
            try
            {
                var dto = new RejectBudgetDto { Reason = reason };
                var success = await BudgetService.RejectBudgetAsync(budget.Id, dto);
                if (success)
                {
                    Toast.ShowSuccess("Budget rejected");
                    await LoadBudgets();
                }
                else
                {
                    Toast.ShowError("Failed to reject budget");
                }
            }
            catch (Exception ex)
            {
                Toast.ShowError("Error rejecting budget");
            }
            finally
            {
                _loading = false;
            }
        }
    }

    private async Task SetAsBaseline(BudgetDto budget)
    {
        var confirm = await DialogService.ShowMessageBox(
            "Set as Baseline",
            $"Are you sure you want to set budget '{budget.Name}' as the baseline? This will replace any existing baseline.",
            yesText: "Set Baseline", cancelText: "Cancel");

        if (confirm == true)
        {
            _loading = true;
            try
            {
                var success = await BudgetService.SetBudgetAsBaselineAsync(budget.Id);
                if (success)
                {
                    Toast.ShowSuccess("Budget set as baseline");
                    await LoadBudgets();
                }
                else
                {
                    Toast.ShowError("Failed to set budget as baseline");
                }
            }
            catch (Exception ex)
            {
                Toast.ShowError("Error setting budget as baseline");
            }
            finally
            {
                _loading = false;
            }
        }
    }

    private async Task DeleteBudget(BudgetDto budget)
    {
        var confirm = await DialogService.ShowMessageBox(
            "Delete Budget",
            $"Are you sure you want to delete budget '{budget.Name}'? This action cannot be undone.",
            yesText: "Delete", cancelText: "Cancel");

        if (confirm == true)
        {
            _loading = true;
            try
            {
                var success = await BudgetService.DeleteBudgetAsync(budget.Id);
                if (success)
                {
                    Toast.ShowSuccess("Budget deleted successfully");
                    await LoadBudgets();
                }
                else
                {
                    Toast.ShowError("Failed to delete budget");
                }
            }
            catch (Exception ex)
            {
                Toast.ShowError("Error deleting budget");
            }
            finally
            {
                _loading = false;
            }
        }
    }

    private Color GetStatusColor(string status)
    {
        return status switch
        {
            "Draft" => Color.Default,
            "Submitted" => Color.Info,
            "Approved" => Color.Success,
            "Baseline" => Color.Primary,
            "Locked" => Color.Warning,
            _ => Color.Default
        };
    }
}