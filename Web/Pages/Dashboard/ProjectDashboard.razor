@page "/projects/{Id:guid}/dashboard"
@inject IProjectService ProjectService
@inject NavigationManager Navigation
@inject IToastService ToastService
@inject IJSRuntime JS
@attribute [Authorize]

<PageTitle>Dashboard - @project?.Name - EzPro</PageTitle>

@if (isLoading)
{
    <EzLoadingIndicator IsLoading="true" Message="Cargando dashboard..." />
}
else if (project != null && summary != null)
{
    <div class="page-header">
        <div class="row align-items-center">
            <div class="col">
                <h1 class="page-title">
                    <i class="fa-light fa-chart-line me-2"></i>Dashboard del Proyecto
                </h1>
                <p class="page-subtitle">@project.Name</p>
            </div>
            <div class="col-auto">
                <div class="btn-group">
                    <button class="btn btn-light" @onclick="ExportReport">
                        <i class="fa-light fa-download me-2"></i>Exportar
                    </button>
                    <button class="btn btn-light" @onclick="RefreshData">
                        <i class="fa-light fa-sync me-2"></i>Actualizar
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- KPIs Principales -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-2">Progreso General</h6>
                            <h2 class="mb-0">@summary.ProgressPercentage%</h2>
                        </div>
                        <div class="icon-box bg-primary-subtle text-primary">
                            <i class="fa-light fa-chart-pie fa-2x"></i>
                        </div>
                    </div>
                    <div class="progress mt-3" style="height: 5px;">
                        <div class="progress-bar bg-primary" style="width: @summary.ProgressPercentage%"></div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-2">CPI</h6>
                            <h2 class="mb-0 @GetCPIColor(summary.CostPerformanceIndex)">
                                @summary.CostPerformanceIndex.ToString("F2")
                            </h2>
                        </div>
                        <div class="icon-box bg-success-subtle text-success">
                            <i class="fa-light fa-dollar-sign fa-2x"></i>
                        </div>
                    </div>
                    <small class="text-muted">
                        @if (summary.CostPerformanceIndex >= 1)
                        {
                            <text>Dentro del presupuesto</text>
                        }
                        else
                        {
                            <text>Sobre el presupuesto</text>
                        }
                    </small>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-2">SPI</h6>
                            <h2 class="mb-0 @GetSPIColor(summary.SchedulePerformanceIndex)">
                                @summary.SchedulePerformanceIndex.ToString("F2")
                            </h2>
                        </div>
                        <div class="icon-box bg-info-subtle text-info">
                            <i class="fa-light fa-clock fa-2x"></i>
                        </div>
                    </div>
                    <small class="text-muted">
                        @if (summary.SchedulePerformanceIndex >= 1)
                        {
                            <text>A tiempo</text>
                        }
                        else
                        {
                            <text>Retrasado</text>
                        }
                    </small>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="text-muted mb-2">Días Restantes</h6>
                            <h2 class="mb-0 @(summary.IsOverdue ? "text-danger" : "")">
                                @(summary.IsOverdue ? $"-{summary.DaysOverdue}" : summary.DaysRemaining.ToString())
                            </h2>
                        </div>
                        <div class="icon-box bg-warning-subtle text-warning">
                            <i class="fa-light fa-calendar-alt fa-2x"></i>
                        </div>
                    </div>
                    <small class="text-muted">
                        Hasta @project.PlannedEndDate.ToString("dd/MM/yyyy")
                    </small>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Gráfico de Avance (Curva S) -->
        <div class="col-lg-8">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">Curva S - Avance del Proyecto</h5>
                </div>
                <div class="card-body">
                    <canvas id="sCurveChart" height="300"></canvas>
                </div>
            </div>
        </div>

        <!-- Estado del Presupuesto -->
        <div class="col-lg-4">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">Estado del Presupuesto</h5>
                </div>
                <div class="card-body">
                    <canvas id="budgetChart" height="300"></canvas>
                    <div class="mt-3">
                        <div class="d-flex justify-content-between mb-2">
                            <span>Presupuesto Total</span>
                            <strong>@project.Currency @project.TotalBudget.ToString("N0")</strong>
                        </div>
                        @if (project.ActualCost.HasValue)
                        {
                            <div class="d-flex justify-content-between mb-2">
                                <span>Costo Actual</span>
                                <strong class="@(project.ActualCost > project.TotalBudget ? "text-danger" : "")">
                                    @project.Currency @project.ActualCost.Value.ToString("N0")
                                </strong>
                            </div>
                            <div class="d-flex justify-content-between">
                                <span>Variación</span>
                                <strong class="@(project.ActualCost > project.TotalBudget ? "text-danger" : "text-success")">
                                    @((project.TotalBudget - project.ActualCost.Value).ToString("N0"))
                                </strong>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Distribución del Equipo -->
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">Equipo del Proyecto</h5>
                    <span class="badge bg-primary">@summary.ActiveTeamMembers activos</span>
                </div>
                <div class="card-body">
                    <canvas id="teamChart" height="200"></canvas>
                    <div class="mt-3 text-center">
                        <p class="text-muted mb-0">
                            Utilización del equipo: <strong>@summary.TeamUtilization.ToString("F1")%</strong>
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Progreso por Fases -->
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">Progreso por Fases</h5>
                </div>
                <div class="card-body">
                    <div class="phase-progress">
                        @for (int i = 0; i < summary.TotalPhases; i++)
                        {
                            var isCompleted = i < summary.CompletedPhases;
                            var isCurrent = i == summary.CompletedPhases;
                            <div class="phase-item @(isCompleted ? "completed" : "") @(isCurrent ? "current" : "")">
                                <div class="phase-icon">
                                    @if (isCompleted)
                                    {
                                        <i class="fa-light fa-check"></i>
                                    }
                                    else if (isCurrent)
                                    {
                                        <i class="fa-light fa-spinner fa-spin"></i>
                                    }
                                    else
                                    {
                                        <i class="fa-light fa-circle"></i>
                                    }
                                </div>
                                <div class="phase-name">Fase @(i + 1)</div>
                            </div>
                        }
                    </div>
                    <div class="progress mt-4" style="height: 20px;">
                        <div class="progress-bar bg-success"
                             style="width: @summary.PhaseProgress%">
                            @summary.CompletedPhases / @summary.TotalPhases
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Métricas Adicionales -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Métricas de Valor Ganado (EVM)</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Métrica</th>
                                    <th>Valor</th>
                                    <th>Descripción</th>
                                    <th>Estado</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td><strong>BAC</strong></td>
                                    <td>@project.Currency @project.TotalBudget.ToString("N0")</td>
                                    <td>Presupuesto al Completar</td>
                                    <td>-</td>
                                </tr>
                                <tr>
                                    <td><strong>CPI</strong></td>
                                    <td>@summary.CostPerformanceIndex.ToString("F2")</td>
                                    <td>Índice de Desempeño del Costo</td>
                                    <td>
                                        <span class="badge @(summary.CostPerformanceIndex >= 1 ? "bg-success" : "bg-danger")">
                                            @(summary.CostPerformanceIndex >= 1 ? "Bueno" : "Atención")
                                        </span>
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>SPI</strong></td>
                                    <td>@summary.SchedulePerformanceIndex.ToString("F2")</td>
                                    <td>Índice de Desempeño del Cronograma</td>
                                    <td>
                                        <span class="badge @(summary.SchedulePerformanceIndex >= 1 ? "bg-success" : "bg-danger")">
                                            @(summary.SchedulePerformanceIndex >= 1 ? "Bueno" : "Atención")
                                        </span>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public Guid Id { get; set; }

    private ProjectDto? project;
    private ProjectSummaryDto? summary;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && project != null && summary != null)
        {
            await InitializeCharts();
        }
    }

    private async Task LoadData()
    {
        isLoading = true;

        try
        {
            var projectResponse = await ProjectService.GetProjectByIdAsync(Id);
            var summaryResponse = await ProjectService.GetProjectSummaryAsync(Id);

            if (projectResponse.Success && summaryResponse.Success)
            {
                project = projectResponse.Data;
                summary = summaryResponse.Data;
            }
            else
            {
                ToastService.ShowError("No se pudo cargar el dashboard");
                Navigation.NavigateTo($"/projects/{Id}");
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task InitializeCharts()
    {
        await JS.InvokeVoidAsync("initializeProjectDashboardCharts",
            summary!.ProgressPercentage,
            summary.CostPerformanceIndex,
            summary.SchedulePerformanceIndex,
            summary.BudgetUtilization);
    }

    private async Task RefreshData()
    {
        await LoadData();
        if (project != null && summary != null)
        {
            await InitializeCharts();
        }
    }

    private async Task ExportReport()
    {
        ToastService.ShowInfo("Generando reporte del proyecto...");
        // TODO: Implementar exportación
    }

    private string GetCPIColor(decimal cpi)
    {
        if (cpi < 0.9m) return "text-danger";
        if (cpi < 1.0m) return "text-warning";
        return "text-success";
    }

    private string GetSPIColor(decimal spi)
    {
        if (spi < 0.9m) return "text-danger";
        if (spi < 1.0m) return "text-warning";
        return "text-success";
    }
}

<style>
    .icon-box {
        width: 60px;
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 12px;
    }

    .phase-progress {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .phase-item {
        text-align: center;
        flex: 1;
        position: relative;
    }

        .phase-item:not(:last-child)::after {
            content: '';
            position: absolute;
            top: 20px;
            left: 50%;
            width: 100%;
            height: 2px;
            background-color: var(--bs-gray-300);
        }

        .phase-item.completed:not(:last-child)::after {
            background-color: var(--bs-success);
        }

    .phase-icon {
        width: 40px;
        height: 40px;
        background-color: var(--bs-gray-200);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 0.5rem;
        position: relative;
        z-index: 1;
    }

    .phase-item.completed .phase-icon {
        background-color: var(--bs-success);
        color: white;
    }

    .phase-item.current .phase-icon {
        background-color: var(--bs-primary);
        color: white;
    }

    .phase-name {
        font-size: 0.875rem;
        color: var(--bs-gray-600);
    }
</style>