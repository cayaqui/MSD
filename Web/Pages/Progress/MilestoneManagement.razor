@page "/progress/milestones/{ProjectId:guid}"
@using Core.DTOs.Progress.Milestones
@using Core.DTOs.Projects.WBSElement
@using Core.Enums
@using Core.Enums.Progress
@using Web.Services.Interfaces.Progress
@using Web.Services.Interfaces.Projects
@inject IMilestoneApiService MilestoneService
@inject IWBSApiService WBSService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager Navigation

<PageTitle>Gestión de Hitos</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
    <MudBreadcrumbs Items="_breadcrumbs" />
    
    <MudPaper Class="pa-4 mb-4">
        <MudGrid>
            <MudGrid xs="12" md="8">
                <MudText Typo="Typo.h4" Class="mb-2">
                    <MudIcon Icon="@Icons.Material.Filled.Flag" Class="mr-2" />
                    Gestión de Hitos
                </MudText>
                <MudText Typo="Typo.body1" Color="Color.Secondary">
                    Administre los hitos clave del proyecto
                </MudText>
            </MudGrid>
            <MudGrid xs="12" md="4" Class="d-flex justify-end align-center">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="CreateMilestone">
                    Nuevo Hito
                </MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" 
                           StartIcon="@Icons.Material.Filled.Dashboard"
                           OnClick="ViewDashboard"
                           Class="ml-2">
                    Dashboard
                </MudButton>
            </MudGrid>
        </MudGrid>
    </MudPaper>

    @if (_dashboard != null)
    {
        <MudGrid Class="mb-4">
            <MudItem xs="12" md="3">
                <MudPaper Class="pa-4 text-center">
                    <MudIcon Icon="@Icons.Material.Filled.Flag" Size="Size.Large" Color="Color.Primary" />
                    <MudText Typo="Typo.h6">@_dashboard.TotalMilestones</MudText>
                    <MudText Typo="Typo.body2">Total Hitos</MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" md="3">
                <MudPaper Class="pa-4 text-center">
                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Large" Color="Color.Success" />
                    <MudText Typo="Typo.h6">@_dashboard.CompletedMilestones</MudText>
                    <MudText Typo="Typo.body2">Completados</MudText>
                    <MudProgressLinear Value="@_dashboard.CompletionPercentage" Color="Color.Success" Class="mt-2" />
                </MudPaper>
            </MudItem>
            <MudItem xs="12" md="3">
                <MudPaper Class="pa-4 text-center">
                    <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Large" Color="Color.Warning" />
                    <MudText Typo="Typo.h6">@_dashboard.UpcomingMilestones</MudText>
                    <MudText Typo="Typo.body2">Próximos 30 días</MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" md="3">
                <MudPaper Class="pa-4 text-center">
                    <MudIcon Icon="@Icons.Material.Filled.Warning" Size="Size.Large" Color="Color.Error" />
                    <MudText Typo="Typo.h6">@_dashboard.OverdueMilestones</MudText>
                    <MudText Typo="Typo.body2">Vencidos</MudText>
                </MudPaper>
            </MudItem>
        </MudGrid>
    }

    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-4">
        <MudTabPanel Text="Todos los Hitos" Icon="@Icons.Material.Filled.List">
            <MudTable Items="_milestones" Dense="true" Hover="true" Loading="_loading">
                <HeaderContent>
                    <MudTh>Código</MudTh>
                    <MudTh>Nombre</MudTh>
                    <MudTh>WBS</MudTh>
                    <MudTh>Tipo</MudTh>
                    <MudTh>Fecha Objetivo</MudTh>
                    <MudTh>Estado</MudTh>
                    <MudTh>Progreso</MudTh>
                    <MudTh>Acciones</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Código">
                        <MudText>@context.MilestoneCode</MudText>
                        @if (context.IsCritical)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Error" Size="Size.Small" 
                                     Title="Hito Crítico" />
                        }
                        @if (context.IsContractual)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Description" Color="Color.Info" Size="Size.Small" 
                                     Title="Hito Contractual" />
                        }
                    </MudTd>
                    <MudTd DataLabel="Nombre">@context.Name</MudTd>
                    <MudTd DataLabel="WBS">@context.WBSElementCode</MudTd>
                    <MudTd DataLabel="Tipo">@GetMilestoneTypeDisplay(context.MilestoneType)</MudTd>
                    <MudTd DataLabel="Fecha Objetivo">
                        <MudText Color="@GetDateColor(context.TargetDate, context.Status)">
                            @context.TargetDate.ToShortDateString()
                        </MudText>
                    </MudTd>
                    <MudTd DataLabel="Estado">
                        <MudChip Color="@GetStatusColor(context.Status)" Size="Size.Small">
                            @GetStatusDisplay(context.Status)
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="Progreso">
                        <MudProgressLinear Value="@((double)context.ProgressPercentage)" 
                                           Color="@GetProgressColor(context.ProgressPercentage)">
                            <MudText Typo="Typo.body2">@context.ProgressPercentage%</MudText>
                        </MudProgressLinear>
                    </MudTd>
                    <MudTd DataLabel="Acciones">
                        <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small">
                            <MudMenuItem Icon="@Icons.Material.Filled.Visibility" OnClick="() => ViewMilestoneDetails(context.Id)">
                                Ver Detalles
                            </MudMenuItem>
                            <MudMenuItem Icon="@Icons.Material.Filled.Edit" OnClick="() => EditMilestone(context.Id)">
                                Editar
                            </MudMenuItem>
                            
                            @if (context.Status == MilestoneStatus.Pending)
                            {
                                <MudMenuItem Icon="@Icons.Material.Filled.Update" OnClick="() => UpdateProgress(context.Id)">
                                    Actualizar Progreso
                                </MudMenuItem>
                            }
                            
                            @if (context.Status == MilestoneStatus.Pending && context.ProgressPercentage == 100)
                            {
                                <MudMenuItem Icon="@Icons.Material.Filled.CheckCircle" OnClick="() => CompleteMilestone(context.Id)">
                                    Completar
                                </MudMenuItem>
                            }
                            
                            @if (context.Status == MilestoneStatus.Completed && !context.IsApproved)
                            {
                                <MudMenuItem Icon="@Icons.Material.Filled.Approval" OnClick="() => ApproveMilestone(context.Id)">
                                    Aprobar
                                </MudMenuItem>
                            }
                            
                            @if (context.PaymentAmount > 0 && context.Status == MilestoneStatus.Approved && !context.IsPaymentTriggered)
                            {
                                <MudMenuItem Icon="@Icons.Material.Filled.Payment" OnClick="() => TriggerPayment(context.Id)">
                                    Activar Pago
                                </MudMenuItem>
                            }
                            
                            <MudDivider />
                            
                            <MudMenuItem Icon="@Icons.Material.Filled.AccountTree" OnClick="() => ManageDependencies(context.Id)">
                                Dependencias
                            </MudMenuItem>
                            
                            @if (context.PaymentAmount == 0)
                            {
                                <MudMenuItem Icon="@Icons.Material.Filled.AttachMoney" OnClick="() => SetPaymentTerms(context.Id)">
                                    Términos de Pago
                                </MudMenuItem>
                            }
                            
                            <MudDivider />
                            
                            <MudMenuItem Icon="@Icons.Material.Filled.Delete" OnClick="() => DeleteMilestone(context.Id)">
                                Eliminar
                            </MudMenuItem>
                        </MudMenu>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudTabPanel>
        
        <MudTabPanel Text="Hitos Próximos" Icon="@Icons.Material.Filled.Schedule">
            <MudTimeline TimelineOrientation="TimelineOrientation.Vertical">
                @foreach (var milestone in _upcomingMilestones)
                {
                    <MudTimelineItem Color="Color.Warning" Size="Size.Small">
                        <ItemOpposite>
                            <MudText Typo="Typo.body2">@milestone.TargetDate.ToShortDateString()</MudText>
                        </ItemOpposite>
                        <ItemContent>
                            <MudCard>
                                <MudCardContent>
                                    <MudText Typo="Typo.h6">@milestone.Name</MudText>
                                    <MudText Typo="Typo.body2">@milestone.Description</MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        @GetDaysUntilDue(milestone.TargetDate) días restantes
                                    </MudText>
                                </MudCardContent>
                            </MudCard>
                        </ItemContent>
                    </MudTimelineItem>
                }
            </MudTimeline>
        </MudTabPanel>
        
        <MudTabPanel Text="Hitos Vencidos" Icon="@Icons.Material.Filled.Warning" BadgeData="@_overdueMilestones.Count" BadgeColor="Color.Error">
            @if (_overdueMilestones.Any())
            {
                <MudAlert Severity="Severity.Warning" Class="mb-4">
                    Hay @_overdueMilestones.Count hitos vencidos que requieren atención inmediata.
                </MudAlert>
                
                @foreach (var milestone in _overdueMilestones)
                {
                    <MudCard Class="mb-2">
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="12" md="8">
                                    <MudText Typo="Typo.h6">@milestone.Name</MudText>
                                    <MudText Typo="Typo.body2">@milestone.Description</MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Error">
                                        Vencido hace @GetDaysOverdue(milestone.TargetDate) días
                                    </MudText>
                                </MudItem>
                                <MudItem xs="12" md="4" Class="d-flex justify-end align-center">
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small"
                                               OnClick="() => UpdateProgress(milestone.Id)">
                                        Actualizar
                                    </MudButton>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                }
            }
            else
            {
                <MudAlert Severity="Severity.Success">
                    No hay hitos vencidos. ¡Excelente trabajo!
                </MudAlert>
            }
        </MudTabPanel>
        
        <MudTabPanel Text="Resumen de Pagos" Icon="@Icons.Material.Filled.AttachMoney">
            @if (_paymentSummary != null)
            {
                <MudGrid>
                    <MudItem xs="12" md="4">
                        <MudPaper Class="pa-4">
                            <MudText Typo="Typo.h6">Total Contratado</MudText>
                            <MudText Typo="Typo.h4" Color="Color.Primary">
                                @_paymentSummary.Currency @_paymentSummary.TotalPaymentAmount.ToString("N2")
                            </MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudPaper Class="pa-4">
                            <MudText Typo="Typo.h6">Pagos Activados</MudText>
                            <MudText Typo="Typo.h4" Color="Color.Success">
                                @_paymentSummary.Currency @_paymentSummary.TriggeredPaymentAmount.ToString("N2")
                            </MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudPaper Class="pa-4">
                            <MudText Typo="Typo.h6">Pendiente</MudText>
                            <MudText Typo="Typo.h4" Color="Color.Warning">
                                @_paymentSummary.Currency @_paymentSummary.PendingPaymentAmount.ToString("N2")
                            </MudText>
                            <MudProgressLinear Value="@((double)_paymentSummary.PaymentProgress)" 
                                               Color="Color.Success" Class="mt-2" />
                        </MudPaper>
                    </MudItem>
                </MudGrid>
                
                <MudTable Items="_milestonesWithPayment" Dense="true" Hover="true" Class="mt-4">
                    <HeaderContent>
                        <MudTh>Hito</MudTh>
                        <MudTh>Monto</MudTh>
                        <MudTh>Estado</MudTh>
                        <MudTh>Pago</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Name</MudTd>
                        <MudTd>@context.PaymentCurrency @context.PaymentAmount.ToString("N2")</MudTd>
                        <MudTd>
                            <MudChip Color="@GetStatusColor(context.Status)" Size="Size.Small">
                                @GetStatusDisplay(context.Status)
                            </MudChip>
                        </MudTd>
                        <MudTd>
                            @if (context.IsPaymentTriggered)
                            {
                                <MudChip Color="Color.Success" Size="Size.Small">Activado</MudChip>
                            }
                            else
                            {
                                <MudChip Color="Color.Default" Size="Size.Small">Pendiente</MudChip>
                            }
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </MudTabPanel>
    </MudTabs>
</MudContainer>

@code {
    [Parameter] public Guid ProjectId { get; set; }
    
    private List<BreadcrumbItem> _breadcrumbs = new();
    private List<MilestoneDto> _milestones = new();
    private List<MilestoneDto> _upcomingMilestones = new();
    private List<MilestoneDto> _overdueMilestones = new();
    private List<MilestoneDto> _milestonesWithPayment = new();
    private MilestoneDashboardDto? _dashboard;
    private PaymentSummaryDto? _paymentSummary;
    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        _breadcrumbs = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Inicio", href: "/", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem("Proyectos", href: "/projects"),
            new BreadcrumbItem("Progreso", href: $"/projects/{ProjectId}"),
            new BreadcrumbItem("Hitos", href: null, disabled: true)
        };

        await LoadData();
    }

    private async Task LoadData()
    {
        _loading = true;

        try
        {
            // Load dashboard
            _dashboard = await MilestoneService.GetMilestoneDashboardAsync(ProjectId);
            
            // Load all milestones
            var filter = new MilestoneFilterDto
            {
                ProjectId = ProjectId,
                PageSize = 100,
                SortBy = "TargetDate"
            };
            
            var result = await MilestoneService.GetMilestonesAsync(filter);
            _milestones = result.Items;
            
            // Load specific milestone lists
            _upcomingMilestones = await MilestoneService.GetUpcomingMilestonesAsync(ProjectId);
            _overdueMilestones = await MilestoneService.GetOverdueMilestonesAsync(ProjectId);
            
            // Load payment summary
            _paymentSummary = await MilestoneService.GetPaymentSummaryAsync(ProjectId);
            
            // Filter milestones with payment
            _milestonesWithPayment = _milestones.Where(m => m.PaymentAmount > 0).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al cargar los hitos: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task CreateMilestone()
    {
        var parameters = new DialogParameters
        {
            ["ProjectId"] = ProjectId
        };

        var dialog = await DialogService.ShowAsync<CreateMilestoneDialog>("Nuevo Hito", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
        }
    }

    private void ViewDashboard()
    {
        Navigation.NavigateTo($"/progress/milestones/{ProjectId}/dashboard");
    }

    private void ViewMilestoneDetails(Guid milestoneId)
    {
        Navigation.NavigateTo($"/progress/milestones/{ProjectId}/details/{milestoneId}");
    }

    private async Task EditMilestone(Guid milestoneId)
    {
        var milestone = _milestones.FirstOrDefault(m => m.Id == milestoneId);
        if (milestone != null)
        {
            var parameters = new DialogParameters
            {
                ["Milestone"] = milestone
            };

            var dialog = await DialogService.ShowAsync<EditMilestoneDialog>("Editar Hito", parameters);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                await LoadData();
            }
        }
    }

    private async Task UpdateProgress(Guid milestoneId)
    {
        var milestone = _milestones.FirstOrDefault(m => m.Id == milestoneId);
        if (milestone != null)
        {
            var parameters = new DialogParameters
            {
                ["Milestone"] = milestone
            };

            var dialog = await DialogService.ShowAsync<UpdateMilestoneProgressDialog>("Actualizar Progreso", parameters);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                await LoadData();
            }
        }
    }

    private async Task CompleteMilestone(Guid milestoneId)
    {
        var parameters = new DialogParameters();
        var dialog = await DialogService.ShowAsync<CompleteMilestoneDialog>("Completar Hito", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                var dto = (CompleteMilestoneDto)result.Data;
                await MilestoneService.CompleteMilestoneAsync(milestoneId, dto);
                Snackbar.Add("Hito completado exitosamente", Severity.Success);
                await LoadData();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error al completar el hito: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task ApproveMilestone(Guid milestoneId)
    {
        var parameters = new DialogParameters();
        var dialog = await DialogService.ShowAsync<ApproveMilestoneDialog>("Aprobar Hito", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                var dto = (ApproveMilestoneDto)result.Data;
                await MilestoneService.ApproveMilestoneAsync(milestoneId, dto);
                Snackbar.Add("Hito aprobado exitosamente", Severity.Success);
                await LoadData();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error al aprobar el hito: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task TriggerPayment(Guid milestoneId)
    {
        var confirm = await DialogService.ShowMessageBox(
            "Activar Pago",
            "¿Está seguro de que desea activar el pago para este hito?",
            yesText: "Activar", cancelText: "Cancelar");

        if (confirm == true)
        {
            try
            {
                await MilestoneService.TriggerPaymentAsync(milestoneId);
                Snackbar.Add("Pago activado exitosamente", Severity.Success);
                await LoadData();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error al activar el pago: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task ManageDependencies(Guid milestoneId)
    {
        var milestone = _milestones.FirstOrDefault(m => m.Id == milestoneId);
        if (milestone != null)
        {
            var parameters = new DialogParameters
            {
                ["Milestone"] = milestone,
                ["AllMilestones"] = _milestones
            };

            var dialog = await DialogService.ShowAsync<ManageMilestoneDependenciesDialog>("Gestionar Dependencias", parameters);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                await LoadData();
            }
        }
    }

    private async Task SetPaymentTerms(Guid milestoneId)
    {
        var parameters = new DialogParameters();
        var dialog = await DialogService.ShowAsync<SetPaymentTermsDialog>("Establecer Términos de Pago", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                var (amount, currency) = ((decimal, string))result.Data;
                await MilestoneService.SetPaymentTermsAsync(milestoneId, amount, currency);
                Snackbar.Add("Términos de pago establecidos", Severity.Success);
                await LoadData();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error al establecer términos de pago: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task DeleteMilestone(Guid milestoneId)
    {
        var canDelete = await MilestoneService.CanDeleteMilestoneAsync(milestoneId);
        if (!canDelete)
        {
            Snackbar.Add("No se puede eliminar este hito porque tiene dependencias", Severity.Warning);
            return;
        }

        var confirm = await DialogService.ShowMessageBox(
            "Eliminar Hito",
            "¿Está seguro de que desea eliminar este hito?",
            yesText: "Eliminar", cancelText: "Cancelar");

        if (confirm == true)
        {
            try
            {
                await MilestoneService.DeleteMilestoneAsync(milestoneId);
                Snackbar.Add("Hito eliminado exitosamente", Severity.Success);
                await LoadData();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error al eliminar el hito: {ex.Message}", Severity.Error);
            }
        }
    }

    private string GetMilestoneTypeDisplay(MilestoneType type)
    {
        return type switch
        {
            MilestoneType.ProjectStart => "Inicio Proyecto",
            MilestoneType.ProjectEnd => "Fin Proyecto",
            MilestoneType.PhaseGate => "Puerta de Fase",
            MilestoneType.KeyDeliverable => "Entregable Clave",
            MilestoneType.ContractualObligation => "Obligación Contractual",
            MilestoneType.PaymentMilestone => "Hito de Pago",
            MilestoneType.RegulatoryApproval => "Aprobación Regulatoria",
            MilestoneType.ClientApproval => "Aprobación Cliente",
            _ => type.ToString()
        };
    }

    private string GetStatusDisplay(MilestoneStatus status)
    {
        return status switch
        {
            MilestoneStatus.Pending => "Pendiente",
            MilestoneStatus.Completed => "Completado",
            MilestoneStatus.Approved => "Aprobado",
            MilestoneStatus.Delayed => "Retrasado",
            MilestoneStatus.AtRisk => "En Riesgo",
            _ => status.ToString()
        };
    }

    private Color GetStatusColor(MilestoneStatus status)
    {
        return status switch
        {
            MilestoneStatus.Pending => Color.Default,
            MilestoneStatus.Completed => Color.Info,
            MilestoneStatus.Approved => Color.Success,
            MilestoneStatus.Delayed => Color.Error,
            MilestoneStatus.AtRisk => Color.Warning,
            _ => Color.Default
        };
    }

    private Color GetProgressColor(decimal progress)
    {
        return progress switch
        {
            0 => Color.Default,
            < 25 => Color.Error,
            < 50 => Color.Warning,
            < 75 => Color.Info,
            < 100 => Color.Primary,
            100 => Color.Success,
            _ => Color.Default
        };
    }

    private Color GetDateColor(DateTime targetDate, MilestoneStatus status)
    {
        if (status == MilestoneStatus.Completed || status == MilestoneStatus.Approved)
            return Color.Success;

        var daysUntil = (targetDate - DateTime.Today).Days;
        return daysUntil switch
        {
            < 0 => Color.Error,
            < 7 => Color.Warning,
            < 30 => Color.Info,
            _ => Color.Default
        };
    }

    private int GetDaysUntilDue(DateTime targetDate)
    {
        return Math.Max(0, (targetDate - DateTime.Today).Days);
    }

    private int GetDaysOverdue(DateTime targetDate)
    {
        return Math.Max(0, (DateTime.Today - targetDate).Days);
    }
}