@page "/reports/nine-column/{ProjectId:guid}"
@using Core.DTOs.Reports
@using Core.DTOs.Common
@using MudBlazor
@using Web.Services.Interfaces
@inject IEVMService EVMService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>Reporte de 9 Columnas - @_report?.ProjectName</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <div>
                        <h4 class="card-title mb-0">
                            <i class="fa-solid fa-table-columns me-2"></i>
                            Reporte de 9 Columnas (EVM)
                        </h4>
                        @if (_report != null)
                        {
                            <small class="text-muted">
                                @_report.ProjectName | Fecha: @_report.ReportDate.ToString("dd/MM/yyyy")
                            </small>
                        }
                    </div>
                    <div class="btn-group">
                        <button class="btn btn-sm btn-outline-primary" @onclick="RefreshReport" disabled="@_isLoading">
                            <i class="fa-solid fa-refresh @(_isLoading ? "fa-spin" : "")"></i>
                            Actualizar
                        </button>
                        <button class="btn btn-sm btn-outline-success" @onclick="ExportToExcel" disabled="@(_isLoading || _report == null)">
                            <i class="fa-solid fa-file-excel"></i>
                            Excel
                        </button>
                        <button class="btn btn-sm btn-outline-danger" @onclick="ExportToPdf" disabled="@(_isLoading || _report == null)">
                            <i class="fa-solid fa-file-pdf"></i>
                            PDF
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="ShowFilters">
                            <i class="fa-solid fa-filter"></i>
                            Filtros
                        </button>
                    </div>
                </div>

                <div class="card-body">
                    @if (_isLoading)
                    {
                        <div class="text-center p-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                            <p class="mt-3">Generando reporte...</p>
                        </div>
                    }
                    else if (_report != null)
                    {
                        <!-- Report Summary -->
                        <div class="row mb-4">
                            <div class="col-md-3">
                                <div class="card bg-primary bg-opacity-10">
                                    <div class="card-body">
                                        <h6 class="card-subtitle mb-2 text-muted">Presupuesto Total (BAC)</h6>
                                        <h4 class="card-title">@FormatCurrency(_report.Totals.BudgetAtCompletion)</h4>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-success bg-opacity-10">
                                    <div class="card-body">
                                        <h6 class="card-subtitle mb-2 text-muted">Valor Ganado (EV)</h6>
                                        <h4 class="card-title">@FormatCurrency(_report.Totals.TotalEarnedValue)</h4>
                                        <small class="text-success">@_report.Totals.OverallPhysicalProgress.ToString("F1")%</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card @(_report.Totals.OverallCPI >= 1 ? "bg-success" : "bg-danger") bg-opacity-10">
                                    <div class="card-body">
                                        <h6 class="card-subtitle mb-2 text-muted">CPI Global</h6>
                                        <h4 class="card-title">@_report.Totals.OverallCPI.ToString("F2")</h4>
                                        <small class="@(_report.Totals.OverallCPI >= 1 ? "text-success" : "text-danger")">
                                            @(_report.Totals.OverallCPI >= 1 ? "Bajo presupuesto" : "Sobre presupuesto")
                                        </small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card @(_report.Totals.ProjectedCostVariance >= 0 ? "bg-success" : "bg-warning") bg-opacity-10">
                                    <div class="card-body">
                                        <h6 class="card-subtitle mb-2 text-muted">Variación Proyectada (VAC)</h6>
                                        <h4 class="card-title">@FormatCurrency(_report.Totals.ProjectedCostVariance)</h4>
                                        <small class="@(_report.Totals.ProjectedCostVariance >= 0 ? "text-success" : "text-warning")">
                                            @_report.Totals.ProjectedCostVariancePercentage.ToString("F1")%
                                        </small>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Main Table -->
                        <div class="table-responsive">
                            <table class="table table-bordered table-hover">
                                <thead class="table-light sticky-top">
                                    <tr>
                                        <th class="text-center" style="width: 25%">
                                            1. Descripción<br />
                                            <small class="text-muted">Actividad/Partida</small>
                                        </th>
                                        <th class="text-end" style="width: 10%">
                                            2. Presupuesto<br />
                                            <small class="text-muted">PV (BCWS)</small>
                                        </th>
                                        <th class="text-center" style="width: 8%">
                                            3. Avance<br />
                                            <small class="text-muted">Físico %</small>
                                        </th>
                                        <th class="text-end" style="width: 10%">
                                            4. Valor Ganado<br />
                                            <small class="text-muted">EV (BCWP)</small>
                                        </th>
                                        <th class="text-end" style="width: 10%">
                                            5. Costo Real<br />
                                            <small class="text-muted">AC (ACWP)</small>
                                        </th>
                                        <th class="text-end" style="width: 9%">
                                            6. Var. Costo<br />
                                            <small class="text-muted">CV</small>
                                        </th>
                                        <th class="text-end" style="width: 9%">
                                            7. Var. Cron.<br />
                                            <small class="text-muted">SV</small>
                                        </th>
                                        <th class="text-center" style="width: 7%">
                                            8. CPI<br />
                                            <small class="text-muted">EV/AC</small>
                                        </th>
                                        <th class="text-end" style="width: 12%">
                                            9. EAC<br />
                                            <small class="text-muted">Estimación</small>
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var line in _report.Lines)
                                    {
                                        <tr class="@GetRowClass(line)">
                                            <td style="padding-left: @((line.Level * 20) + 5)px">
                                                @if (line.IsControlAccount)
                                                {
                                                    <strong>@line.Code - @line.ActivityDescription</strong>
                                                }
                                                else
                                                {
                                                    <span>@line.Code - 
                                                        @line.ActivityDescription
                                                    </span>
                                                                                }
                                                @if (!string.IsNullOrEmpty(line.AlertMessage))
                                                {
                                                    <i class="fa-solid fa-exclamation-triangle text-warning ms-2"
                                                       title="@line.AlertMessage"></i>
                                                }
                                            </td>
                                            <td class="text-end">@FormatNumber(line.PlannedValue)</td>
                                            <td class="text-center">
                                                <div class="progress" style="height: 20px;">
                                                    <div class="progress-bar @GetProgressBarClass(line.PhysicalProgressPercentage)"
                                                         role="progressbar"
                                                         style="width: @line.PhysicalProgressPercentage%"
                                                         aria-valuenow="@line.PhysicalProgressPercentage"
                                                         aria-valuemin="0"
                                                         aria-valuemax="100">
                                                        @line.PhysicalProgressPercentage.ToString("F1")%
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="text-end">@FormatNumber(line.EarnedValue)</td>
                                            <td class="text-end">@FormatNumber(line.ActualCost)</td>
                                            <td class="text-end @(line.CostVariance < 0 ? "text-danger" : "text-success")">
                                                @FormatNumber(line.CostVariance)
                                            </td>
                                            <td class="text-end @(line.ScheduleVariance < 0 ? "text-danger" : "text-success")">
                                                @FormatNumber(line.ScheduleVariance)
                                            </td>
                                            <td class="text-center">
                                                <span class="badge @GetCPIBadgeClass(line.CostPerformanceIndex)">
                                                    @line.CostPerformanceIndex.ToString("F2")
                                                </span>
                                            </td>
                                            <td class="text-end">@FormatNumber(line.EstimateAtCompletion)</td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot class="table-secondary">
                                    <tr>
                                        <th>TOTALES</th>
                                        <th class="text-end">@FormatNumber(_report.Totals.TotalPlannedValue)</th>
                                        <th class="text-center">@_report.Totals.OverallPhysicalProgress.ToString("F1")%</th>
                                        <th class="text-end">@FormatNumber(_report.Totals.TotalEarnedValue)</th>
                                        <th class="text-end">@FormatNumber(_report.Totals.TotalActualCost)</th>
                                        <th class="text-end @(_report.Totals.TotalCostVariance < 0 ? "text-danger" : "text-success")">
                                            @FormatNumber(_report.Totals.TotalCostVariance)
                                        </th>
                                        <th class="text-end @(_report.Totals.TotalScheduleVariance < 0 ? "text-danger" : "text-success")">
                                            @FormatNumber(_report.Totals.TotalScheduleVariance)
                                        </th>
                                        <th class="text-center">
                                            <span class="badge @GetCPIBadgeClass(_report.Totals.OverallCPI)">
                                                @_report.Totals.OverallCPI.ToString("F2")
                                            </span>
                                        </th>
                                        <th class="text-end">@FormatNumber(_report.Totals.TotalEstimateAtCompletion)</th>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>

                        <!-- Footer notes -->
                        <div class="mt-3">
                            <small class="text-muted">
                                <strong>Notas:</strong>
                                <ul class="mb-0">
                                    <li>PV = Planned Value (Valor Planificado)</li>
                                    <li>EV = Earned Value (Valor Ganado)</li>
                                    <li>AC = Actual Cost (Costo Real)</li>
                                    <li>CPI = Cost Performance Index (Índice de Desempeño de Costo)</li>
                                    <li>EAC = Estimate at Completion (Estimación al Completar)</li>
                                </ul>
                            </small>
                        </div>
                    }
                    else if (_error != null)
                    {
                        <div class="alert alert-danger" role="alert">
                            <i class="fa-solid fa-exclamation-circle me-2"></i>
                            @_error
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public Guid ProjectId { get; set; }

    private NineColumnReportDto? _report;
    private bool _isLoading = true;
    private string? _error;

    protected override async Task OnInitializedAsync()
    {
        await LoadReport();
    }

    private async Task LoadReport()
    {
        try
        {
            _isLoading = true;
            _error = null;

            var response = await EVMService.GetNineColumnReportAsync(ProjectId);
            if (response.IsSuccess)
            {
                _report = response.Data;
            }
            else
            {
                _error = response.Message ?? "Error al cargar el reporte";
            }
        }
        catch (Exception ex)
        {
            _error = $"Error inesperado: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task RefreshReport()
    {
        await LoadReport();
    }

    private async Task ExportToExcel()
    {
        try
        {
            var response = await EVMService.ExportNineColumnReportToExcelAsync(ProjectId);
            if (response.IsSuccess && response.Data != null)
            {
                var fileName = $"Reporte9Columnas_{ProjectId}_{DateTime.Now:yyyyMMdd}.xlsx";
                await JSRuntime.InvokeVoidAsync("downloadFile", response.Data, fileName, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
                Snackbar.Add("Reporte exportado exitosamente", Severity.Success);
            }
            else
            {
                Snackbar.Add("Error al exportar el reporte", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExportToPdf()
    {
        try
        {
            var response = await EVMService.ExportNineColumnReportToPdfAsync(ProjectId);
            if (response.IsSuccess && response.Data != null)
            {
                var fileName = $"Reporte9Columnas_{ProjectId}_{DateTime.Now:yyyyMMdd}.pdf";
                await JSRuntime.InvokeVoidAsync("downloadFile", response.Data, fileName, "application/pdf");
                Snackbar.Add("Reporte exportado exitosamente", Severity.Success);
            }
            else
            {
                Snackbar.Add("Error al exportar el reporte", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private void ShowFilters()
    {
        // TODO: Implement filter dialog
        Snackbar.Add("Funcionalidad de filtros en desarrollo", Severity.Info);
    }

    // Helper methods

    private string FormatCurrency(decimal value)
    {
        return value.ToString("C0", new System.Globalization.CultureInfo("es-CL"));
    }

    private string FormatNumber(decimal value)
    {
        return value.ToString("N0", new System.Globalization.CultureInfo("es-CL"));
    }

    private string GetRowClass(NineColumnReportLineDto line)
    {
        if (line.IsControlAccount)
            return "table-active fw-bold";
        return "";
    }

    private string GetProgressBarClass(decimal progress)
    {
        if (progress >= 90) return "bg-success";
        if (progress >= 70) return "bg-info";
        if (progress >= 50) return "bg-warning";
        return "bg-danger";
    }

    private string GetCPIBadgeClass(decimal cpi)
    {
        if (cpi >= 1.0m) return "bg-success";
        if (cpi >= 0.95m) return "bg-warning";
        return "bg-danger";
    }
}