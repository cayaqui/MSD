@page "/projects"
@using Core.DTOs.Organization.Project
@using Core.DTOs.Common
@using Web.Services.Interfaces
@using Web.Pages.Organization.Projects.Components
@using MudBlazor
@inject IProjectApiService ProjectService
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ILoggingService Logger
@attribute [Authorize]

<PageTitle>Gestión de Proyectos | EzPro MSD</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <!-- Header -->
    <MudGrid AlignItems="AlignItems.Center" Class="mb-4">
        <MudItem xs="12" sm="6">
            <MudText Typo="Typo.h4" GutterBottom="false">Proyectos</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">
                Gestiona los proyectos de la organización
            </MudText>
        </MudItem>
        <MudItem xs="12" sm="6" Class="text-right">
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       StartIcon="@Icons.Material.Filled.Add"
                       OnClick="@(() => Navigation.NavigateTo("/projects/new"))">
                Nuevo Proyecto
            </MudButton>
        </MudItem>
    </MudGrid>

    <!-- Filters -->
    <MudCard Class="mb-4">
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" md="4">
                    <MudTextField T="string" 
                                  Label="Buscar" 
                                  Placeholder="Buscar por nombre o código..."
                                  @bind-Value="_searchString"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Immediate="true"
                                  DebounceInterval="300"
                                  OnDebounceIntervalElapsed="@(() => LoadProjects())" />
                </MudItem>
                <MudItem xs="12" md="3">
                    <MudSelect T="string" Label="Estado" @bind-Value="_statusFilter" Dense="true">
                        <MudSelectItem Value="@("")">Todos</MudSelectItem>
                        <MudSelectItem Value="@("Active")">Activo</MudSelectItem>
                        <MudSelectItem Value="@("Planning")">Planificación</MudSelectItem>
                        <MudSelectItem Value="@("OnHold")">En Espera</MudSelectItem>
                        <MudSelectItem Value="@("Completed")">Completado</MudSelectItem>
                        <MudSelectItem Value="@("Cancelled")">Cancelado</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="2">
                    <MudSwitch T="bool" @bind-Value="_activeOnly" Label="Solo Activos" Color="Color.Primary" />
                </MudItem>
                <MudItem xs="12" md="3" Class="d-flex align-end">
                    <MudButton Variant="Variant.Outlined" 
                               OnClick="@ResetFilters"
                               StartIcon="@Icons.Material.Filled.Clear"
                               Class="mr-2">
                        Limpiar
                    </MudButton>
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary"
                               OnClick="@LoadProjects"
                               StartIcon="@Icons.Material.Filled.Refresh">
                        Actualizar
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>

    <!-- Project Grid -->
    @if (_loading)
    {
        <MudGrid>
            @for (int i = 0; i < 6; i++)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard>
                        <MudCardContent>
                            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="30px" Width="80%" Class="mb-2" />
                            <MudSkeleton SkeletonType="SkeletonType.Text" />
                            <MudSkeleton SkeletonType="SkeletonType.Text" />
                            <MudSkeleton SkeletonType="SkeletonType.Text" Width="60%" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="36px" Width="80px" />
                            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="36px" Width="80px" Class="ml-2" />
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
    else if (_projects?.Any() == true)
    {
        <MudGrid>
            @foreach (var project in _projects)
            {
                <MudItem xs="12" sm="6" md="4">
                    <ProjectCard Project="project" 
                                 OnView="@(() => ViewProject(project.Id))"
                                 OnEdit="@(() => EditProject(project.Id))"
                                 OnDelete="@(() => DeleteProjectDialog(project))" />
                </MudItem>
            }
        </MudGrid>

        <!-- Pagination -->
        <MudPaper Class="mt-4 pa-2" Elevation="0">
            <MudGrid AlignItems="Center">
                <MudItem xs="12" sm="6">
                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                        Mostrando @(_projects.Count) de @_totalItems proyectos
                    </MudText>
                </MudItem>
                <MudItem xs="12" sm="6" Class="d-flex justify-end">
                    <MudPagination Color="Color.Primary" 
                                   Count="@_totalPages" 
                                   Selected="@_currentPage"
                                   SelectedChanged="@OnPageChanged" />
                </MudItem>
            </MudGrid>
        </MudPaper>
    }
    else
    {
        <MudPaper Class="pa-8">
            <MudStack AlignItems="AlignItems.Center" Spacing="3">
                <MudIcon Icon="@Icons.Material.Filled.Folder" Size="Size.Large" Color="Color.Secondary" />
                <MudText Typo="Typo.h6" Color="Color.Secondary">No se encontraron proyectos</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary">
                    @(_searchString?.Length > 0 ? "Intenta con otros criterios de búsqueda" : "Comienza creando un nuevo proyecto")
                </MudText>
                @if (string.IsNullOrEmpty(_searchString))
                {
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Add"
                               OnClick="@(() => Navigation.NavigateTo("/projects/new"))">
                        Crear Primer Proyecto
                    </MudButton>
                }
            </MudStack>
        </MudPaper>
    }
</MudContainer>

@code {
    private List<ProjectListDto>? _projects;
    private bool _loading = true;
    private string _searchString = "";
    private string _statusFilter = "";
    private bool _activeOnly = true;
    private int _currentPage = 1;
    private int _pageSize = 12;
    private int _totalItems = 0;
    private int _totalPages => (int)Math.Ceiling((double)_totalItems / _pageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();
    }

    private async Task LoadProjects()
    {
        try
        {
            _loading = true;
            
            var filter = new ProjectFilterDto
            {
                SearchTerm = _searchString,
                Status = _statusFilter,
                IsActive = _activeOnly ? true : null,
                PageNumber = _currentPage,
                PageSize = _pageSize
            };

            var result = await ProjectService.GetProjectsAsync(filter);

            if (result != null)
            {
                _projects = result.Items?.ToList() ?? new List<ProjectListDto>();
                _totalItems = result.TotalCount;
                Logger.LogDebug($"Loaded {_projects.Count} projects");
            }
            else
            {
                _projects = new List<ProjectListDto>();
                _totalItems = 0;
                Snackbar.Add("Error al cargar los proyectos", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading projects");
            Snackbar.Add("Error al cargar los proyectos", Severity.Error);
            _projects = new List<ProjectListDto>();
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnPageChanged(int page)
    {
        _currentPage = page;
        await LoadProjects();
    }

    private async Task ResetFilters()
    {
        _searchString = "";
        _statusFilter = "";
        _activeOnly = true;
        _currentPage = 1;
        await LoadProjects();
    }

    private void ViewProject(Guid id)
    {
        Navigation.NavigateTo($"/projects/{id}");
    }

    private void EditProject(Guid id)
    {
        Navigation.NavigateTo($"/projects/{id}/edit");
    }

    private async Task DeleteProjectDialog(ProjectListDto project)
    {
        var parameters = new DialogParameters<SimpleConfirmDialog>
        {
            { x => x.ContentText, $"¿Está seguro de que desea eliminar el proyecto '{project.Name}'? Esta acción no se puede deshacer." },
            { x => x.ButtonText, "Eliminar" },
            { x => x.Color, Color.Error }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var dialog = await DialogService.ShowAsync<SimpleConfirmDialog>("Eliminar Proyecto", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteProject(project);
        }
    }

    private async Task DeleteProject(ProjectListDto project)
    {
        try
        {
            var success = await ProjectService.DeleteProjectAsync(project.Id);
            if (success)
            {
                Snackbar.Add($"Proyecto '{project.Name}' eliminado correctamente", Severity.Success);
                await LoadProjects();
            }
            else
            {
                Snackbar.Add("Error al eliminar el proyecto", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error deleting project {project.Id}");
            Snackbar.Add("Error al eliminar el proyecto", Severity.Error);
        }
    }
}