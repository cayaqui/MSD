@page "/operations/new"
@page "/operations/{Id:guid}/edit"
@using Core.DTOs.Organization.Operation
@using Core.DTOs.Organization.Company
@using Web.Services.Interfaces.Organization
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@inject IOperationApiService OperationService
@inject ICompanyApiService CompanyService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject ILoggingService Logger
@attribute [Authorize]

<PageTitle>@(_isEdit ? "Editar" : "Nueva") Operación | EzPro MSD</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <!-- Header -->
    <MudGrid AlignItems="Center" Class="mb-4">
        <MudItem xs="12">
            <div class="d-flex align-center mb-2">
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" 
                               OnClick="@GoBack" 
                               Class="mr-2" />
                <MudText Typo="Typo.h4" GutterBottom="false">
                    @(_isEdit ? "Editar Operación" : "Nueva Operación")
                </MudText>
            </div>
            @if (_isEdit)
            {
                <MudText Typo="Typo.body2" Color="Color.Secondary">
                    Modifica la información de la operación
                </MudText>
            }
            else
            {
                <MudText Typo="Typo.body2" Color="Color.Secondary">
                    Registra una nueva operación en el sistema
                </MudText>
            }
        </MudItem>
    </MudGrid>

    @if (_loading && _isEdit)
    {
        <MudCard>
            <MudCardContent>
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="600px" />
            </MudCardContent>
        </MudCard>
    }
    else
    {
        <EditForm Model="@_model" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            
            <MudCard>
                <MudCardContent>
                    <MudGrid>
                        <!-- Basic Information -->
                        <MudItem xs="12">
                            <MudText Typo="Typo.h6" Class="mb-3">Información Básica</MudText>
                        </MudItem>
                        
                        <MudItem xs="12" sm="6">
                            <MudSelect Label="Compañía *" 
                                       @bind-Value="_model.CompanyId"
                                       For="@(() => _model.CompanyId)"
                                       Disabled="@_isEdit"
                                       HelperText="@(_isEdit ? "La compañía no se puede cambiar" : "Seleccione la compañía a la que pertenece")">
                                @if (_companies != null)
                                {
                                    @foreach (var company in _companies)
                                    {
                                        <MudSelectItem Value="@company.Id">@company.Name</MudSelectItem>
                                    }
                                }
                            </MudSelect>
                        </MudItem>
                        
                        <MudItem xs="12" sm="6">
                            <MudTextField Label="Código *" 
                                          @bind-Value="_model.Code"
                                          For="@(() => _model.Code)"
                                          Disabled="@_isEdit"
                                          HelperText="@(_isEdit ? "El código no se puede modificar" : "Código único de la operación")" />
                        </MudItem>
                        
                        <MudItem xs="12">
                            <MudTextField Label="Nombre *" 
                                          @bind-Value="_model.Name"
                                          For="@(() => _model.Name)"
                                          HelperText="Nombre completo de la operación" />
                        </MudItem>
                        
                        <MudItem xs="12">
                            <MudTextField Label="Descripción" 
                                          @bind-Value="_model.Description"
                                          For="@(() => _model.Description)"
                                          Lines="3"
                                          HelperText="Breve descripción de la operación" />
                        </MudItem>
                        
                        <MudItem xs="12" sm="6">
                            <MudTextField Label="Centro de Costo" 
                                          @bind-Value="_model.CostCenter"
                                          For="@(() => _model.CostCenter)"
                                          HelperText="Código del centro de costo" />
                        </MudItem>
                        
                        @if (_isEdit)
                        {
                            <MudItem xs="12" sm="6">
                                <MudSwitch T="bool" Label="Operación Activa" 
                                           @bind-Checked="_model.IsActive"
                                           Color="Color.Primary" />
                            </MudItem>
                        }
                        
                        <!-- Location Information -->
                        <MudItem xs="12">
                            <MudDivider Class="my-4" />
                            <MudText Typo="Typo.h6" Class="mb-3">Ubicación</MudText>
                        </MudItem>
                        
                        <MudItem xs="12">
                            <MudTextField Label="Ubicación/Sitio" 
                                          @bind-Value="_model.Location"
                                          For="@(() => _model.Location)"
                                          HelperText="Nombre del sitio o ubicación principal" />
                        </MudItem>
                        
                        <MudItem xs="12">
                            <MudTextField Label="Dirección" 
                                          @bind-Value="_model.Address"
                                          For="@(() => _model.Address)"
                                          HelperText="Dirección completa" />
                        </MudItem>
                        
                        <MudItem xs="12" sm="6">
                            <MudTextField Label="Ciudad" 
                                          @bind-Value="_model.City"
                                          For="@(() => _model.City)" />
                        </MudItem>
                        
                        <MudItem xs="12" sm="6">
                            <MudTextField Label="Estado/Provincia" 
                                          @bind-Value="_model.State"
                                          For="@(() => _model.State)" />
                        </MudItem>
                        
                        <MudItem xs="12" sm="6">
                            <MudTextField Label="País" 
                                          @bind-Value="_model.Country"
                                          For="@(() => _model.Country)" />
                        </MudItem>
                        
                        <!-- Management Information -->
                        <MudItem xs="12">
                            <MudDivider Class="my-4" />
                            <MudText Typo="Typo.h6" Class="mb-3">Gestión</MudText>
                        </MudItem>
                        
                        <MudItem xs="12" sm="6">
                            <MudTextField Label="Nombre del Gerente" 
                                          @bind-Value="_model.ManagerName"
                                          For="@(() => _model.ManagerName)"
                                          HelperText="Nombre completo del gerente de operación" />
                        </MudItem>
                        
                        <MudItem xs="12" sm="6">
                            <MudTextField Label="Email del Gerente" 
                                          @bind-Value="_model.ManagerEmail"
                                          For="@(() => _model.ManagerEmail)"
                                          InputType="InputType.Email"
                                          HelperText="Correo electrónico del gerente" />
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                
                <MudCardActions Class="pa-4">
                    <MudButton Variant="Variant.Text" 
                               OnClick="@GoBack">
                        Cancelar
                    </MudButton>
                    <MudSpacer />
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary"
                               ButtonType="ButtonType.Submit"
                               Disabled="@_submitting">
                        @if (_submitting)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Guardando...</MudText>
                        }
                        else
                        {
                            <MudText>@(_isEdit ? "Guardar Cambios" : "Crear Operación")</MudText>
                        }
                    </MudButton>
                </MudCardActions>
            </MudCard>
            
            <ValidationSummary />
        </EditForm>
    }
</MudContainer>

@code {
    [Parameter] public Guid? Id { get; set; }

    private bool _isEdit => Id.HasValue;
    private bool _loading = false;
    private bool _submitting = false;
    
    private OperationFormModel _model = new();
    private OperationDto? _existingOperation;
    private List<CompanyDto>? _companies;

    protected override async Task OnInitializedAsync()
    {
        await LoadCompanies();
        
        if (_isEdit && Id.HasValue)
        {
            await LoadOperation();
        }
    }

    private async Task LoadCompanies()
    {
        try
        {
            var result = await CompanyService.GetCompaniesAsync(pageSize: 100);
            if (result != null)
            {
                _companies = result.Items?.ToList() ?? new List<CompanyDto>();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading companies");
            Snackbar.Add("Error al cargar las compañías", Severity.Error);
        }
    }

    private async Task LoadOperation()
    {
        try
        {
            _loading = true;
            _existingOperation = await OperationService.GetOperationByIdAsync(Id!.Value);
            
            if (_existingOperation == null)
            {
                Snackbar.Add("Operación no encontrada", Severity.Error);
                Navigation.NavigateTo("/operations");
                return;
            }
            
            // Populate form model
            _model = new OperationFormModel
            {
                CompanyId = _existingOperation.CompanyId,
                Code = _existingOperation.Code,
                Name = _existingOperation.Name,
                Description = _existingOperation.Description,
                Location = _existingOperation.Location,
                Address = _existingOperation.Address,
                City = _existingOperation.City,
                State = _existingOperation.State,
                Country = _existingOperation.Country,
                ManagerName = _existingOperation.ManagerName,
                ManagerEmail = _existingOperation.ManagerEmail,
                CostCenter = _existingOperation.CostCenter,
                IsActive = _existingOperation.IsActive
            };
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error loading operation {Id}");
            Snackbar.Add("Error al cargar la operación", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            _submitting = true;
            
            if (_isEdit && Id.HasValue)
            {
                // Update existing operation
                var updateDto = new UpdateOperationDto
                {
                    Name = _model.Name,
                    Description = _model.Description,
                    Location = _model.Location,
                    Address = _model.Address,
                    City = _model.City,
                    State = _model.State,
                    Country = _model.Country,
                    ManagerName = _model.ManagerName,
                    ManagerEmail = _model.ManagerEmail,
                    CostCenter = _model.CostCenter
                };
                
                var result = await OperationService.UpdateOperationAsync(Id.Value, updateDto);
                if (result != null)
                {
                    // Update active status if changed
                    if (result.IsActive != _model.IsActive)
                    {
                        if (_model.IsActive)
                        {
                            await OperationService.ActivateOperationAsync(Id.Value);
                        }
                        else
                        {
                            await OperationService.DeactivateOperationAsync(Id.Value);
                        }
                    }
                    
                    Snackbar.Add("Operación actualizada correctamente", Severity.Success);
                    Navigation.NavigateTo($"/operations/{Id}");
                }
                else
                {
                    Snackbar.Add("Error al actualizar la operación", Severity.Error);
                }
            }
            else
            {
                // Create new operation
                var createDto = new CreateOperationDto
                {
                    CompanyId = _model.CompanyId,
                    Code = _model.Code,
                    Name = _model.Name,
                    Description = _model.Description,
                    Location = _model.Location,
                    Address = _model.Address,
                    City = _model.City,
                    State = _model.State,
                    Country = _model.Country,
                    ManagerName = _model.ManagerName,
                    ManagerEmail = _model.ManagerEmail,
                    CostCenter = _model.CostCenter
                };
                
                var result = await OperationService.CreateOperationAsync(createDto);
                if (result != null)
                {
                    Snackbar.Add("Operación creada correctamente", Severity.Success);
                    Navigation.NavigateTo($"/operations/{result.Id}");
                }
                else
                {
                    Snackbar.Add("Error al crear la operación", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving operation");
            Snackbar.Add("Error al guardar la operación", Severity.Error);
        }
        finally
        {
            _submitting = false;
        }
    }

    private void GoBack()
    {
        if (_isEdit && Id.HasValue)
        {
            Navigation.NavigateTo($"/operations/{Id}");
        }
        else
        {
            Navigation.NavigateTo("/operations");
        }
    }

    // Form model with validation
    private class OperationFormModel
    {
        [Required(ErrorMessage = "La compañía es requerida")]
        public Guid CompanyId { get; set; }

        [Required(ErrorMessage = "El código es requerido")]
        [StringLength(20, ErrorMessage = "El código no puede exceder 20 caracteres")]
        [RegularExpression(@"^[A-Z0-9\-]+$", ErrorMessage = "El código solo puede contener letras mayúsculas, números y guiones")]
        public string Code { get; set; } = string.Empty;

        [Required(ErrorMessage = "El nombre es requerido")]
        [StringLength(200, ErrorMessage = "El nombre no puede exceder 200 caracteres")]
        public string Name { get; set; } = string.Empty;

        [StringLength(500, ErrorMessage = "La descripción no puede exceder 500 caracteres")]
        public string? Description { get; set; }

        [StringLength(100, ErrorMessage = "La ubicación no puede exceder 100 caracteres")]
        public string? Location { get; set; }

        [StringLength(200, ErrorMessage = "La dirección no puede exceder 200 caracteres")]
        public string? Address { get; set; }

        [StringLength(100, ErrorMessage = "La ciudad no puede exceder 100 caracteres")]
        public string? City { get; set; }

        [StringLength(100, ErrorMessage = "El estado no puede exceder 100 caracteres")]
        public string? State { get; set; }

        [StringLength(100, ErrorMessage = "El país no puede exceder 100 caracteres")]
        public string? Country { get; set; }

        [StringLength(200, ErrorMessage = "El nombre del gerente no puede exceder 200 caracteres")]
        public string? ManagerName { get; set; }

        [EmailAddress(ErrorMessage = "El formato del email no es válido")]
        [StringLength(200, ErrorMessage = "El email no puede exceder 200 caracteres")]
        public string? ManagerEmail { get; set; }

        [StringLength(50, ErrorMessage = "El centro de costo no puede exceder 50 caracteres")]
        public string? CostCenter { get; set; }

        public bool IsActive { get; set; } = true;
    }
}