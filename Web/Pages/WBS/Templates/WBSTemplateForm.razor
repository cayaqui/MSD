@page "/wbs/templates/new"
@page "/wbs/templates/{Id:guid}/edit"
@using Core.DTOs.Configuration.WBSTemplates
@using Web.Services.Interfaces.Configuration
@using MudBlazor
@inject IWBSTemplateApiService WBSTemplateService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject ILoggingService Logger
@inject IDialogService DialogService
@attribute [Authorize]

<PageTitle>@(_isEdit ? "Editar" : "Nueva") Plantilla WBS | EzPro MSD</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <!-- Header -->
    <MudBreadcrumbs Items="_breadcrumbs" Class="mb-4" />
    
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5">@(_isEdit ? "Editar Plantilla WBS" : "Nueva Plantilla WBS")</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudForm @ref="_form" @bind-IsValid="@_formValid">
                <MudGrid>
                    <!-- Basic Information -->
                    <MudItem xs="12">
                        <MudText Typo="Typo.h6" Class="mb-3">Información Básica</MudText>
                    </MudItem>
                    
                    <MudItem xs="12" md="6">
                        <MudTextField T="string"
                                      Label="Código *"
                                      @bind-Value="_model.Code"
                                      Required="true"
                                      RequiredError="El código es requerido"
                                      MaxLength="50"
                                      Counter="50"
                                      Disabled="_isEdit" />
                    </MudItem>
                    
                    <MudItem xs="12" md="6">
                        <MudTextField T="string"
                                      Label="Nombre *"
                                      @bind-Value="_model.Name"
                                      Required="true"
                                      RequiredError="El nombre es requerido"
                                      MaxLength="200"
                                      Counter="200" />
                    </MudItem>
                    
                    <MudItem xs="12">
                        <MudTextField T="string"
                                      Label="Descripción"
                                      @bind-Value="_model.Description"
                                      Lines="3"
                                      MaxLength="500" />
                    </MudItem>
                    
                    <!-- Industry and Project Type -->
                    <MudItem xs="12">
                        <MudText Typo="Typo.h6" Class="mb-3 mt-4">Tipo de Aplicación</MudText>
                    </MudItem>
                    
                    <MudItem xs="12" md="6">
                        <MudSelect T="string" 
                                   Label="Tipo de Industria *" 
                                   @bind-Value="_model.IndustryType"
                                   Required="true"
                                   RequiredError="El tipo de industria es requerido">
                            <MudSelectItem Value="@("Oil&Gas")">Oil & Gas</MudSelectItem>
                            <MudSelectItem Value="@("Construction")">Construcción</MudSelectItem>
                            <MudSelectItem Value="@("Infrastructure")">Infraestructura</MudSelectItem>
                            <MudSelectItem Value="@("Manufacturing")">Manufactura</MudSelectItem>
                            <MudSelectItem Value="@("IT")">Tecnología</MudSelectItem>
                            <MudSelectItem Value="@("Other")">Otro</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    
                    <MudItem xs="12" md="6">
                        <MudSelect T="string" 
                                   Label="Tipo de Proyecto *" 
                                   @bind-Value="_model.ProjectType"
                                   Required="true"
                                   RequiredError="El tipo de proyecto es requerido">
                            <MudSelectItem Value="@("EPC")">EPC</MudSelectItem>
                            <MudSelectItem Value="@("EPCM")">EPCM</MudSelectItem>
                            <MudSelectItem Value="@("Construction")">Construcción</MudSelectItem>
                            <MudSelectItem Value="@("Engineering")">Ingeniería</MudSelectItem>
                            <MudSelectItem Value="@("Maintenance")">Mantenimiento</MudSelectItem>
                            <MudSelectItem Value="@("Other")">Otro</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    
                    <!-- Coding Settings -->
                    <MudItem xs="12">
                        <MudText Typo="Typo.h6" Class="mb-3 mt-4">Configuración de Codificación</MudText>
                    </MudItem>
                    
                    <MudItem xs="12" md="4">
                        <MudSelect T="string" 
                                   Label="Esquema de Codificación *" 
                                   @bind-Value="_model.CodingScheme"
                                   Required="true">
                            <MudSelectItem Value="@("Numeric")">Numérico</MudSelectItem>
                            <MudSelectItem Value="@("Alpha")">Alfabético</MudSelectItem>
                            <MudSelectItem Value="@("AlphaNumeric")">Alfanumérico</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    
                    <MudItem xs="12" md="4">
                        <MudTextField T="string"
                                      Label="Delimitador *"
                                      @bind-Value="_model.Delimiter"
                                      Required="true"
                                      RequiredError="El delimitador es requerido"
                                      MaxLength="3" />
                    </MudItem>
                    
                    <MudItem xs="12" md="4">
                        <MudNumericField T="int"
                                         Label="Longitud de Código *"
                                         @bind-Value="_model.CodeLength"
                                         Required="true"
                                         RequiredError="La longitud es requerida"
                                         Min="1"
                                         Max="10" />
                    </MudItem>
                    
                    <!-- Additional Settings -->
                    <MudItem xs="12">
                        <MudText Typo="Typo.h6" Class="mb-3 mt-4">Configuración Adicional</MudText>
                    </MudItem>
                    
                    <MudItem xs="12" md="6">
                        <MudSwitch T="bool" @bind-Checked="_model.AutoGenerateCodes" Color="Color.Primary">
                            Generar códigos automáticamente
                        </MudSwitch>
                    </MudItem>
                    
                    <MudItem xs="12" md="6">
                        <MudSwitch T="bool" @bind-Checked="_model.IsPublic" Color="Color.Primary">
                            Plantilla pública
                        </MudSwitch>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudButton OnClick="Cancel">Cancelar</MudButton>
            <MudSpacer />
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       OnClick="SaveTemplate"
                       Disabled="@(!_formValid || _saving)">
                @if (_saving)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                }
                @(_isEdit ? "Actualizar" : "Crear") Plantilla
            </MudButton>
        </MudCardActions>
    </MudCard>
    
    @if (_isEdit && _templateId.HasValue)
    {
        <MudCard Class="mt-4">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Elementos de la Plantilla</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" 
                               OnClick="AddElement">
                        Agregar Elemento
                    </MudButton>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                @if (_elements.Any())
                {
                    <MudList T="string">
                        @foreach (var element in _elements.OrderBy(e => e.Level).ThenBy(e => e.SequenceNumber))
                        {
                            <MudListItem T="string">
                                <div class="d-flex align-center">
                                    <MudText Class="mr-2" Style="@($"margin-left: {element.Level * 20}px")">
                                        @element.Code - @element.Name
                                    </MudText>
                                    @if (element.IsOptional)
                                    {
                                        <MudChip T="string" Size="Size.Small" Color="Color.Info">Opcional</MudChip>
                                    }
                                    <MudSpacer />
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" 
                                                   OnClick="() => EditElement(element)" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" 
                                                   Color="Color.Error" OnClick="() => DeleteElement(element)" />
                                </div>
                            </MudListItem>
                        }
                    </MudList>
                }
                else
                {
                    <MudText Align="Align.Center" Class="py-4">No hay elementos en esta plantilla</MudText>
                }
            </MudCardContent>
        </MudCard>
    }
</MudContainer>

@code {
    [Parameter] public Guid? Id { get; set; }
    
    private bool _isEdit => Id.HasValue;
    private MudForm _form = null!;
    private bool _formValid;
    private bool _saving;
    private Guid? _templateId;
    
    private CreateWBSTemplateDto _createModel = new();
    private UpdateWBSTemplateDto _updateModel = new();
    private WBSTemplateFormModel _model = new(); // Custom model for form binding
    
    private List<WBSTemplateElementDto> _elements = new();
    private WBSTemplateElementDto? _selectedElement;
    
    private List<BreadcrumbItem> _breadcrumbs = new();

    protected override async Task OnInitializedAsync()
    {
        if (_isEdit)
        {
            _templateId = Id;
            await LoadTemplate();
            _breadcrumbs = new List<BreadcrumbItem>
            {
                new BreadcrumbItem("Inicio", href: "/", icon: Icons.Material.Filled.Home),
                new BreadcrumbItem("WBS", href: null),
                new BreadcrumbItem("Plantillas", href: "/wbs/templates"),
                new BreadcrumbItem("Editar Plantilla", href: null, disabled: true)
            };
        }
        else
        {
            // For create, initialize with defaults
            _model = new WBSTemplateFormModel();
            _breadcrumbs = new List<BreadcrumbItem>
            {
                new BreadcrumbItem("Inicio", href: "/", icon: Icons.Material.Filled.Home),
                new BreadcrumbItem("WBS", href: null),
                new BreadcrumbItem("Plantillas", href: "/wbs/templates"),
                new BreadcrumbItem("Nueva Plantilla", href: null, disabled: true)
            };
        }
    }

    private async Task LoadTemplate()
    {
        if (!Id.HasValue) return;

        try
        {
            var template = await WBSTemplateService.GetTemplateByIdAsync(Id.Value);
            if (template != null)
            {
                // For editing, we map to the form model
                _model = new WBSTemplateFormModel
                {
                    Code = template.Code,
                    Name = template.Name,
                    Description = template.Description,
                    IndustryType = template.IndustryType,
                    ProjectType = template.ProjectType,
                    CodingScheme = template.CodingScheme,
                    Delimiter = template.Delimiter,
                    CodeLength = template.CodeLength,
                    AutoGenerateCodes = template.AutoGenerateCodes,
                    IsPublic = template.IsPublic
                };
                
                _updateModel = new UpdateWBSTemplateDto
                {
                    Name = template.Name,
                    Description = template.Description,
                    IndustryType = template.IndustryType,
                    ProjectType = template.ProjectType,
                    IsPublic = template.IsPublic
                };
                
                await LoadElements();
            }
            else
            {
                Snackbar.Add("Plantilla no encontrada", Severity.Error);
                Navigation.NavigateTo("/wbs/templates");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error loading template {Id}");
            Snackbar.Add("Error al cargar la plantilla", Severity.Error);
        }
    }

    private async Task LoadElements()
    {
        if (!_templateId.HasValue) return;

        try
        {
            var elements = await WBSTemplateService.GetTemplateElementsAsync(_templateId.Value);
            _elements = elements.ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading template elements");
            Snackbar.Add("Error al cargar los elementos", Severity.Error);
        }
    }


    private async Task SaveTemplate()
    {
        await _form.Validate();
        if (!_formValid) return;
        
        _saving = true;
        
        try
        {
            if (_isEdit)
            {
                _updateModel.Name = _model.Name;
                _updateModel.Description = _model.Description;
                _updateModel.IndustryType = _model.IndustryType;
                _updateModel.ProjectType = _model.ProjectType;
                _updateModel.IsPublic = _model.IsPublic;
                
                var updated = await WBSTemplateService.UpdateTemplateAsync(Id!.Value, _updateModel);
                if (updated != null)
                {
                    Snackbar.Add("Plantilla actualizada correctamente", Severity.Success);
                    Navigation.NavigateTo($"/wbs/templates/{Id}");
                }
                else
                {
                    Snackbar.Add("Error al actualizar la plantilla", Severity.Error);
                }
            }
            else
            {
                // Map form model to create DTO
                _createModel = new CreateWBSTemplateDto
                {
                    Code = _model.Code,
                    Name = _model.Name,
                    Description = _model.Description,
                    IndustryType = _model.IndustryType,
                    ProjectType = _model.ProjectType,
                    CodingScheme = _model.CodingScheme,
                    Delimiter = _model.Delimiter,
                    CodeLength = _model.CodeLength,
                    AutoGenerateCodes = _model.AutoGenerateCodes,
                    IsPublic = _model.IsPublic
                };
                
                var created = await WBSTemplateService.CreateTemplateAsync(_createModel);
                if (created != null)
                {
                    Snackbar.Add("Plantilla creada correctamente", Severity.Success);
                    Navigation.NavigateTo($"/wbs/templates/{created.Id}/edit");
                }
                else
                {
                    Snackbar.Add("Error al crear la plantilla", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving template");
            Snackbar.Add("Error al guardar la plantilla", Severity.Error);
        }
        finally
        {
            _saving = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/wbs/templates");
    }

    private async Task AddElement()
    {
        // TODO: Open dialog to add new element
        Snackbar.Add("Función de agregar elemento pendiente de implementar", Severity.Info);
    }

    private async Task EditElement(WBSTemplateElementDto element)
    {
        // TODO: Open dialog to edit element
        Snackbar.Add($"Editar elemento: {element.Name}", Severity.Info);
    }

    private async Task DeleteElement(WBSTemplateElementDto element)
    {
        var result = await DialogService.ShowMessageBox(
            "Confirmar eliminación",
            $"¿Está seguro de eliminar el elemento '{element.Name}'?",
            yesText: "Eliminar", cancelText: "Cancelar");

        if (result == true)
        {
            try
            {
                var success = await WBSTemplateService.RemoveElementAsync(_templateId!.Value, element.Id);
                if (success)
                {
                    await LoadElements();
                    Snackbar.Add("Elemento eliminado", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Error al eliminar el elemento", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error deleting element");
                Snackbar.Add("Error al eliminar el elemento", Severity.Error);
            }
        }
    }

    // Form model to handle both create and update scenarios
    public class WBSTemplateFormModel
    {
        public string Code { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string? Description { get; set; }
        public string IndustryType { get; set; } = string.Empty;
        public string ProjectType { get; set; } = string.Empty;
        public string CodingScheme { get; set; } = "Numeric";
        public string Delimiter { get; set; } = ".";
        public int CodeLength { get; set; } = 3;
        public bool AutoGenerateCodes { get; set; } = true;
        public bool IsPublic { get; set; } = true;
    }
}