@page "/documents/{DocumentId:guid}/versions"
@using Core.DTOs.Documents.Document
@using Core.DTOs.Documents.DocumentVersion
@using Core.Enums.Documents
@using Web.Services.Interfaces.Documents
@using Microsoft.AspNetCore.Authorization
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Forms
@attribute [Authorize]
@inject IDocumentApiService DocumentService
@inject INavigationService NavigationService
@inject IToastService ToastService
@inject ILoggingService Logger
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

<PageTitle>Version History - @(_document?.DocumentNumber ?? "Document")</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudBreadcrumbs Items="_breadcrumbs" Class="mb-4" />
    
    @if (_loading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
    }
    else if (_document == null)
    {
        <MudAlert Severity="Severity.Error">Document not found</MudAlert>
    }
    else
    {
        <MudCard Class="mb-4">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5">Version History</MudText>
                    <MudText Typo="Typo.subtitle1">@_document.DocumentNumber - @_document.Title</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
                             OnClick="ShowUploadVersionDialog">
                        Upload New Version
                    </MudButton>
                </CardHeaderActions>
            </MudCardHeader>
        </MudCard>

        @if (_versions.Any())
        {
            <MudTimeline TimelineOrientation="TimelineOrientation.Vertical" TimelinePosition="TimelinePosition.Start">
                @foreach (var version in _versions.OrderByDescending(v => v.RevisionNumber))
                {
                    var isCurrent = version.IsCurrent;
                    <MudTimelineItem Color="@(isCurrent ? Color.Success : Color.Default)" 
                                   Size="@(isCurrent ? Size.Large : Size.Medium)"
                                   Variant="@(isCurrent ? Variant.Filled : Variant.Outlined)">
                        <ItemOpposite>
                            <MudText Typo="Typo.caption">@version.CreatedDate.ToString("MMM dd, yyyy HH:mm")</MudText>
                        </ItemOpposite>
                        <ItemContent>
                            <MudCard Elevation="@(isCurrent ? 3 : 1)">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <div class="d-flex align-center">
                                            <MudText Typo="Typo.h6">Version @version.Version</MudText>
                                            @if (isCurrent)
                                            {
                                                <MudChip T="string" Color="Color.Success" Size="Size.Small" Class="ml-2">Current</MudChip>
                                            }
                                            <MudChip T="string" Color="@GetReviewStatusColor(version.ReviewStatus)" Size="Size.Small" Class="ml-2">
                                                @version.ReviewStatus
                                            </MudChip>
                                        </div>
                                        <MudText Typo="Typo.caption">Revision @version.RevisionNumber</MudText>
                                    </CardHeaderContent>
                                    <CardHeaderActions>
                                        <MudIconButton Icon="@Icons.Material.Filled.Download" Title="Download"
                                                     OnClick="@(() => DownloadVersion(version.Id))" />
                                        @if (!isCurrent)
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.Restore" Title="Set as Current"
                                                         OnClick="@(() => SetAsCurrent(version.Id))" />
                                        }
                                        <MudIconButton Icon="@Icons.Material.Filled.Compare" Title="Compare"
                                                     OnClick="@(() => CompareVersions(version.Id))" />
                                    </CardHeaderActions>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudGrid>
                                        <MudItem xs="12" md="6">
                                            <MudText Typo="Typo.subtitle2">Uploaded by</MudText>
                                            <MudText Typo="Typo.body2">@version.AuthorName</MudText>
                                        </MudItem>
                                        <MudItem xs="12" md="6">
                                            <MudText Typo="Typo.subtitle2">File Size</MudText>
                                            <MudText Typo="Typo.body2">@FormatFileSize(version.FileSize)</MudText>
                                        </MudItem>
                                        @if (!string.IsNullOrEmpty(version.Description))
                                        {
                                            <MudItem xs="12">
                                                <MudText Typo="Typo.subtitle2">Description</MudText>
                                                <MudText Typo="Typo.body2">@version.Description</MudText>
                                            </MudItem>
                                        }
                                        @if (!string.IsNullOrEmpty(version.ChangeReasons))
                                        {
                                            <MudItem xs="12">
                                                <MudText Typo="Typo.subtitle2">Change Reasons</MudText>
                                                <MudText Typo="Typo.body2">@version.ChangeReasons</MudText>
                                            </MudItem>
                                        }
                                        @if (version.ReviewedDate.HasValue && !string.IsNullOrEmpty(version.ReviewedByName))
                                        {
                                            <MudItem xs="12">
                                                <MudText Typo="Typo.subtitle2">Review Information</MudText>
                                                <MudText Typo="Typo.body2">
                                                    Reviewed by @version.ReviewedByName on @version.ReviewedDate.Value.ToString("MMM dd, yyyy")
                                                </MudText>
                                                @if (!string.IsNullOrEmpty(version.ReviewComments))
                                                {
                                                    <MudText Typo="Typo.body2" Class="mt-1">
                                                        <strong>Comments:</strong> @version.ReviewComments
                                                    </MudText>
                                                }
                                            </MudItem>
                                        }
                                        <MudItem xs="12">
                                            <div class="d-flex align-center">
                                                <MudIcon Icon="@Icons.Material.Filled.Visibility" Size="Size.Small" Class="mr-1" />
                                                <MudText Typo="Typo.caption">@version.ViewCount views</MudText>
                                                <MudIcon Icon="@Icons.Material.Filled.Download" Size="Size.Small" Class="ml-3 mr-1" />
                                                <MudText Typo="Typo.caption">@version.DownloadCount downloads</MudText>
                                            </div>
                                        </MudItem>
                                    </MudGrid>
                                </MudCardContent>
                            </MudCard>
                        </ItemContent>
                    </MudTimelineItem>
                }
            </MudTimeline>
        }
        else
        {
            <MudAlert Severity="Severity.Info">No version history available for this document.</MudAlert>
        }
    }
</MudContainer>

<!-- Upload Version Dialog -->
<MudDialog @bind-IsVisible="_showUploadDialog" Options="new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true }">
    <TitleContent>
        <MudText Typo="Typo.h6">Upload New Version</MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudTextField @bind-Value="_newVersion.Version" Label="Version Number *" 
                            Variant="Variant.Outlined" Required="true"
                            HelperText="e.g., 1.1, 2.0, A, B" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="_newVersion.Description" Label="Description" 
                            Variant="Variant.Outlined" Lines="2" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="_newVersion.ChangeReasons" Label="Change Reasons *" 
                            Variant="Variant.Outlined" Lines="3" Required="true" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="_newVersion.Tags" Label="Tags" 
                            Variant="Variant.Outlined" 
                            HelperText="Comma-separated tags" />
            </MudItem>
            <MudItem xs="12">
                <MudFileUpload T="IBrowserFile" Accept=".pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.txt,.jpg,.jpeg,.png,.dwg,.dxf"
                             MaximumFileCount="1" OnFilesChanged="OnFileSelected">
                    <ButtonTemplate>
                        <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary"
                                 StartIcon="@Icons.Material.Filled.CloudUpload" for="@context">
                            Select File *
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
                
                @if (_selectedFile != null)
                {
                    <MudChip Color="Color.Info" OnClose="@(() => _selectedFile = null)" Class="mt-2">
                        @_selectedFile.Name (@FormatFileSize(_selectedFile.Size))
                    </MudChip>
                }
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => _showUploadDialog = false)">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="UploadNewVersion" 
                 Disabled="@(string.IsNullOrEmpty(_newVersion.Version) || 
                           string.IsNullOrEmpty(_newVersion.ChangeReasons) || 
                           _selectedFile == null || _uploading)">
            @if (_uploading)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
            }
            Upload
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public Guid DocumentId { get; set; }
    
    private DocumentDto? _document;
    private List<DocumentVersionDto> _versions = new();
    private bool _loading = true;
    private bool _showUploadDialog = false;
    private bool _uploading = false;
    
    private CreateDocumentVersionDto _newVersion = new();
    private IBrowserFile? _selectedFile;
    
    private List<BreadcrumbItem> _breadcrumbs = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDocument();
        await LoadVersions();
    }

    private async Task LoadDocument()
    {
        try
        {
            _document = await DocumentService.GetDocumentByIdAsync(DocumentId);
            if (_document != null)
            {
                UpdateBreadcrumbs();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error loading document {DocumentId}");
        }
    }

    private async Task LoadVersions()
    {
        try
        {
            _loading = true;
            var versions = await DocumentService.GetVersionsAsync(DocumentId);
            _versions = versions?.ToList() ?? new List<DocumentVersionDto>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading versions");
            ToastService.ShowError("Failed to load version history");
        }
        finally
        {
            _loading = false;
        }
    }

    private void UpdateBreadcrumbs()
    {
        _breadcrumbs = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/"),
            new BreadcrumbItem("Documents", href: "/documents"),
            new BreadcrumbItem(_document?.DocumentNumber ?? "Document", href: $"/documents/{DocumentId}"),
            new BreadcrumbItem("Versions", href: null, disabled: true)
        };
    }

    private void ShowUploadVersionDialog()
    {
        _newVersion = new CreateDocumentVersionDto { DocumentId = DocumentId };
        _selectedFile = null;
        _showUploadDialog = true;
    }

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        _selectedFile = e.File;
    }

    private async Task UploadNewVersion()
    {
        if (_selectedFile == null) return;

        try
        {
            _uploading = true;
            var result = await DocumentService.CreateVersionAsync(DocumentId, _newVersion, _selectedFile);
            
            if (result != null)
            {
                ToastService.ShowSuccess("New version uploaded successfully");
                _showUploadDialog = false;
                await LoadVersions();
                
                // Reload document to get updated info
                await LoadDocument();
            }
            else
            {
                ToastService.ShowError("Failed to upload new version");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error uploading new version");
            ToastService.ShowError("An error occurred while uploading the new version");
        }
        finally
        {
            _uploading = false;
        }
    }

    private async Task DownloadVersion(Guid versionId)
    {
        try
        {
            var url = await DocumentService.GetDownloadUrlAsync(DocumentId); // TODO: Add GetVersionDownloadUrlAsync
            if (!string.IsNullOrEmpty(url))
            {
                await JSRuntime.InvokeVoidAsync("open", url, "_blank");
                ToastService.ShowSuccess("Download started");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error downloading version {versionId}");
            ToastService.ShowError("Failed to download version");
        }
    }

    private async Task SetAsCurrent(Guid versionId)
    {
        var result = await DialogService.ShowMessageBox(
            "Set as Current Version",
            "Are you sure you want to set this as the current version?",
            yesText: "Yes", cancelText: "Cancel");

        if (result == true)
        {
            try
            {
                var success = await DocumentService.SetCurrentVersionAsync(DocumentId, versionId);
                if (success)
                {
                    ToastService.ShowSuccess("Version set as current");
                    await LoadVersions();
                    await LoadDocument();
                }
                else
                {
                    ToastService.ShowError("Failed to set version as current");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, $"Error setting version {versionId} as current");
                ToastService.ShowError("Failed to set version as current");
            }
        }
    }

    private void CompareVersions(Guid versionId)
    {
        ToastService.ShowInfo("Version comparison coming soon");
    }

    private Color GetReviewStatusColor(ReviewStatus? status)
    {
        return status switch
        {
            ReviewStatus.Pending => Color.Warning,
            ReviewStatus.Approved => Color.Success,
            ReviewStatus.ApprovedWithComments => Color.Success,
            ReviewStatus.Rejected => Color.Error,
            _ => Color.Default
        };
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double size = bytes;
        
        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }
        
        return $"{size:0.##} {sizes[order]}";
    }
}