@page "/companies"
@using Core.DTOs.Companies
@using Web.Pages.Companies.Components
@inject ICompanyService CompanyService
@inject NavigationManager Navigation
@inject IToastService Toast
@inject IAppStateService AppState
@attribute [Authorize]

<PageTitle>Empresas - EzPro</PageTitle>

<div class="page-header">
    <div class="row align-items-center">
        <div class="col">
            <h1 class="page-title">
                <i class="fa-light fa-building me-2"></i>Empresas
            </h1>
            <p class="page-subtitle">Gestión de empresas del sistema</p>
        </div>
        <div class="col-auto">
            @{
                string url = "/companies/new";
            }
            <button class="btn btn-primary" @onclick="() => Navigation.NavigateTo(url)">
                <i class="fa-light fa-plus me-2"></i>Nueva Empresa
            </button>
        </div>
    </div>
</div>

@if (isLoading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    </div>
}
else if (companies.Any())
{
    <div class="row">
        @foreach (var company in companies)
        {
            <div class="col-md-6 col-lg-4 mb-4">
                <CompanyCard Company="company" 
                            OnSelect="SelectCompany"
                            OnEdit="EditCompany"
                            OnDelete="DeleteCompany"
                            IsActive="@(AppState.ActiveCompany?.Id == company.Id)" />
            </div>
        }
    </div>
}
else
{
    <div class="text-center py-5">
        <i class="fa-light fa-building fa-3x text-muted mb-3"></i>
        <h4 class="text-muted">No hay empresas registradas</h4>
        <p class="text-muted">Comience creando su primera empresa</p>
    </div>
}

@code {
    private List<CompanyDto> companies = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCompanies();
    }

    private async Task LoadCompanies()
    {
        isLoading = true;
        try
        {
            var response = await CompanyService.GetCompaniesAsync();
            if (response.Success && response.Data != null)
            {
                companies = response.Data;
            }
            else
            {
                await Toast.ShowErrorAsync("Error al cargar las empresas");
            }
        }
        catch (Exception ex)
        {
            await Toast.ShowErrorAsync("Error inesperado al cargar las empresas");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SelectCompany(CompanyDto company)
    {
        AppState.SetCompany(new CompanyState
        {
            Id = company.Id,
            Code = company.Code ?? "",
            Name = company.Name ?? "",
            Currency = company.DefaultCurrency ?? "USD"
        });
        
        Toast.ShowSuccess($"Empresa '{company.Name}' seleccionada");
        Navigation.NavigateTo($"/companies/{company.Id}");
    }

    private void EditCompany(CompanyDto company)
    {
        Navigation.NavigateTo($"/companies/{company.Id}/edit");
    }

    private async Task DeleteCompany(CompanyDto company)
    {
        // TODO: Implementar confirmación antes de eliminar
        var response = await CompanyService.DeleteCompanyAsync(company.Id);
        if (response.Success)
        {
            await Toast.ShowSuccessAsync($"Empresa '{company.Name}' eliminada");
            await LoadCompanies();
        }
        else
        {
            await Toast.ShowErrorAsync("Error al eliminar la empresa");
        }
    }
}