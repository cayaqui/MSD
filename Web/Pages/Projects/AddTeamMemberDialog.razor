@using Core.DTOs.Auth.ProjectTeamMembers
@using Core.DTOs.Organization.Project
@using Core.DTOs.Auth.Users
@using Web.Services.Interfaces.Auth
@using Web.Services.Interfaces
@using MudBlazor
@inject IProjectTeamMemberApiService TeamMemberService
@inject IUserApiService UserService
@inject IToastService Toast

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudText Class="mb-4">
                    Add a new team member to project '@ProjectName':
                </MudText>
            </MudItem>
            
            <MudItem xs="12">
                <MudAutocomplete T="UserDto" Label="Select User" @bind-Value="_selectedUser"
                                 SearchFunc="@SearchUsers" ToStringFunc="@(u => u?.DisplayName ?? string.Empty)"
                                 Variant="Variant.Outlined" Required="true"
                                 AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
                                 ResetValueOnEmptyText="true" CoerceText="false">
                    <ItemTemplate Context="user">
                        <div class="d-flex align-center">
                            <MudAvatar Color="Color.Primary" Size="Size.Small" Class="mr-2">
                                @(user.DisplayName?.FirstOrDefault() ?? 'U')
                            </MudAvatar>
                            <div>
                                <MudText>@user.DisplayName</MudText>
                                <MudText Typo="Typo.caption">@user.Email</MudText>
                            </div>
                        </div>
                    </ItemTemplate>
                </MudAutocomplete>
            </MudItem>
            
            <MudItem xs="12">
                <MudSelect @bind-Value="_role" Label="Role" Variant="Variant.Outlined" Required="true">
                    <MudSelectItem Value="@("PROJECT_MANAGER")">Project Manager</MudSelectItem>
                    <MudSelectItem Value="@("TEAM_LEAD")">Team Lead</MudSelectItem>
                    <MudSelectItem Value="@("TEAM_MEMBER")">Team Member</MudSelectItem>
                    <MudSelectItem Value="@("VIEWER")">Viewer</MudSelectItem>
                </MudSelect>
            </MudItem>
            
            <MudItem xs="12">
                <MudNumericField @bind-Value="_allocationPercentage" Label="Allocation (%)" 
                                 Min="0" Max="100" Step="5"
                                 Variant="Variant.Outlined" 
                                 Adornment="Adornment.End" AdornmentText="%" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudDatePicker @bind-Date="_startDate" Label="Start Date" 
                               Variant="Variant.Outlined" DateFormat="yyyy-MM-dd" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudDatePicker @bind-Date="_endDate" Label="End Date (Optional)" 
                               Variant="Variant.Outlined" DateFormat="yyyy-MM-dd" />
            </MudItem>
            
            @if (_checkingAvailability)
            {
                <MudItem xs="12">
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                    <MudText Typo="Typo.caption">Checking user availability...</MudText>
                </MudItem>
            }
            
            @if (_availabilityMessage != null)
            {
                <MudItem xs="12">
                    <MudAlert Severity="@(_canAssign ? Severity.Success : Severity.Warning)">
                        @_availabilityMessage
                    </MudAlert>
                </MudItem>
            }
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" 
                   OnClick="Submit" Disabled="@(!CanSubmit() || _processing)">
            @if (_processing)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="ms-2" />
            }
            else
            {
                <span>Add Member</span>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    
    [Parameter] public Guid ProjectId { get; set; }
    [Parameter] public string ProjectName { get; set; } = string.Empty;
    
    private UserDto? _selectedUser;
    private string _role = "TEAM_MEMBER";
    private decimal _allocationPercentage = 100;
    private DateTime? _startDate = DateTime.Today;
    private DateTime? _endDate;
    
    private bool _processing = false;
    private bool _checkingAvailability = false;
    private bool _canAssign = true;
    private string? _availabilityMessage;

    private async Task<IEnumerable<UserDto>> SearchUsers(string value, CancellationToken cancellationToken = default)
    {
        if (string.IsNullOrWhiteSpace(value) || value.Length < 2)
            return new List<UserDto>();

        try
        {
            var filter = new UserFilterDto 
            { 
                SearchTerm = value,
                PageSize = 10,
                IsActive = true
            };
            
            var result = await UserService.SearchUsersAsync(filter);
            return result?.Items ?? new List<UserDto>();
        }
        catch
        {
            return new List<UserDto>();
        }
    }

    private async Task CheckAvailability()
    {
        if (_selectedUser == null || _allocationPercentage <= 0)
        {
            _availabilityMessage = null;
            return;
        }

        _checkingAvailability = true;
        try
        {
            var validation = await TeamMemberService.CanAssignUserAsync(
                _selectedUser.Id, 
                ProjectId, 
                _allocationPercentage);
                
            if (validation != null)
            {
                _canAssign = validation.CanAssign;
                _availabilityMessage = validation.CanAssign 
                    ? $"User can be assigned with {_allocationPercentage}% allocation"
                    : validation.Reason;
            }
        }
        catch
        {
            _availabilityMessage = null;
        }
        finally
        {
            _checkingAvailability = false;
        }
    }

    private bool CanSubmit()
    {
        return _selectedUser != null && 
               !string.IsNullOrEmpty(_role) && 
               _allocationPercentage > 0 && 
               _allocationPercentage <= 100 &&
               _startDate.HasValue &&
               _canAssign;
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task Submit()
    {
        if (!CanSubmit() || _selectedUser == null) return;

        _processing = true;
        try
        {
            var dto = new AssignProjectTeamMemberDto
            {
                UserId = _selectedUser.Id,
                Role = _role,
                AllocationPercentage = _allocationPercentage,
                StartDate = _startDate!.Value,
                EndDate = _endDate
            };
            
            var result = await TeamMemberService.AddTeamMemberAsync(ProjectId, dto);
            if (result != null)
            {
                Toast.ShowSuccess($"{_selectedUser.DisplayName} added to the team");
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                Toast.ShowError("Failed to add team member");
            }
        }
        catch (Exception ex)
        {
            Toast.ShowError("Error adding team member");
        }
        finally
        {
            _processing = false;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_selectedUser != null)
        {
            await CheckAvailability();
        }
    }
}