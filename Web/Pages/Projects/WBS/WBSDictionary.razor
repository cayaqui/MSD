@page "/projects/{ProjectId:guid}/wbs/dictionary"
@using Core.DTOs.Projects.WBSElement
@using Core.Enums.Projects
@using MudBlazor
@using Web.Services.Interfaces.Projects
@using Web.Services.Interfaces.Organization
@inject IWBSApiService WBSService
@inject IProjectApiService ProjectService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Diccionario WBS - @projectName</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="py-4">
    <MudBreadcrumbs Items="_breadcrumbs" Class="mb-4" />
    
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5">
                    <MudIcon Icon="@Icons.Material.Filled.Book" Class="mr-2" />
                    Diccionario de la EDT (WBS)
                </MudText>
                <MudText Typo="Typo.subtitle1" Color="Color.Secondary">
                    @projectName
                </MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Primary" 
                           StartIcon="@Icons.Material.Filled.Print"
                           OnClick="PrintDictionary">
                    Imprimir
                </MudButton>
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary" 
                           StartIcon="@Icons.Material.Filled.Download"
                           OnClick="ExportDictionary"
                           Class="ml-2">
                    Exportar
                </MudButton>
            </CardHeaderActions>
        </MudCardHeader>
    </MudCard>
    
    <MudGrid Class="mt-4">
        <!-- Filtros -->
        <MudItem xs="12" md="3">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Class="mb-3">Filtros</MudText>
                    
                    <MudTextField @bind-Value="searchTerm" 
                                  Label="Buscar" 
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Immediate="true"
                                  DebounceInterval="300"
                                  Class="mb-3" />
                    
                    <MudSelect T="WBSElementType?" 
                               @bind-Value="filterType" 
                               Label="Tipo de Elemento"
                               Variant="Variant.Outlined"
                               Class="mb-3">
                        <MudSelectItem T="WBSElementType?" Value="@null">Todos</MudSelectItem>
                        <MudSelectItem T="WBSElementType?" Value="WBSElementType.Summary">Resumen</MudSelectItem>
                        <MudSelectItem T="WBSElementType?" Value="WBSElementType.WorkPackage">Paquete de Trabajo</MudSelectItem>
                        <MudSelectItem T="WBSElementType?" Value="WBSElementType.PlanningPackage">Paquete de Planificación</MudSelectItem>
                    </MudSelect>
                    
                    <MudSelect T="int?" 
                               @bind-Value="filterLevel" 
                               Label="Nivel WBS"
                               Variant="Variant.Outlined"
                               Class="mb-3">
                        <MudSelectItem T="int?" Value="@null">Todos los niveles</MudSelectItem>
                        @for (int i = 1; i <= maxLevel; i++)
                        {
                            <MudSelectItem T="int?" Value="@i">Nivel @i</MudSelectItem>
                        }
                    </MudSelect>
                    
                    <MudSwitch @bind-Value="showOnlyIncomplete" 
                               Label="Solo incompletos" 
                               Color="Color.Warning" />
                </MudCardContent>
            </MudCard>
            
            <!-- Estadísticas -->
            <MudCard Class="mt-4">
                <MudCardContent>
                    <MudText Typo="Typo.h6" Class="mb-3">Estadísticas</MudText>
                    
                    <MudList Dense="true">
                        <MudListItem Icon="@Icons.Material.Filled.Folder" IconColor="Color.Primary">
                            <MudText>Total Elementos: <strong>@wbsElements.Count</strong></MudText>
                        </MudListItem>
                        <MudListItem Icon="@Icons.Material.Filled.CheckCircle" IconColor="Color.Success">
                            <MudText>Completos: <strong>@completeCount</strong></MudText>
                        </MudListItem>
                        <MudListItem Icon="@Icons.Material.Filled.Warning" IconColor="Color.Warning">
                            <MudText>Incompletos: <strong>@incompleteCount</strong></MudText>
                        </MudListItem>
                    </MudList>
                    
                    <MudProgressLinear Color="Color.Success" 
                                       Value="@completionPercentage" 
                                       Size="Size.Large" 
                                       Class="mt-3">
                        <MudText Typo="Typo.body2">@completionPercentage.ToString("0")% Completado</MudText>
                    </MudProgressLinear>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <!-- Diccionario -->
        <MudItem xs="12" md="9">
            @if (isLoading)
            {
                <MudCard>
                    <MudCardContent>
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                        <MudText Align="Align.Center" Class="mt-4">Cargando diccionario WBS...</MudText>
                    </MudCardContent>
                </MudCard>
            }
            else
            {
                @foreach (var element in GetFilteredElements())
                {
                    <MudCard Class="mb-3">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <div class="d-flex align-center">
                                    <MudIcon Icon="@GetIcon(element.ElementType)" 
                                             Color="@GetIconColor(element.ElementType)" 
                                             Class="mr-2" />
                                    <div>
                                        <MudText Typo="Typo.h6">@element.Code - @element.Name</MudText>
                                        <div class="d-flex gap-2 mt-1">
                                            <MudChip T="string" Size="Size.Small" Color="@GetIconColor(element.ElementType)">
                                                @GetElementTypeDisplay(element.ElementType)
                                            </MudChip>
                                            <MudChip T="string" Size="Size.Small" Color="Color.Info">
                                                Nivel @element.HierarchyLevel
                                            </MudChip>
                                            @if (element.Dictionary != null && !string.IsNullOrEmpty(element.Dictionary.ResponsibleRole))
                                            {
                                                <MudChip T="string" Size="Size.Small" Icon="@Icons.Material.Filled.Person">
                                                    @element.Dictionary.ResponsibleRole
                                                </MudChip>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                @if (element.Dictionary == null || !IsComplete(element.Dictionary))
                                {
                                    <MudTooltip Text="Información incompleta">
                                        <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Warning" />
                                    </MudTooltip>
                                }
                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                               Title="Editar"
                                               OnClick="@(() => EditDictionary(element))" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            @if (element.Dictionary != null)
                            {
                                <MudGrid>
                                    <!-- Descripción -->
                                    <MudItem xs="12">
                                        <MudText Typo="Typo.subtitle2" Class="mb-1">Descripción del Trabajo</MudText>
                                        <MudText Typo="Typo.body2" Class="mb-3">
                                            @(string.IsNullOrWhiteSpace(element.Dictionary.Description) 
                                                ? "Sin descripción" 
                                                : element.Dictionary.Description)
                                        </MudText>
                                    </MudItem>
                                    
                                    <!-- Entregables -->
                                    <MudItem xs="12" md="6">
                                        <MudText Typo="Typo.subtitle2" Class="mb-1">Entregables</MudText>
                                        @if (!string.IsNullOrWhiteSpace(element.Dictionary.Deliverables))
                                        {
                                            <MudList Dense="true">
                                                @foreach (var deliverable in element.Dictionary.Deliverables.Split('\n'))
                                                {
                                                    if (!string.IsNullOrWhiteSpace(deliverable))
                                                    {
                                                        <MudListItem Icon="@Icons.Material.Filled.CheckBox">
                                                            <MudText Typo="Typo.body2">@deliverable.Trim()</MudText>
                                                        </MudListItem>
                                                    }
                                                }
                                            </MudList>
                                        }
                                        else
                                        {
                                            <MudText Typo="Typo.body2" Color="Color.Secondary">No especificados</MudText>
                                        }
                                    </MudItem>
                                    
                                    <!-- Criterios de Aceptación -->
                                    <MudItem xs="12" md="6">
                                        <MudText Typo="Typo.subtitle2" Class="mb-1">Criterios de Aceptación</MudText>
                                        @if (!string.IsNullOrWhiteSpace(element.Dictionary.AcceptanceCriteria))
                                        {
                                            <MudList Dense="true">
                                                @foreach (var criteria in element.Dictionary.AcceptanceCriteria.Split('\n'))
                                                {
                                                    if (!string.IsNullOrWhiteSpace(criteria))
                                                    {
                                                        <MudListItem Icon="@Icons.Material.Filled.Rule">
                                                            <MudText Typo="Typo.body2">@criteria.Trim()</MudText>
                                                        </MudListItem>
                                                    }
                                                }
                                            </MudList>
                                        }
                                        else
                                        {
                                            <MudText Typo="Typo.body2" Color="Color.Secondary">No especificados</MudText>
                                        }
                                    </MudItem>
                                    
                                    <!-- Información adicional -->
                                    <MudItem xs="12">
                                        <MudDivider Class="my-3" />
                                        <MudGrid>
                                            <MudItem xs="12" md="4">
                                                <MudText Typo="Typo.caption">Responsable</MudText>
                                                <MudText Typo="Typo.body2">
                                                    @(element.Dictionary.ResponsibleRole ?? "No asignado")
                                                </MudText>
                                            </MudItem>
                                            <MudItem xs="12" md="4">
                                                <MudText Typo="Typo.caption">Duración Estimada</MudText>
                                                <MudText Typo="Typo.body2">
                                                    @(element.Dictionary.EstimatedDuration?.ToString() ?? "0") días
                                                </MudText>
                                            </MudItem>
                                            <MudItem xs="12" md="4">
                                                <MudText Typo="Typo.caption">Esfuerzo Estimado</MudText>
                                                <MudText Typo="Typo.body2">
                                                    @(element.Dictionary.EstimatedEffort?.ToString("0.0") ?? "0") horas
                                                </MudText>
                                            </MudItem>
                                        </MudGrid>
                                    </MudItem>
                                    
                                    <!-- Supuestos y Restricciones -->
                                    @if (!string.IsNullOrWhiteSpace(element.Dictionary.Assumptions) || 
                                         !string.IsNullOrWhiteSpace(element.Dictionary.Constraints))
                                    {
                                        <MudItem xs="12">
                                            <MudDivider Class="my-3" />
                                            <MudGrid>
                                                @if (!string.IsNullOrWhiteSpace(element.Dictionary.Assumptions))
                                                {
                                                    <MudItem xs="12" md="6">
                                                        <MudText Typo="Typo.subtitle2" Class="mb-1">Supuestos</MudText>
                                                        <MudText Typo="Typo.body2">@element.Dictionary.Assumptions</MudText>
                                                    </MudItem>
                                                }
                                                @if (!string.IsNullOrWhiteSpace(element.Dictionary.Constraints))
                                                {
                                                    <MudItem xs="12" md="6">
                                                        <MudText Typo="Typo.subtitle2" Class="mb-1">Restricciones</MudText>
                                                        <MudText Typo="Typo.body2">@element.Dictionary.Constraints</MudText>
                                                    </MudItem>
                                                }
                                            </MudGrid>
                                        </MudItem>
                                    }
                                </MudGrid>
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Info">
                                    No hay información en el diccionario para este elemento.
                                    <MudButton Color="Color.Primary" 
                                               Variant="Variant.Text" 
                                               StartIcon="@Icons.Material.Filled.Add"
                                               OnClick="@(() => EditDictionary(element))"
                                               Class="ml-2">
                                        Agregar Información
                                    </MudButton>
                                </MudAlert>
                            }
                        </MudCardContent>
                    </MudCard>
                }
                
                @if (!GetFilteredElements().Any())
                {
                    <MudCard>
                        <MudCardContent>
                            <MudText Align="Align.Center" Typo="Typo.h6">No se encontraron elementos</MudText>
                            <MudText Align="Align.Center" Typo="Typo.body1" Color="Color.Secondary">
                                Intente ajustar los filtros de búsqueda
                            </MudText>
                        </MudCardContent>
                    </MudCard>
                }
            }
        </MudItem>
    </MudGrid>
</MudContainer>

<style>
    @@media print {
        .mud-appbar, .mud-drawer, .mud-fab {
            display: none !important;
        }
    }
</style>

@code {
    [Parameter] public Guid ProjectId { get; set; }
    
    private bool isLoading = true;
    private string projectName = string.Empty;
    private List<WBSElementDetailDto> wbsElements = new();
    private List<BreadcrumbItem> _breadcrumbs = new();
    
    // Filtros
    private string searchTerm = string.Empty;
    private WBSElementType? filterType;
    private int? filterLevel;
    private bool showOnlyIncomplete = false;
    
    // Estadísticas
    private int maxLevel = 1;
    private int completeCount = 0;
    private int incompleteCount = 0;
    private double completionPercentage = 0;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadProject();
        await LoadWBSDictionary();
        SetupBreadcrumbs();
    }
    
    private async Task LoadProject()
    {
        try
        {
            var project = await ProjectService.GetProjectByIdAsync(ProjectId);
            if (project != null)
            {
                projectName = project.Name;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al cargar proyecto: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task LoadWBSDictionary()
    {
        try
        {
            isLoading = true;
            var hierarchy = await WBSService.GetWBSHierarchyAsync(ProjectId);
            
            // Load dictionary details for each element
            var detailedElements = new List<WBSElementDetailDto>();
            foreach (var element in hierarchy)
            {
                try
                {
                    var detailed = await WBSService.GetWBSElementByIdAsync(element.Id);
                    detailedElements.Add(detailed);
                }
                catch
                {
                    // If we can't load details, create a basic version
                    detailedElements.Add(new WBSElementDetailDto
                    {
                        Id = element.Id,
                        Code = element.Code,
                        Name = element.Name,
                        ElementType = element.ElementType,
                        HierarchyLevel = element.HierarchyLevel,
                        Dictionary = null
                    });
                }
            }
            
            wbsElements = detailedElements;
            CalculateStatistics();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al cargar diccionario WBS: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void CalculateStatistics()
    {
        if (wbsElements.Any())
        {
            maxLevel = wbsElements.Max(e => e.HierarchyLevel);
            completeCount = wbsElements.Count(e => e.Dictionary != null && IsComplete(e.Dictionary));
            incompleteCount = wbsElements.Count - completeCount;
            completionPercentage = (double)completeCount / wbsElements.Count * 100;
        }
    }
    
    private bool IsComplete(WBSDictionaryDto dictionary)
    {
        return !string.IsNullOrWhiteSpace(dictionary.Description) &&
               !string.IsNullOrWhiteSpace(dictionary.Deliverables) &&
               !string.IsNullOrWhiteSpace(dictionary.AcceptanceCriteria) &&
               !string.IsNullOrWhiteSpace(dictionary.ResponsibleRole);
    }
    
    private List<WBSElementDetailDto> GetFilteredElements()
    {
        var filtered = wbsElements.AsEnumerable();
        
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(e => 
                e.Code.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                e.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (e.Dictionary?.Description?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));
        }
        
        if (filterType.HasValue)
        {
            filtered = filtered.Where(e => e.ElementType == filterType.Value);
        }
        
        if (filterLevel.HasValue)
        {
            filtered = filtered.Where(e => e.HierarchyLevel == filterLevel.Value);
        }
        
        if (showOnlyIncomplete)
        {
            filtered = filtered.Where(e => e.Dictionary == null || !IsComplete(e.Dictionary));
        }
        
        return filtered.OrderBy(e => e.Code).ToList();
    }
    
    private void SetupBreadcrumbs()
    {
        _breadcrumbs = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Inicio", href: "/"),
            new BreadcrumbItem("Proyectos", href: "/projects"),
            new BreadcrumbItem(projectName, href: $"/projects/{ProjectId}/dashboard"),
            new BreadcrumbItem("WBS", href: $"/projects/{ProjectId}/wbs"),
            new BreadcrumbItem("Diccionario", href: null, disabled: true)
        };
    }
    
    private string GetIcon(WBSElementType type)
    {
        return type switch
        {
            WBSElementType.WorkPackage => Icons.Material.Filled.Work,
            WBSElementType.PlanningPackage => Icons.Material.Filled.Schedule,
            _ => Icons.Material.Filled.Folder
        };
    }
    
    private Color GetIconColor(WBSElementType type)
    {
        return type switch
        {
            WBSElementType.WorkPackage => Color.Success,
            WBSElementType.PlanningPackage => Color.Warning,
            _ => Color.Primary
        };
    }
    
    private string GetElementTypeDisplay(WBSElementType type)
    {
        return type switch
        {
            WBSElementType.Summary => "Resumen",
            WBSElementType.WorkPackage => "Paquete de Trabajo",
            WBSElementType.PlanningPackage => "Paquete de Planificación",
            _ => type.ToString()
        };
    }
    
    private async Task EditDictionary(WBSElementDetailDto element)
    {
        var parameters = new DialogParameters<WBSDictionaryDialog>
        {
            { x => x.ElementId, element.Id },
            { x => x.ElementCode, element.Code },
            { x => x.ElementName, element.Name },
            { x => x.Dictionary, element.Dictionary }
        };
        
        var dialog = await DialogService.ShowAsync<WBSDictionaryDialog>("Editar Diccionario WBS", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            await LoadWBSDictionary();
        }
    }
    
    private async Task PrintDictionary()
    {
        await IJSRuntime.InvokeVoidAsync("window.print");
    }
    
    private async Task ExportDictionary()
    {
        try
        {
            var bytes = await WBSService.ExportWBSAsync(ProjectId, Core.Enums.Documents.ExportFormat.Excel);
            var fileName = $"Diccionario_WBS_{projectName}_{DateTime.Now:yyyyMMddHHmmss}.xlsx";
            
            // Create a blob URL and trigger download
            await IJSRuntime.InvokeVoidAsync("downloadFile", fileName, bytes);
            
            Snackbar.Add("Diccionario exportado exitosamente", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al exportar diccionario: {ex.Message}", Severity.Error);
        }
    }
}

@inject IJSRuntime IJSRuntime
@inject IDialogService DialogService