@page "/projects/{ProjectId:guid}/wbs/{ElementId:guid}"
@using Core.DTOs.Projects.WBSElement
@using Core.DTOs.Projects.WorkPackageDetails
@using Core.Enums.Projects
@using Core.Enums.Progress
@using MudBlazor
@using Web.Services.Interfaces.Projects
@using Web.Services.Interfaces.Cost
@using Web.Services.Interfaces.Organization
@inject IWBSApiService WBSService
@inject IProjectApiService ProjectService
@inject Web.Services.Interfaces.Projects.IWorkPackageApiService WorkPackageService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Detalle WBS - @element?.Name</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-4 mb-4">
                <MudBreadcrumbs Items="_breadcrumbs" />
            </MudPaper>
        </MudItem>

        @if (isLoading)
        {
            <MudItem xs="12">
                <MudCard>
                    <MudCardContent>
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                        <MudText Align="Align.Center" Class="mt-4">Cargando información del elemento...</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
        else if (element != null)
        {
            <MudItem xs="12" md="8">
                <MudCard>
                    <MudCardContent>
                        <MudGrid AlignItems="Center">
                            <MudItem xs="12" md="8">
                                <MudStack Row="true" AlignItems="MudBlazor.AlignItems.Center" Spacing="2">
                                    <MudIcon Icon="@GetIcon()" Color="@GetIconColor()" />
                                    <MudText Typo="Typo.h5">@element.Name</MudText>
                                    <MudChip T="string" Size="Size.Small" Color="Color.Primary">@element.Code</MudChip>
                                    @if (!element.IsActive)
                                    {
                                        <MudChip T="string" Size="Size.Small" Color="Color.Default">Inactivo</MudChip>
                                    }
                                </MudStack>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                    @GetElementTypeText() - Nivel @element.Level
                                </MudText>
                            </MudItem>
                            <MudItem xs="12" md="4" Class="text-right">
                                <MudButton Variant="Variant.Outlined" 
                                          Color="Color.Primary" 
                                          StartIcon="@Icons.Material.Filled.Edit"
                                          OnClick="EditElement"
                                          Class="mr-2">
                                    Editar
                                </MudButton>
                                @if (element.ElementType == WBSElementType.WorkPackage && workPackageDetails != null)
                                {
                                    <MudButton Variant="Variant.Filled" 
                                              Color="Color.Primary" 
                                              StartIcon="@Icons.Material.Filled.Update"
                                              OnClick="UpdateProgress">
                                        Actualizar Progreso
                                    </MudButton>
                                }
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>

                @if (!string.IsNullOrWhiteSpace(element.Description))
                {
                    <MudCard Class="mt-4">
                        <MudCardContent>
                            <MudText Typo="Typo.h6" Class="mb-2">Descripción</MudText>
                            <MudText Typo="Typo.body1">@element.Description</MudText>
                        </MudCardContent>
                    </MudCard>
                }

                @if (element.ElementType == WBSElementType.WorkPackage && workPackageDetails != null)
                {
                    <MudCard Class="mt-4">
                        <MudCardContent>
                            <MudText Typo="Typo.h6" Class="mb-3">Información del Paquete de Trabajo</MudText>
                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudField Label="Estado" Variant="Variant.Text">
                                        <MudChip T="string" Color="@GetStatusColor(workPackageDetails.Status)" Size="Size.Small">
                                            @workPackageDetails.Status.ToString()
                                        </MudChip>
                                    </MudField>
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudField Label="Progreso" Variant="Variant.Text">
                                        <MudProgressLinear Color="Color.Primary" 
                                                          Value="@((double)workPackageDetails.ProgressPercentage)" 
                                                          Class="my-2" />
                                        <MudText Typo="Typo.body2">@workPackageDetails.ProgressPercentage%</MudText>
                                    </MudField>
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudField Label="Fecha Inicio Planificada" Variant="Variant.Text">
                                        @workPackageDetails.PlannedStartDate.ToString("dd/MM/yyyy")
                                    </MudField>
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudField Label="Fecha Fin Planificada" Variant="Variant.Text">
                                        @workPackageDetails.PlannedEndDate.ToString("dd/MM/yyyy")
                                    </MudField>
                                </MudItem>
                                @if (workPackageDetails.ActualStartDate.HasValue)
                                {
                                    <MudItem xs="12" md="6">
                                        <MudField Label="Fecha Inicio Real" Variant="Variant.Text">
                                            @workPackageDetails.ActualStartDate.Value.ToString("dd/MM/yyyy")
                                        </MudField>
                                    </MudItem>
                                }
                                @if (workPackageDetails.ActualEndDate.HasValue)
                                {
                                    <MudItem xs="12" md="6">
                                        <MudField Label="Fecha Fin Real" Variant="Variant.Text">
                                            @workPackageDetails.ActualEndDate.Value.ToString("dd/MM/yyyy")
                                        </MudField>
                                    </MudItem>
                                }
                                <MudItem xs="12" md="4">
                                    <MudField Label="Presupuesto" Variant="Variant.Text">
                                        @workPackageDetails.Budget.ToString("C")
                                    </MudField>
                                </MudItem>
                                <MudItem xs="12" md="4">
                                    <MudField Label="Costo Real" Variant="Variant.Text">
                                        @workPackageDetails.ActualCost.ToString("C")
                                    </MudField>
                                </MudItem>
                                <MudItem xs="12" md="4">
                                    <MudField Label="Valor Ganado" Variant="Variant.Text">
                                        @workPackageDetails.EarnedValue.ToString("C")
                                    </MudField>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                }

                @if (HasDictionaryData())
                {
                    <MudCard Class="mt-4">
                        <MudCardContent>
                            <MudText Typo="Typo.h6" Class="mb-3">Diccionario WBS</MudText>
                            <MudGrid>
                                @if (!string.IsNullOrWhiteSpace(dictionary?.DeliverableDescription))
                                {
                                    <MudItem xs="12">
                                        <MudField Label="Descripción del Entregable" Variant="Variant.Text">
                                            <MudText Typo="Typo.body2">@dictionary.DeliverableDescription</MudText>
                                        </MudField>
                                    </MudItem>
                                }
                                @if (!string.IsNullOrWhiteSpace(dictionary?.AcceptanceCriteria))
                                {
                                    <MudItem xs="12">
                                        <MudField Label="Criterios de Aceptación" Variant="Variant.Text">
                                            <MudText Typo="Typo.body2">@dictionary.AcceptanceCriteria</MudText>
                                        </MudField>
                                    </MudItem>
                                }
                                @if (!string.IsNullOrWhiteSpace(dictionary?.Assumptions))
                                {
                                    <MudItem xs="12">
                                        <MudField Label="Supuestos" Variant="Variant.Text">
                                            <MudText Typo="Typo.body2">@dictionary.Assumptions</MudText>
                                        </MudField>
                                    </MudItem>
                                }
                                @if (!string.IsNullOrWhiteSpace(dictionary?.Constraints))
                                {
                                    <MudItem xs="12">
                                        <MudField Label="Restricciones" Variant="Variant.Text">
                                            <MudText Typo="Typo.body2">@dictionary.Constraints</MudText>
                                        </MudField>
                                    </MudItem>
                                }
                                @if (!string.IsNullOrWhiteSpace(dictionary?.ExclusionsInclusions))
                                {
                                    <MudItem xs="12">
                                        <MudField Label="Exclusiones/Inclusiones" Variant="Variant.Text">
                                            <MudText Typo="Typo.body2">@dictionary.ExclusionsInclusions</MudText>
                                        </MudField>
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                }
            </MudItem>

            <MudItem xs="12" md="4">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h6" Class="mb-3">Información General</MudText>
                        <MudSimpleTable Dense="true">
                            <tbody>
                                <tr>
                                    <td><strong>Código:</strong></td>
                                    <td>@element.Code</td>
                                </tr>
                                <tr>
                                    <td><strong>Tipo:</strong></td>
                                    <td>@GetElementTypeText()</td>
                                </tr>
                                <tr>
                                    <td><strong>Nivel:</strong></td>
                                    <td>@element.Level</td>
                                </tr>
                                @if (element.ControlAccountCode != null)
                                {
                                    <tr>
                                        <td><strong>Cuenta Control:</strong></td>
                                        <td>@element.ControlAccountCode</td>
                                    </tr>
                                }
                                <tr>
                                    <td><strong>Estado:</strong></td>
                                    <td>
                                        @if (element.IsActive)
                                        {
                                            <MudChip T="string" Size="Size.Small" Color="Color.Success">Activo</MudChip>
                                        }
                                        else
                                        {
                                            <MudChip T="string" Size="Size.Small" Color="Color.Default">Inactivo</MudChip>
                                        }
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>Creado:</strong></td>
                                    <td>@element.CreatedAt.ToString("dd/MM/yyyy")</td>
                                </tr>
                                @if (element.UpdatedAt.HasValue)
                                {
                                    <tr>
                                        <td><strong>Modificado:</strong></td>
                                        <td>@element.UpdatedAt.Value.ToString("dd/MM/yyyy")</td>
                                    </tr>
                                }
                            </tbody>
                        </MudSimpleTable>
                    </MudCardContent>
                </MudCard>

                @if (element.Children?.Any() == true)
                {
                    <MudCard Class="mt-4">
                        <MudCardContent>
                            <MudText Typo="Typo.h6" Class="mb-3">Elementos Hijos</MudText>
                            <MudList T="WBSElementDto" Dense="true">
                                @foreach (var child in element.Children.OrderBy(c => c.Code))
                                {
                                    <MudListItem T="WBSElementDto" Icon="@GetIcon(child)" 
                                                 IconColor="@GetIconColor(child)"
                                                 OnClick="@(() => NavigateToElement(child.Id))">
                                        <MudText>@child.Code - @child.Name</MudText>
                                    </MudListItem>
                                }
                            </MudList>
                        </MudCardContent>
                    </MudCard>
                }

                <MudCard Class="mt-4">
                    <MudCardContent>
                        <MudText Typo="Typo.h6" Class="mb-3">Acciones</MudText>
                        <MudStack Spacing="2">
                            @if ((element.ElementType == WBSElementType.Summary || element.ElementType == WBSElementType.Project || element.ElementType == WBSElementType.Phase) && element.CanHaveChildren)
                            {
                                <MudButton Variant="Variant.Outlined" 
                                          Color="Color.Primary" 
                                          StartIcon="@Icons.Material.Filled.Add"
                                          FullWidth="true"
                                          OnClick="@(() => AddChild())">
                                    Agregar Elemento Hijo
                                </MudButton>
                            }
                            @if ((element.ElementType == WBSElementType.Summary || element.ElementType == WBSElementType.Project || element.ElementType == WBSElementType.Phase) && element.ChildrenCount == 0)
                            {
                                <MudButton Variant="Variant.Outlined" 
                                          Color="Color.Secondary" 
                                          StartIcon="@Icons.Material.Filled.Transform"
                                          FullWidth="true"
                                          OnClick="@(() => ConvertToWorkPackage())">
                                    Convertir a Paquete de Trabajo
                                </MudButton>
                                <MudButton Variant="Variant.Outlined" 
                                          Color="Color.Secondary" 
                                          StartIcon="@Icons.Material.Filled.Transform"
                                          FullWidth="true"
                                          OnClick="@(() => ConvertToPlanningPackage())">
                                    Convertir a Paquete de Planificación
                                </MudButton>
                            }
                            @if (element.ElementType == WBSElementType.PlanningPackage)
                            {
                                <MudButton Variant="Variant.Outlined" 
                                          Color="Color.Secondary" 
                                          StartIcon="@Icons.Material.Filled.Transform"
                                          FullWidth="true"
                                          OnClick="@(() => ConvertPlanningToWorkPackage())">
                                    Convertir a Paquete de Trabajo
                                </MudButton>
                            }
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    [Parameter] public Guid ProjectId { get; set; }
    [Parameter] public Guid ElementId { get; set; }

    private bool isLoading = true;
    private string projectName = string.Empty;
    private WBSElementDetailDto? element;
    private WorkPackageDetailsDto? workPackageDetails;
    private WBSDictionaryDto? dictionary;
    private List<BreadcrumbItem> _breadcrumbs = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            
            // Load project info
            var project = await ProjectService.GetProjectByIdAsync(ProjectId);
            if (project != null)
            {
                projectName = project.Name;
            }

            // Load WBS element
            element = await WBSService.GetWBSElementByIdAsync(ElementId);
            
            if (element != null)
            {
                // Load dictionary
                dictionary = await WBSService.GetWBSDictionaryAsync(ElementId);
                
                // Load work package details if applicable
                if (element.ElementType == WBSElementType.WorkPackage)
                {
                    workPackageDetails = await WorkPackageService.GetWorkPackageByIdAsync(ElementId);
                }
                
                SetupBreadcrumbs();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al cargar información: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SetupBreadcrumbs()
    {
        _breadcrumbs = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Inicio", href: "/"),
            new BreadcrumbItem("Proyectos", href: "/projects"),
            new BreadcrumbItem(projectName, href: $"/projects/{ProjectId}"),
            new BreadcrumbItem("WBS", href: $"/projects/{ProjectId}/wbs"),
            new BreadcrumbItem(element?.Name ?? "Detalle", href: null, disabled: true)
        };
    }

    private string GetIcon()
    {
        return element?.ElementType switch
        {
            WBSElementType.WorkPackage => Icons.Material.Filled.Work,
            WBSElementType.PlanningPackage => Icons.Material.Filled.Schedule,
            _ => Icons.Material.Filled.Folder
        };
    }

    private string GetIcon(WBSElementDto child)
    {
        return child.ElementType switch
        {
            WBSElementType.WorkPackage => Icons.Material.Filled.Work,
            WBSElementType.PlanningPackage => Icons.Material.Filled.Schedule,
            _ => Icons.Material.Filled.Folder
        };
    }

    private Color GetIconColor()
    {
        return element?.ElementType switch
        {
            WBSElementType.WorkPackage => Color.Success,
            WBSElementType.PlanningPackage => Color.Warning,
            _ => Color.Primary
        };
    }

    private Color GetIconColor(WBSElementDto child)
    {
        return child.ElementType switch
        {
            WBSElementType.WorkPackage => Color.Success,
            WBSElementType.PlanningPackage => Color.Warning,
            _ => Color.Primary
        };
    }

    private string GetElementTypeText()
    {
        return element?.ElementType switch
        {
            WBSElementType.WorkPackage => "Paquete de Trabajo",
            WBSElementType.PlanningPackage => "Paquete de Planificación",
            _ => "Elemento WBS"
        };
    }

    private Color GetStatusColor(WorkPackageStatus status)
    {
        return status switch
        {
            WorkPackageStatus.NotStarted => Color.Default,
            WorkPackageStatus.InProgress => Color.Primary,
            WorkPackageStatus.Completed => Color.Success,
            WorkPackageStatus.OnHold => Color.Warning,
            WorkPackageStatus.Cancelled => Color.Error,
            _ => Color.Default
        };
    }

    private bool HasDictionaryData()
    {
        return dictionary != null && (
            !string.IsNullOrWhiteSpace(dictionary.DeliverableDescription) ||
            !string.IsNullOrWhiteSpace(dictionary.AcceptanceCriteria) ||
            !string.IsNullOrWhiteSpace(dictionary.Assumptions) ||
            !string.IsNullOrWhiteSpace(dictionary.Constraints) ||
            !string.IsNullOrWhiteSpace(dictionary.ExclusionsInclusions)
        );
    }

    private void NavigateToElement(Guid elementId)
    {
        NavigationManager.NavigateTo($"/projects/{ProjectId}/wbs/{elementId}");
    }

    private async Task EditElement()
    {
        var parameters = new DialogParameters<WBSElementDialog>
        {
            { x => x.ProjectId, ProjectId },
            { x => x.ElementId, ElementId },
            { x => x.IsEdit, true }
        };

        var dialog = await DialogService.ShowAsync<WBSElementDialog>("Editar Elemento WBS", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task AddChild()
    {
        var parameters = new DialogParameters<WBSElementDialog>
        {
            { x => x.ProjectId, ProjectId },
            { x => x.ParentId, ElementId },
            { x => x.IsEdit, false }
        };

        var dialog = await DialogService.ShowAsync<WBSElementDialog>("Agregar Elemento Hijo", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task UpdateProgress()
    {
        // TODO: Implement progress update dialog
        Snackbar.Add("Funcionalidad de actualización de progreso próximamente", Severity.Info);
    }

    private async Task ConvertToWorkPackage()
    {
        var parameters = new DialogParameters<ConvertToWorkPackageDialog>
        {
            { x => x.WBSElementId, ElementId },
            { x => x.ProjectId, ProjectId }
        };

        var dialog = await DialogService.ShowAsync<ConvertToWorkPackageDialog>("Convertir a Paquete de Trabajo", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task ConvertToPlanningPackage()
    {
        var parameters = new DialogParameters<ConvertToPlanningPackageDialog>
        {
            { x => x.WBSElementId, ElementId },
            { x => x.ProjectId, ProjectId }
        };

        var dialog = await DialogService.ShowAsync<ConvertToPlanningPackageDialog>("Convertir a Paquete de Planificación", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task ConvertPlanningToWorkPackage()
    {
        // TODO: Implement planning to work package conversion dialog
        Snackbar.Add("Funcionalidad de conversión próximamente", Severity.Info);
    }
}