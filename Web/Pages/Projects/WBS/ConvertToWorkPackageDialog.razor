@using Core.DTOs.Projects.WorkPackageDetails
@using Core.DTOs.Cost.ControlAccounts
@using Core.DTOs.Auth.Users
@using Core.Enums.Progress
@using MudBlazor
@using Web.Services.Interfaces.Projects
@using Web.Services.Interfaces.Cost
@using Web.Services.Interfaces
@inject IWBSApiService WBSService
@inject IControlAccountApiService ControlAccountService
@inject IUserService UserService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@isFormValid">
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.body1" Class="mb-4">
                        Esta acción convertirá el elemento WBS en un paquete de trabajo. 
                        Los paquetes de trabajo son los elementos de nivel más bajo donde se realiza el trabajo real.
                    </MudText>
                </MudItem>

                <MudItem xs="12">
                    <MudAutocomplete T="ControlAccountDto"
                                     @bind-Value="selectedControlAccount"
                                     Label="Cuenta de Control"
                                     Required="true"
                                     RequiredError="La cuenta de control es requerida"
                                     SearchFunc="@SearchControlAccounts"
                                     ToStringFunc="@(ca => ca?.Code + " - " + ca?.Name)"
                                     Variant="Variant.Outlined"
                                     Dense="true"
                                     CoerceText="true">
                        <ItemTemplate Context="ca">
                            <MudText>@ca.Code - @ca.Name</MudText>
                        </ItemTemplate>
                    </MudAutocomplete>
                </MudItem>

                <MudItem xs="12">
                    <MudSelect @bind-Value="model.ProgressMethod" 
                               Label="Método de Progreso"
                               Required="true"
                               RequiredError="El método de progreso es requerido"
                               Variant="Variant.Outlined">
                        <MudSelectItem Value="ProgressMethod.Manual">Manual</MudSelectItem>
                        <MudSelectItem Value="ProgressMethod.WeightedActivities">Actividades Ponderadas</MudSelectItem>
                        <MudSelectItem Value="ProgressMethod.Milestones">Hitos</MudSelectItem>
                        <MudSelectItem Value="ProgressMethod.UnitsProduced">Unidades Producidas</MudSelectItem>
                        <MudSelectItem Value="ProgressMethod.DurationBased">Basado en Duración</MudSelectItem>
                    </MudSelect>
                </MudItem>

                <MudItem xs="12">
                    <MudAutocomplete T="UserDto"
                                     @bind-Value="selectedUser"
                                     Label="Usuario Responsable (Opcional)"
                                     SearchFunc="@SearchUsers"
                                     ToStringFunc="@(u => u?.DisplayName)"
                                     Variant="Variant.Outlined"
                                     Dense="true">
                        <ItemTemplate Context="user">
                            <MudStack Row="true" AlignItems="MudBlazor.AlignItems.Center">
                                <MudAvatar Size="Size.Small">
                                    @if (!string.IsNullOrEmpty(user.PhotoUrl))
                                    {
                                        <MudImage Src="@user.PhotoUrl" />
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Person" />
                                    }
                                </MudAvatar>
                                <MudText>@user.DisplayName</MudText>
                            </MudStack>
                        </ItemTemplate>
                    </MudAutocomplete>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
        <MudButton Color="Color.Primary" 
                   Variant="Variant.Filled" 
                   OnClick="Submit"
                   Disabled="@(!isFormValid || isProcessing)">
            @if (isProcessing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Convirtiendo...</MudText>
            }
            else
            {
                <MudText>Convertir</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    
    [Parameter] public Guid WBSElementId { get; set; }
    [Parameter] public Guid ProjectId { get; set; }

    private MudForm form = default!;
    private bool isFormValid;
    private bool isProcessing;
    
    private ConvertToWorkPackageDto model = new();
    private ControlAccountDto? selectedControlAccount;
    private UserDto? selectedUser;

    protected override void OnInitialized()
    {
        model.ProgressMethod = ProgressMethod.Manual;
    }

    private async Task<IEnumerable<ControlAccountDto>> SearchControlAccounts(string value, CancellationToken cancellationToken = default)
    {
        try
        {
            var filter = new ControlAccountFilterDto
            {
                ProjectId = ProjectId,
                SearchTerm = value,
                PageSize = 10,
                OnlyActive = true
            };
            
            var result = await ControlAccountService.GetControlAccountsAsync(filter);
            return result?.Items ?? new List<ControlAccountDto>();
        }
        catch
        {
            return new List<ControlAccountDto>();
        }
    }

    private async Task<IEnumerable<UserDto>> SearchUsers(string value, CancellationToken cancellationToken = default)
    {
        try
        {
            var users = await UserService.SearchUsersAsync(value);
            return users ?? new List<UserDto>();
        }
        catch
        {
            return new List<UserDto>();
        }
    }

    private async Task Submit()
    {
        try
        {
            isProcessing = true;
            
            if (selectedControlAccount == null)
            {
                Snackbar.Add("Debe seleccionar una cuenta de control", Severity.Warning);
                return;
            }
            
            model.ControlAccountId = selectedControlAccount.Id;
            model.ResponsibleUserId = selectedUser?.Id;
            
            await WBSService.ConvertToWorkPackageAsync(WBSElementId, model);
            
            Snackbar.Add("Elemento convertido a paquete de trabajo exitosamente", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al convertir: {ex.Message}", Severity.Error);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void Cancel() => MudDialog.Cancel();
}