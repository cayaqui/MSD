
@using Web.Services.Interfaces
@inject IAuthService AuthService
@inject ILogger<AuthInitializer> Logger

@code {
    [Parameter] public RenderFragment ChildContent { get; set; } = null!;

    private bool _initialized = false;
    private bool _initializing = true;
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogInformation("Initializing authentication service...");

            // Initialize the auth service which will load user data and permissions
            await AuthService.InitializeAsync();

            _initialized = true;
            Logger.LogInformation("Authentication service initialized successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to initialize authentication service");
            _errorMessage = "Error al inicializar la autenticación. Por favor, recargue la página.";
        }
        finally
        {
            _initializing = false;
        }
    }
}

@if (_initializing)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-3">Inicializando aplicación...</p>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger m-4" role="alert">
        <h4 class="alert-heading">Error de Inicialización</h4>
        <p>@_errorMessage</p>
        <hr>
        <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo(Navigation.Uri, true))">
            Recargar Página
        </button>
    </div>
}
else if (_initialized)
{
    @ChildContent
}

@code {
    [Inject] private NavigationManager Navigation { get; set; } = null!;
}