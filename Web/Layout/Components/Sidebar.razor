@using Web.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Web.Models.Navigation

@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject INavigationService NavigationService
@inject AuthenticationStateProvider AuthenticationStateProvider

<aside class="app-sidebar @(IsCollapsed ? "collapsed" : "")"
       data-toggle="sidebar"
       @onclick:stopPropagation="true">

    <!-- Sidebar Header -->
    <div class="main-sidebar-header">
        <a href="/" class="header-logo">
            <img src="/images/brand/desktop-logo.png" alt="MSD" class="desktop-logo" />
            <img src="/images/brand/toggle-logo.png" alt="EzPro" class="toggle-logo" />
        </a>
    </div>

    <!-- Sidebar Body -->
    <div class="main-sidebar" id="sidebar-scroll">
        @if (isLoading)
        {
            <div class="text-center p-4">
                <div class="spinner-border spinner-border-sm text-primary" role="status">
                    <span class="visually-hidden">Cargando menú...</span>
                </div>
            </div>
        }
        else if (navigationMenu != null)
        {
            <nav class="slide-menu">
                @* Home Item *@
                @if (navigationMenu.HomeItem != null)
                {
                    <ul class="slide-menu-items">
                        <SidebarMenuItem Item="@navigationMenu.HomeItem"
                                         IsCollapsed="@IsCollapsed"
                                         CurrentUrl="@currentUrl"
                                         OnItemClick="@HandleMenuItemClick" />
                    </ul>
                }

                @* Navigation Sections *@
                @foreach (var navSection in navigationMenu.Sections.OrderBy(s => s.Order))
                {
                    <!-- Section Category -->
                    @if (!string.IsNullOrEmpty(navSection.Title))
                    {
                        <div class="slide__category">
                            <span class="category-name">@navSection.Title</span>
                        </div>
                    }

                    <!-- Menu Items -->
                    <ul class="slide-menu-items">
                        @foreach (var item in navSection.Items.OrderBy(i => i.Order))
                        {
                            <SidebarMenuItem Item="@item"
                                             IsCollapsed="@IsCollapsed"
                                             CurrentUrl="@currentUrl"
                                             OnItemClick="@HandleMenuItemClick" />
                        }
                    </ul>
                }
            </nav>
        }
        else if (!isLoading)
        {
            <div class="text-center p-4">
                <p class="text-muted">No hay elementos de menú disponibles</p>
            </div>
        }
    </div>

    <!-- Sidebar Footer -->
    <div class="sidebar-footer">
        @if (!IsCollapsed)
        {
            <div class="sidebar-footer-content">
                <small class="text-muted">
                    <i class="fa-light fa-building me-1"></i>
                    @companyName
                </small>
                <small class="text-muted">
                    v@appVersion
                </small>
            </div>
        }
        else
        {
            <button class="btn btn-link btn-sm" title="@companyName - v@appVersion">
                <i class="fa-light fa-info-circle"></i>
            </button>
        }
    </div>
</aside>

@code {
    [Parameter] public bool IsCollapsed { get; set; }
    [Parameter] public EventCallback<bool> OnToggle { get; set; }

    private NavigationMenu? navigationMenu;
    private bool isLoading = true;
    private string currentUrl = "";

    // Company info
    private string companyName = "Mi Empresa";
    private string appVersion = "1.0.0";

    protected override async Task OnInitializedAsync()
    {
        currentUrl = Navigation.ToBaseRelativePath(Navigation.Uri);
        Navigation.LocationChanged += OnLocationChanged;

        // Subscribe to navigation service events
        NavigationService.NavigationItemChanged += OnNavigationItemChanged;
        NavigationService.NavigationMenuRefreshed += OnNavigationMenuRefreshed;

        await LoadCompanyInfo();
        await LoadMenu();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Inicializar scrollbar personalizado usando SimpleBar
            await JS.InvokeVoidAsync("EzProInterop.initializeScrollbar", "sidebar-scroll");
        }
    }

    private async Task LoadCompanyInfo()
    {
        // TODO: Cargar información real de la empresa desde el servicio
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            // Aquí podrías obtener la empresa del claim del usuario
            companyName = "Constructora XYZ";
            appVersion = "1.0.0";
        }
    }

    private async Task LoadMenu()
    {
        try
        {
            isLoading = true;

            // Cargar menú desde el servicio de navegación
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                navigationMenu = await NavigationService.GetNavigationMenuForUserAsync(authState.User);
            }
            else
            {
                navigationMenu = GetGuestMenu();
            }

            // Expandir items activos
            ExpandActiveItems();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading menu: {ex.Message}");
            navigationMenu = GetDefaultMenu();
        }
        finally
        {
            isLoading = false;
        }
    }

    public async Task ReloadMenu(string projectId)
    {
        await LoadMenu();
        StateHasChanged();
    }

    private void ExpandActiveItems()
    {
        if (navigationMenu == null) return;

        // Check home item
        if (navigationMenu.HomeItem != null)
        {
            ExpandIfActive(navigationMenu.HomeItem, currentUrl);
        }

        // Check sections
        foreach (var section in navigationMenu.Sections)
        {
            foreach (var item in section.Items)
            {
                ExpandIfActive(item, currentUrl);
            }
        }
    }

    private bool ExpandIfActive(NavigationItem item, string url)
    {
        // Verificar si este item está activo
        if (!string.IsNullOrEmpty(item.Href) && IsUrlActive(item.Href, url))
        {
            // No hay propiedad IsActive en NavigationItem, pero podemos usar CSS
            return true;
        }

        // Verificar sub-items
        if (item.Children != null && item.Children.Any())
        {
            foreach (var child in item.Children)
            {
                if (ExpandIfActive(child, url))
                {
                    // No hay propiedad IsExpanded, necesitamos manejar esto diferente
                    return true;
                }
            }
        }

        return false;
    }

    private bool IsUrlActive(string itemUrl, string currentUrl)
    {
        if (string.IsNullOrEmpty(itemUrl)) return false;

        // Normalizar URLs
        itemUrl = itemUrl.Trim('/');
        currentUrl = currentUrl.Trim('/');

        // Exact match
        if (itemUrl == currentUrl) return true;

        // Parent match (current URL starts with item URL)
        if (!string.IsNullOrEmpty(currentUrl) && currentUrl.StartsWith(itemUrl + "/"))
            return true;

        return false;
    }

    private async Task ToggleCollapse()
    {
        await OnToggle.InvokeAsync(!IsCollapsed);
    }

    private async Task HandleMenuItemClick(NavigationItem item)
    {
        if (!string.IsNullOrEmpty(item.Href) && !item.IsDisabled)
        {
            Navigation.NavigateTo(item.Href);

            // En móvil, cerrar el sidebar después de navegar
            if (await IsMobile())
            {
                await OnToggle.InvokeAsync(true);
            }
        }
        else if (item.Children != null && item.Children.Any())
        {
            // Toggle expansion - esto debe manejarse en el componente SidebarMenuItem
            StateHasChanged();
        }
    }

    private async Task<bool> IsMobile()
    {
        return await JS.InvokeAsync<bool>("EzPro.Utils.isMobile");
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = Navigation.ToBaseRelativePath(e.Location);

        // Actualizar items activos
        if (navigationMenu != null)
        {
            ExpandActiveItems();
        }

        InvokeAsync(StateHasChanged);
    }

    private void OnNavigationItemChanged(object? sender, NavigationItemChangedEventArgs e)
    {
        // Reaccionar a cambios en items de navegación
        InvokeAsync(StateHasChanged);
    }

    private void OnNavigationMenuRefreshed(object? sender, EventArgs e)
    {
        // Recargar el menú cuando sea necesario
        InvokeAsync(async () =>
        {
            await LoadMenu();
            StateHasChanged();
        });
    }

    private NavigationMenu GetGuestMenu()
    {
        return new NavigationMenu
        {
            HomeItem = new NavigationItem
            {
                Id = "home",
                Title = "Inicio",
                Icon = "fa-light fa-home",
                Href = "/",
                Type = NavigationItemType.Link
            },
            Sections = new List<NavigationSection>
            {
                new NavigationSection
                {
                    Title = "PÚBLICO",
                    Order = 1,
                    Items = new List<NavigationItem>
                    {
                        new NavigationItem
                        {
                            Id = "login",
                            Title = "Iniciar Sesión",
                            Icon = "fa-light fa-sign-in",
                            Href = "/authentication/login",
                            Type = NavigationItemType.Link
                        }
                    }
                }
            }
        };
    }

    private NavigationMenu GetDefaultMenu()
    {
        return new NavigationMenu
        {
            HomeItem = new NavigationItem
            {
                Id = "home",
                Title = "Dashboard",
                Icon = "fa-light fa-home",
                Href = "/",
                Type = NavigationItemType.Link
            },
            Sections = new List<NavigationSection>
            {
                new NavigationSection
                {
                    Title = "PRINCIPAL",
                    Order = 1,
                    Items = new List<NavigationItem>
                    {
                        new NavigationItem
                        {
                            Id = "projects",
                            Title = "Proyectos",
                            Icon = "fa-light fa-project-diagram",
                            Href = "/projects",
                            Type = NavigationItemType.Link,
                            Badge = new NavigationBadge { Text = "5", Variant = "primary" }
                        }
                    }
                },
                new NavigationSection
                {
                    Title = "GESTIÓN",
                    Order = 2,
                    Items = new List<NavigationItem>
                    {
                        new NavigationItem
                        {
                            Id = "scope",
                            Title = "Alcance",
                            Icon = "fa-light fa-tasks",
                            Type = NavigationItemType.Section,
                            Children = new List<NavigationItem>
                            {
                                new NavigationItem
                                {
                                    Id = "wbs",
                                    Title = "WBS/EDT",
                                    Href = "/scope/wbs",
                                    Type = NavigationItemType.Link
                                },
                                new NavigationItem
                                {
                                    Id = "deliverables",
                                    Title = "Entregables",
                                    Href = "/scope/deliverables",
                                    Type = NavigationItemType.Link
                                },
                                new NavigationItem
                                {
                                    Id = "changes",
                                    Title = "Control de Cambios",
                                    Href = "/scope/changes",
                                    Type = NavigationItemType.Link
                                }
                            }
                        },
                        new NavigationItem
                        {
                            Id = "schedule",
                            Title = "Cronograma",
                            Icon = "fa-light fa-calendar-alt",
                            Type = NavigationItemType.Section,
                            Children = new List<NavigationItem>
                            {
                                new NavigationItem
                                {
                                    Id = "activities",
                                    Title = "Actividades",
                                    Href = "/schedule/activities",
                                    Type = NavigationItemType.Link
                                },
                                new NavigationItem
                                {
                                    Id = "gantt",
                                    Title = "Gantt",
                                    Href = "/schedule/gantt",
                                    Type = NavigationItemType.Link
                                },
                                new NavigationItem
                                {
                                    Id = "critical-path",
                                    Title = "Ruta Crítica",
                                    Href = "/schedule/critical-path",
                                    Type = NavigationItemType.Link
                                }
                            }
                        },
                        new NavigationItem
                        {
                            Id = "costs",
                            Title = "Costos",
                            Icon = "fa-light fa-dollar-sign",
                            Type = NavigationItemType.Section,
                            Children = new List<NavigationItem>
                            {
                                new NavigationItem
                                {
                                    Id = "budget",
                                    Title = "Presupuesto",
                                    Href = "/costs/budget",
                                    Type = NavigationItemType.Link
                                },
                                new NavigationItem
                                {
                                    Id = "control",
                                    Title = "Control",
                                    Href = "/costs/control",
                                    Type = NavigationItemType.Link
                                },
                                new NavigationItem
                                {
                                    Id = "evm",
                                    Title = "Earned Value",
                                    Href = "/costs/evm",
                                    Type = NavigationItemType.Link
                                }
                            }
                        }
                    }
                },
                new NavigationSection
                {
                    Title = "CONFIGURACIÓN",
                    Order = 3,
                    Items = new List<NavigationItem>
                    {
                        new NavigationItem
                        {
                            Id = "companies",
                            Title = "Empresas",
                            Icon = "fa-light fa-building",
                            Href = "/config/companies",
                            Type = NavigationItemType.Link
                        },
                        new NavigationItem
                        {
                            Id = "users",
                            Title = "Usuarios",
                            Icon = "fa-light fa-users",
                            Href = "/config/users",
                            Type = NavigationItemType.Link
                        },
                        new NavigationItem
                        {
                            Id = "settings",
                            Title = "Ajustes",
                            Icon = "fa-light fa-cog",
                            Href = "/config/settings",
                            Type = NavigationItemType.Link
                        }
                    }
                }
            }
        };
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
        NavigationService.NavigationItemChanged -= OnNavigationItemChanged;
        NavigationService.NavigationMenuRefreshed -= OnNavigationMenuRefreshed;
    }
}