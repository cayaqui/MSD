@using Web.Components.Common
@using Web.Services.Interfaces
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject INavigationService NavigationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable

<aside class="app-sidebar @(IsCollapsed ? "collapsed" : "") @(IsMobile && !IsCollapsed ? "show" : "")"
       @onclick="HandleSidebarClick">
    <!-- Header -->
    <div class="sidebar-header">
        <a href="/" class="sidebar-brand">
            @if (IsCollapsed)
            {
                <span class="brand-icon">
                    <img src="/images/logo-icon.png" alt="EzPro" class="logo" />
                </span>
            }
            else
            {
                <img src="/images/logo.png" alt="EzPro" class="logo" />
                <span class="brand-text">MSD</span>
            }
        </a>
        <button class="sidebar-toggle" @onclick="ToggleSidebar" @onclick:stopPropagation="true">
            <i class="fa-light fa-bars"></i>
        </button>
    </div>

    <!-- Body -->
    <div class="sidebar-body">
        @if (navigationMenu != null)
        {
            <nav class="sidebar-nav">
                <!-- Home -->
                @if (navigationMenu.HomeItem != null)
                {
                    <div class="nav-item">
                        <a href="@navigationMenu.HomeItem.Href"
                           class="@GetNavLinkClass(navigationMenu.HomeItem.Href)"
                           @onclick="() => NavigateTo(navigationMenu.HomeItem.Href!)"
                           @onclick:stopPropagation="true">
                            <i class="nav-icon @navigationMenu.HomeItem.Icon"></i>
                            @if (!IsCollapsed)
                            {
                                <span class="nav-text">@navigationMenu.HomeItem.Title</span>
                            }
                            else
                            {
                                <span class="nav-tooltip">@navigationMenu.HomeItem.Title</span>
                            }
                        </a>
                    </div>
                }

                @foreach (var navSection in navigationMenu.Sections.Where(s => s.IsVisible))
                {
                    @if (navSection.Items.Any())
                    {
                        @if (!IsCollapsed)
                        {
                            <div class="nav-divider"></div>
                            <div class="nav-heading">@navSection.Title</div>
                        }
                        else
                        {
                            <div class="nav-divider"></div>
                        }

                        <!-- Items de la sección -->
                        @foreach (var item in navSection.Items.Where(i => i.IsVisible))
                        {
                            @RenderNavigationItem(item)
                        }
                    }
                }
            </nav>
        }
        else
        {
            <!-- Loading state -->
            <div class="nav-loading">
                <div class="spinner-border spinner-border-sm text-primary" role="status">
                    <span class="visually-hidden">Cargando...</span>
                </div>
            </div>
        }
    </div>

    <!-- Footer -->
    <div class="sidebar-footer">
        @if (IsCollapsed)
        {
            <EzDropdown Direction="EzDropdown.DropdownDirection.End"
                        Alignment="EzDropdown.DropdownAlignment.End"
                        Variant="EzDropdown.ButtonVariant.Link"
                        ButtonClass="sidebar-user-collapsed">
                <ButtonContent>
                    <EzAvatar Src="@userAvatar"
                              Alt="@userName"
                              Size="EzAvatar.AvatarSize.Small" />
                </ButtonContent>
                <ChildContent>
                    <EzDropdownItem>
                        <div class="px-3 py-2">
                            <div class="fw-semibold">@userName</div>
                            <div class="text-muted small">@userRole</div>
                        </div>
                    </EzDropdownItem>
                    <EzDropdownItem IsDivider="true" />
                    <EzDropdownItem Icon="fa-light fa-user" Href="/profile">Mi Perfil</EzDropdownItem>
                    <EzDropdownItem Icon="fa-light fa-cog" Href="/settings">Configuración</EzDropdownItem>
                    <EzDropdownItem IsDivider="true" />
                    <EzDropdownItem Icon="fa-light fa-sign-out" Href="/authentication/logout">
                        Cerrar Sesión
                    </EzDropdownItem>
                </ChildContent>
            </EzDropdown>
        }
        else
        {
            <div class="sidebar-user">
                <EzAvatar Src="@userAvatar"
                          Alt="@userName"
                          Size="EzAvatar.AvatarSize.Default"
                          ShowStatus="true"
                          Status="EzAvatar.StatusType.Online" />
                <div class="sidebar-user-info">
                    <div class="sidebar-user-name">@userName</div>
                    <div class="sidebar-user-role">@userRole</div>
                </div>
                <EzDropdown Direction="EzDropdown.DropdownDirection.Up"
                            Alignment="EzDropdown.DropdownAlignment.End"
                            Variant="EzDropdown.ButtonVariant.Link"
                            ButtonClass="ms-auto p-1">
                    <ButtonContent>
                        <i class="fa-light fa-ellipsis-v"></i>
                    </ButtonContent>
                    <ChildContent>
                        <EzDropdownItem Icon="fa-light fa-user" Href="/profile">Mi Perfil</EzDropdownItem>
                        <EzDropdownItem Icon="fa-light fa-cog" Href="/settings">Configuración</EzDropdownItem>
                        <EzDropdownItem IsDivider="true" />
                        <EzDropdownItem Icon="fa-light fa-sign-out" Href="/authentication/logout">
                            Cerrar Sesión
                        </EzDropdownItem>
                    </ChildContent>
                </EzDropdown>
            </div>
        }
    </div>
</aside>

@if (IsMobile && !IsCollapsed)
{
    <div class="sidebar-backdrop" @onclick="CloseSidebar"></div>
}

@code {
    [Parameter] public bool IsCollapsed { get; set; } = false;
    [Parameter] public EventCallback<bool> IsCollapsedChanged { get; set; }

    private NavigationMenu? navigationMenu;
    private string currentUrl = "";
    private string activeAccordionItem = "";
    private bool IsMobile = false;

    // User info
    private string userName = "Usuario";
    private string userRole = "Rol";
    private string userAvatar = "/images/placeholder.png";

    protected override async Task OnInitializedAsync()
    {
        currentUrl = Navigation.ToBaseRelativePath(Navigation.Uri);
        Navigation.LocationChanged += OnLocationChanged;

        // Detectar si es móvil
        await CheckIfMobile();

        // Cargar menú para el usuario actual
        await LoadNavigationMenu();

        // Suscribirse a cambios en el menú
        NavigationService.NavigationItemChanged += OnNavigationItemChanged;
        NavigationService.NavigationMenuRefreshed += OnNavigationMenuRefreshed;

        // Establecer el item activo
        SetActiveAccordionItem();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Detectar cambios de tamaño de ventana
            await JS.InvokeVoidAsync("eval", @"
                window.addEventListener('resize', () => {
                    DotNet.invokeMethodAsync('Web', 'OnWindowResize', window.innerWidth <= 768);
                });
            ");
        }
    }

    private async Task LoadNavigationMenu()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            userName = user.Identity.Name ?? "Usuario";
            userRole = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value ?? "Usuario";

            // Obtener avatar del usuario (por ahora placeholder)
            userAvatar = "/images/placeholder.png";

            // Cargar menú filtrado por permisos del usuario
            navigationMenu = await NavigationService.GetNavigationMenuForUserAsync(user);
        }
        else
        {
            // Cargar menú básico para usuarios no autenticados
            navigationMenu = new NavigationMenu
            {
                HomeItem = new NavigationItem
                {
                    Id = "home",
                    Title = "Inicio",
                    Icon = "fa-light fa-home",
                    Href = "/"
                }
            };
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = Navigation.ToBaseRelativePath(e.Location);
        SetActiveAccordionItem();
        InvokeAsync(StateHasChanged);
    }

    private void OnNavigationItemChanged(object? sender, NavigationItemChangedEventArgs e)
    {
        // Actualizar UI cuando cambia un item (ej: badge count)
        InvokeAsync(StateHasChanged);
    }

    private void OnNavigationMenuRefreshed(object? sender, EventArgs e)
    {
        // Recargar el menú cuando se refresca
        InvokeAsync(async () =>
        {
            await LoadNavigationMenu();
            StateHasChanged();
        });
    }

    private void SetActiveAccordionItem()
    {
        if (navigationMenu == null) return;

        // Buscar el item activo basado en la URL
        foreach (var section in navigationMenu.Sections)
        {
            foreach (var item in section.Items.Where(i => i.Type == NavigationItemType.Section))
            {
                if (item.Children.Any(child => IsActive(child.Href)))
                {
                    activeAccordionItem = item.Id;
                    return;
                }
            }
        }

        activeAccordionItem = "";
    }

    private async Task CheckIfMobile()
    {
        try
        {
            IsMobile = await JS.InvokeAsync<bool>("eval", "window.innerWidth <= 768");
        }
        catch
        {
            IsMobile = false;
        }
    }

    [JSInvokable]
    public static Task OnWindowResize(bool isMobile)
    {
        // Este método será llamado desde JavaScript cuando cambie el tamaño de la ventana
        // Necesitaríamos una forma de notificar a la instancia actual del componente
        return Task.CompletedTask;
    }

    private async Task ToggleSidebar()
    {
        IsCollapsed = !IsCollapsed;
        await IsCollapsedChanged.InvokeAsync(IsCollapsed);
    }

    private async Task CloseSidebar()
    {
        if (IsMobile)
        {
            IsCollapsed = true;
            await IsCollapsedChanged.InvokeAsync(true);
        }
    }

    private void NavigateTo(string url)
    {
        if (!string.IsNullOrEmpty(url) && !url.StartsWith("http"))
        {
            // Reemplazar {projectId} con el ID del proyecto actual si existe
            var projectId = GetCurrentProjectId();
            if (!string.IsNullOrEmpty(projectId))
            {
                url = url.Replace("{projectId}", projectId);
            }

            Navigation.NavigateTo(url);

            if (IsMobile)
            {
                _ = CloseSidebar();
            }
        }
    }

    private string? GetCurrentProjectId()
    {
        // Extraer el ID del proyecto de la URL actual
        var segments = currentUrl.Split('/');
        var projectIndex = Array.IndexOf(segments, "projects");

        if (projectIndex >= 0 && projectIndex < segments.Length - 1)
        {
            var nextSegment = segments[projectIndex + 1];
            if (Guid.TryParse(nextSegment, out _))
            {
                return nextSegment;
            }
        }

        return null;
    }

    private void HandleSidebarClick()
    {
        // Solo manejar clicks en móvil para cerrar el sidebar
        if (IsMobile && !IsCollapsed)
        {
            // El click en el sidebar no debería cerrarlo
            // Solo el backdrop lo cierra
        }
    }

    private string GetNavLinkClass(string? href)
    {
        var classes = new List<string> { "nav-link" };

        if (IsActive(href))
        {
            classes.Add("active");
        }

        return string.Join(" ", classes);
    }

    private bool IsActive(string? href)
    {
        if (string.IsNullOrEmpty(href)) return false;

        var normalizedHref = href.TrimStart('/').ToLower();
        var normalizedCurrent = currentUrl.ToLower();

        // Reemplazar {projectId} con un wildcard para la comparación
        normalizedHref = System.Text.RegularExpressions.Regex.Replace(
            normalizedHref,
            @"\{[^}]+\}",
            "[^/]+"
        );

        // Verificar coincidencia exacta o parcial
        if (normalizedCurrent == normalizedHref)
            return true;

        // Verificar si la URL actual coincide con el patrón
        var pattern = $"^{normalizedHref}$";
        return System.Text.RegularExpressions.Regex.IsMatch(normalizedCurrent, pattern);
    }

    private void ToggleAccordion(string itemId)
    {
        activeAccordionItem = activeAccordionItem == itemId ? "" : itemId;
    }

    private RenderFragment RenderNavigationItem(NavigationItem item) => builder =>
    {
        if (item.Type == NavigationItemType.Divider)
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "nav-divider");
            builder.CloseElement();
        }
        else if (item.Type == NavigationItemType.Header)
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "nav-heading");
            builder.AddContent(2, item.Title);
            builder.CloseElement();
        }
        else if (item.Type == NavigationItemType.Section && item.Children.Any())
        {
            // Sección con hijos (acordeón)
            var isExpanded = activeAccordionItem == item.Id ||
                           item.Children.Any(child => IsActive(child.Href));

            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", $"nav-item dropdown {(isExpanded ? "show" : "")}");

            // Link del acordeón
            builder.OpenElement(2, "a");
            builder.AddAttribute(3, "href", "#");
            builder.AddAttribute(4, "class", $"nav-link {(item.IsDisabled ? "disabled" : "")}");
            builder.AddAttribute(5, "onclick", EventCallback.Factory.Create(this, (MouseEventArgs e) =>
            {

                ToggleAccordion(item.Id);
            }));

            // Icono
            if (!string.IsNullOrEmpty(item.Icon))
            {
                builder.OpenElement(6, "i");
                builder.AddAttribute(7, "class", $"nav-icon {item.Icon}");
                builder.CloseElement();
            }

            // Texto
            if (!IsCollapsed)
            {
                builder.OpenElement(8, "span");
                builder.AddAttribute(9, "class", "nav-text");
                builder.AddContent(10, item.Title);
                builder.CloseElement();

                // Badge si existe
                if (!string.IsNullOrEmpty(item.Badge?.Text))
                {
                    builder.OpenElement(11, "span");
                    builder.AddAttribute(12, "class", $"nav-badge badge bg-{GetBadgeClass(item.Badge.Variant)}");
                    builder.AddContent(13, item.Badge);
                    builder.CloseElement();
                }
            }
            else
            {
                // Tooltip para vista colapsada
                builder.OpenElement(14, "span");
                builder.AddAttribute(15, "class", "nav-tooltip");
                builder.AddContent(16, item.Title);
                builder.CloseElement();
            }

            builder.CloseElement(); // a

            // Dropdown menu (solo si no está colapsado)
            if (!IsCollapsed && isExpanded)
            {
                builder.OpenElement(17, "div");
                builder.AddAttribute(18, "class", "nav-dropdown");

                foreach (var child in item.Children.Where(c => c.IsVisible))
                {
                    builder.AddContent(19, RenderNavigationItem(child));
                }

                builder.CloseElement(); // div.nav-dropdown
            }

            builder.CloseElement(); // div.nav-item
        }
        else
        {
            // Link simple
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "nav-item");

            builder.OpenElement(2, "a");
            builder.AddAttribute(3, "href", item.Href ?? "#");
            builder.AddAttribute(4, "class", GetNavLinkClass(item.Href) + (item.IsDisabled ? " disabled" : ""));

            if (!string.IsNullOrEmpty(item.Href))
            {
                builder.AddAttribute(5, "onclick", EventCallback.Factory.Create(this, (MouseEventArgs e) =>
                {
                    NavigateTo(item.Href);
                }));
            }

            // Icono
            if (!string.IsNullOrEmpty(item.Icon))
            {
                builder.OpenElement(6, "i");
                builder.AddAttribute(7, "class", $"nav-icon {item.Icon}");
                builder.CloseElement();
            }

            // Texto
            if (!IsCollapsed)
            {
                builder.OpenElement(8, "span");
                builder.AddAttribute(9, "class", "nav-text");
                builder.AddContent(10, item.Title);
                builder.CloseElement();

                // Badge si existe
                if (!string.IsNullOrEmpty(item.Badge))
                {
                    builder.OpenElement(11, "span");
                    builder.AddAttribute(12, "class", $"nav-badge badge bg-{GetBadgeClass(item.BadgeVariant)}");
                    builder.AddContent(13, item.Badge);
                    builder.CloseElement();
                }
            }
            else
            {
                // Tooltip para vista colapsada
                builder.OpenElement(14, "span");
                builder.AddAttribute(15, "class", "nav-tooltip");
                builder.AddContent(16, item.Title);
                builder.CloseElement();
            }

            builder.CloseElement(); // a
            builder.CloseElement(); // div.nav-item
        }
    };

    private string GetBadgeClass(BadgeType type)
    {
        return type switch
        {
            BadgeType.Primary => "primary",
            BadgeType.Secondary => "secondary",
            BadgeType.Success => "success",
            BadgeType.Danger => "danger",
            BadgeType.Warning => "warning",
            BadgeType.Info => "info",
            BadgeType.Light => "light",
            BadgeType.Dark => "dark",
            _ => "primary"
        };
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
        NavigationService.NavigationItemChanged -= OnNavigationItemChanged;
        NavigationService.NavigationMenuRefreshed -= OnNavigationMenuRefreshed;
    }
}