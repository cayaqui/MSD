@using Web.Models
@using Web.Models.Search
@using Web.Services.Interfaces
@using Web.Components.Common
@inject ISearchService SearchService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<EzModal @ref="modal"
         Size="EzModal.ModalSize.Large"
         ShowHeader="false"
         ShowFooter="false"
         CloseOnBackdropClick="true"
         CloseOnEscape="true"
         ContentClass="search-modal-content"
         @bind-IsVisible="IsVisible">
    <Body>
        <div class="search-modal-inner">
            <!-- Search Header -->
            <div class="search-header">
                <div class="search-input-wrapper">
                    <i class="fe fe-search search-icon"></i>
                    <input @ref="searchInput"
                           type="text"
                           class="search-input"
                           placeholder="Buscar proyectos, documentos, actividades..."
                           @bind="searchQuery"
                           @bind:event="oninput"
                           @onkeydown="HandleKeyDown"
                           disabled="@isSearching" />
                    @if (isSearching)
                    {
                        <div class="search-spinner">
                            <div class="spinner-border spinner-border-sm text-primary" role="status">
                                <span class="visually-hidden">Buscando...</span>
                            </div>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(searchQuery) && !isSearching)
                    {
                        <button class="search-clear-btn" @onclick="ClearSearch">
                            <i class="fe fe-x"></i>
                        </button>
                    }
                </div>
            </div>

            <!-- Quick Filters -->
            <div class="search-filters">
                <div class="filter-chips">
                    <button class="filter-chip @(activeFilter == SearchContentType.All ? "active" : "")"
                            @onclick="() => SetFilter(SearchContentType.All)">
                        <i class="fe fe-grid me-1"></i>
                        Todos
                    </button>
                    <button class="filter-chip @(activeFilter == SearchContentType.Projects ? "active" : "")"
                            @onclick="() => SetFilter(SearchContentType.Projects)">
                        <i class="fe fe-briefcase me-1"></i>
                        Proyectos
                    </button>
                    <button class="filter-chip @(activeFilter == SearchContentType.Documents ? "active" : "")"
                            @onclick="() => SetFilter(SearchContentType.Documents)">
                        <i class="fe fe-file-text me-1"></i>
                        Documentos
                    </button>
                    <button class="filter-chip @(activeFilter == SearchContentType.Activities ? "active" : "")"
                            @onclick="() => SetFilter(SearchContentType.Activities)">
                        <i class="fe fe-check-square me-1"></i>
                        Actividades
                    </button>
                </div>
            </div>

            <!-- Search Results -->
            <div class="search-body">
                @if (string.IsNullOrEmpty(searchQuery))
                {
                    <!-- Recent Searches -->
                    @if (recentSearches.Any())
                    {
                        <div class="search-section">
                            <div class="search-section-header">
                                <h6>Búsquedas Recientes</h6>
                                <button class="btn btn-link btn-sm" @onclick="ClearHistory">
                                    Limpiar
                                </button>
                            </div>
                            <div class="recent-searches">
                                @foreach (var recent in recentSearches)
                                {
                                    <button class="recent-search-item" @onclick="() => SearchFromRecent(recent.Query)">
                                        <i class="fe fe-clock me-2"></i>
                                        <span>@recent.Query</span>
                                        <small class="text-muted ms-auto">@recent.ResultCount resultados</small>
                                    </button>
                                }
                            </div>
                        </div>
                    }

                    <!-- Quick Actions -->
                    <div class="search-section">
                        <h6 class="search-section-header">Acciones Rápidas</h6>
                        <div class="quick-actions">
                            <a href="/projects/new" class="quick-action-item" @onclick="Close">
                                <div class="quick-action-icon bg-primary-soft">
                                    <i class="fe fe-plus"></i>
                                </div>
                                <div>
                                    <div class="quick-action-title">Nuevo Proyecto</div>
                                    <div class="quick-action-desc">Crear un nuevo proyecto</div>
                                </div>
                            </a>
                            <a href="/documents/upload" class="quick-action-item" @onclick="Close">
                                <div class="quick-action-icon bg-success-soft">
                                    <i class="fe fe-upload"></i>
                                </div>
                                <div>
                                    <div class="quick-action-title">Subir Documento</div>
                                    <div class="quick-action-desc">Agregar nuevo documento</div>
                                </div>
                            </a>
                            <a href="/activities/new" class="quick-action-item" @onclick="Close">
                                <div class="quick-action-icon bg-info-soft">
                                    <i class="fe fe-check-circle"></i>
                                </div>
                                <div>
                                    <div class="quick-action-title">Nueva Actividad</div>
                                    <div class="quick-action-desc">Crear nueva actividad</div>
                                </div>
                            </a>
                        </div>
                    </div>
                }
                else if (isSearching)
                {
                    <div class="search-loading">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Buscando...</span>
                        </div>
                        <p class="text-muted mt-3">Buscando "@searchQuery"...</p>
                    </div>
                }
                else if (searchResults != null)
                {
                    @if (searchResults.Groups.Any())
                    {
                        <div class="search-results-header">
                            <p class="text-muted mb-0">
                                @searchResults.TotalResults resultados para "<strong>@searchQuery</strong>"
                                <small class="ms-2">(@searchResults.SearchTime.TotalMilliseconds.ToString("0") ms)</small>
                            </p>
                        </div>

                        @foreach (var group in searchResults.Groups)
                        {
                            <div class="search-section">
                                <div class="search-section-header">
                                    <h6>
                                        <i class="@group.Icon me-2"></i>
                                        @group.Title
                                        @if (group.TotalCount > group.Items.Count)
                                        {
                                            <span class="badge bg-secondary ms-2">@group.TotalCount</span>
                                        }
                                    </h6>
                                    @if (group.TotalCount > group.Items.Count)
                                    {
                                        <a href="#" class="btn btn-link btn-sm">Ver todos</a>
                                    }
                                </div>
                                <div class="search-results-list">
                                    @foreach (var item in group.Items)
                                    {
                                        <a class="search-result-item @(selectedIndex == GetItemIndex(group, item) ? "selected" : "")"
                                           href="@item.Url"
                                           @onclick="() => NavigateToResult(item)"
                                           @onclick:preventDefault="true">
                                            <div class="search-result-icon">
                                                <i class="@item.Icon"></i>
                                            </div>
                                            <div class="search-result-content">
                                                <div class="search-result-title">@item.Title</div>
                                                @if (!string.IsNullOrEmpty(item.Subtitle))
                                                {
                                                    <div class="search-result-subtitle">@item.Subtitle</div>
                                                }
                                                @if (!string.IsNullOrEmpty(item.Description))
                                                {
                                                    <div class="search-result-description">@item.Description</div>
                                                }
                                                @if (item.Highlights?.Any() == true)
                                                {
                                                    <div class="search-result-highlights">
                                                        @foreach (var highlight in item.Highlights)
                                                        {
                                                            <small>@((MarkupString)highlight)</small>
                                                        }
                                                    </div>
                                                }
                                                @if (item.Metadata?.Any() == true)
                                                {
                                                    <div class="search-result-meta">
                                                        @foreach (var meta in item.Metadata)
                                                        {
                                                            <span class="meta-item">
                                                                <span class="meta-label">@meta.Key:</span>
                                                                <span class="meta-value">@meta.Value</span>
                                                            </span>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                        </a>
                                    }
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="search-no-results">
                            <i class="fe fe-search fa-3x text-muted mb-3"></i>
                            <h5>No se encontraron resultados</h5>
                            <p class="text-muted">
                                No se encontraron resultados para "<strong>@searchQuery</strong>".
                                <br />Intenta con otros términos de búsqueda.
                            </p>
                        </div>
                    }
                }

                <!-- Search Suggestions -->
                @if (suggestions.Any() && !string.IsNullOrEmpty(searchQuery) && !isSearching)
                {
                    <div class="search-suggestions">
                        <small class="text-muted">Sugerencias:</small>
                        <div class="suggestion-list">
                            @foreach (var suggestion in suggestions)
                            {
                                <button class="suggestion-item" @onclick="() => SearchFromSuggestion(suggestion.Text)">
                                    <i class="@(suggestion.Icon ?? "fe fe-search") me-2"></i>
                                    @suggestion.Text
                                    @if (!string.IsNullOrEmpty(suggestion.Category))
                                    {
                                        <small class="text-muted ms-1">en @suggestion.Category</small>
                                    }
                                </button>
                            }
                        </div>
                    </div>
                }
            </div>

            <!-- Footer Hints -->
            <div class="search-footer">
                <div class="search-hints">
                    <span class="hint-item">
                        <kbd>↑</kbd><kbd>↓</kbd> para navegar
                    </span>
                    <span class="hint-item">
                        <kbd>Enter</kbd> para seleccionar
                    </span>
                    <span class="hint-item">
                        <kbd>ESC</kbd> para cerrar
                    </span>
                </div>
            </div>
        </div>
    </Body>
</EzModal>

@code {
    private EzModal? modal;
    private ElementReference searchInput;

    // State
    private bool isVisible = false;
    private bool isSearching = false;
    private string searchQuery = "";
    private SearchResults? searchResults;
    private List<RecentSearch> recentSearches = new();
    private List<SearchSuggestion> suggestions = new();
    private SearchContentType activeFilter = SearchContentType.All;
    private int selectedIndex = -1;

    // Debounce timer
    private Timer? searchDebounceTimer;
    private readonly int searchDebounceDelay = 300;

    public bool IsVisible
    {
        get => isVisible;
        set
        {
            if (isVisible != value)
            {
                isVisible = value;
                if (isVisible)
                {
                    _ = FocusSearchInput();
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadRecentSearches();
    }

    public async Task Open()
    {
        if (modal != null)
        {
            await modal.ShowAsync();
            await LoadRecentSearches();
            await FocusSearchInput();
        }
    }

    public async Task Close()
    {
        if (modal != null)
        {
            await modal.HideAsync();
            ClearSearch();
        }
    }

    private async Task FocusSearchInput()
    {
        await Task.Delay(150); // Wait for modal animation
        await searchInput.FocusAsync();
    }

    private async Task LoadRecentSearches()
    {
        recentSearches = await SearchService.GetRecentSearchesAsync();
    }

    private void OnSearchQueryChanged(string value)
    {
        searchQuery = value;
        selectedIndex = -1;

        // Cancel previous timer
        searchDebounceTimer?.Dispose();

        if (string.IsNullOrWhiteSpace(value))
        {
            searchResults = null;
            suggestions.Clear();
            return;
        }

        // Start new timer
        searchDebounceTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await PerformSearch();
                await LoadSuggestions();
            });
        }, null, searchDebounceDelay, Timeout.Infinite);
    }

    private async Task PerformSearch()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
            return;

        isSearching = true;
        StateHasChanged();

        try
        {
            var filter = activeFilter == SearchContentType.All ? null : new SearchFilter { ContentType = activeFilter };
            searchResults = await SearchService.SearchAsync(searchQuery, filter);

            // Save to history
            await SearchService.SaveSearchHistoryAsync(searchQuery);
        }
        finally
        {
            isSearching = false;
            StateHasChanged();
        }
    }

    private async Task LoadSuggestions()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            suggestions.Clear();
            return;
        }

        suggestions = await SearchService.GetSuggestionsAsync(searchQuery, 5);
    }

    private async Task SetFilter(SearchContentType filter)
    {
        activeFilter = filter;
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            await PerformSearch();
        }
    }

    private void ClearSearch()
    {
        searchQuery = "";
        searchResults = null;
        suggestions.Clear();
        selectedIndex = -1;
    }

    private async Task ClearHistory()
    {
        await SearchService.ClearSearchHistoryAsync();
        recentSearches.Clear();
    }

    private async Task SearchFromRecent(string query)
    {
        searchQuery = query;
        await PerformSearch();
    }

    private async Task SearchFromSuggestion(string suggestion)
    {
        searchQuery = suggestion;
        await PerformSearch();
    }

    private async Task NavigateToResult(SearchResultItem item)
    {
        await Close();
        Navigation.NavigateTo(item.Url);
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (searchResults?.Groups.Any() == true)
        {
            var allItems = searchResults.Groups.SelectMany(g => g.Items).ToList();

            switch (e.Key)
            {
                case "ArrowDown":
                    selectedIndex = Math.Min(selectedIndex + 1, allItems.Count - 1);
                    break;

                case "ArrowUp":
                    selectedIndex = Math.Max(selectedIndex - 1, -1);
                    break;

                case "Enter":
                    if (selectedIndex >= 0 && selectedIndex < allItems.Count)
                    {
                        await NavigateToResult(allItems[selectedIndex]);
                    }
                    else if (!isSearching)
                    {
                        await PerformSearch();
                    }
                    break;
            }
        }
        else if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(searchQuery))
        {
            await PerformSearch();
        }
    }

    private int GetItemIndex(SearchResultGroup group, SearchResultItem item)
    {
        var allItems = searchResults?.Groups.SelectMany(g => g.Items).ToList();
        return allItems?.IndexOf(item) ?? -1;
    }

    public void Dispose()
    {
        searchDebounceTimer?.Dispose();
    }
}

<style>
    .search-modal-content {
        max-height: 80vh;
        overflow: hidden;
    }

    .search-modal-inner {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    /* Search Header */
    .search-header {
        padding: 1.5rem 1.5rem 0;
        flex-shrink: 0;
    }

    .search-input-wrapper {
        position: relative;
        display: flex;
        align-items: center;
    }

    .search-icon {
        position: absolute;
        left: 1rem;
        color: var(--text-muted);
        z-index: 1;
    }

    .search-input {
        width: 100%;
        padding: 0.75rem 3rem;
        border: 2px solid var(--border-color);
        border-radius: var(--radius-lg);
        font-size: 1.125rem;
        transition: all var(--transition-base);
    }

        .search-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(var(--primary-rgb), 0.1);
        }

    .search-spinner {
        position: absolute;
        right: 3rem;
    }

    .search-clear-btn {
        position: absolute;
        right: 1rem;
        background: none;
        border: none;
        color: var(--text-muted);
        padding: 0.5rem;
        cursor: pointer;
        transition: all var(--transition-base);
    }

        .search-clear-btn:hover {
            color: var(--text-primary);
        }

    /* Filters */
    .search-filters {
        padding: 1rem 1.5rem 0;
        flex-shrink: 0;
    }

    .filter-chips {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .filter-chip {
        padding: 0.375rem 0.75rem;
        background: var(--gray-100);
        border: 1px solid var(--border-color);
        border-radius: var(--radius-full);
        font-size: var(--font-size-sm);
        cursor: pointer;
        transition: all var(--transition-base);
    }

        .filter-chip:hover {
            background: var(--gray-200);
        }

        .filter-chip.active {
            background: var(--primary);
            color: var(--text-white);
            border-color: var(--primary);
        }

    /* Search Body */
    .search-body {
        flex: 1;
        overflow-y: auto;
        padding: 1rem 1.5rem;
    }

    /* Search Results */
    .search-results-header {
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid var(--border-color);
    }

    .search-section {
        margin-bottom: 1.5rem;
    }

    .search-section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.75rem;
    }

        .search-section-header h6 {
            margin: 0;
            font-weight: var(--font-weight-semibold);
        }

    /* Result Items */
    .search-result-item {
        display: flex;
        gap: 0.75rem;
        padding: 0.75rem;
        margin-bottom: 0.5rem;
        border: 1px solid transparent;
        border-radius: var(--radius);
        text-decoration: none;
        color: inherit;
        transition: all var(--transition-base);
        cursor: pointer;
    }

        .search-result-item:hover,
        .search-result-item.selected {
            background: var(--gray-50);
            border-color: var(--primary);
        }

    .search-result-icon {
        width: 40px;
        height: 40px;
        background: var(--gray-100);
        border-radius: var(--radius);
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
        color: var(--primary);
    }

    .search-result-content {
        flex: 1;
        min-width: 0;
    }

    .search-result-title {
        font-weight: var(--font-weight-medium);
        margin-bottom: 0.125rem;
    }

    .search-result-subtitle {
        font-size: var(--font-size-sm);
        color: var(--primary);
        margin-bottom: 0.25rem;
    }

    .search-result-description {
        font-size: var(--font-size-sm);
        color: var(--text-muted);
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }

    .search-result-highlights {
        font-size: var(--font-size-sm);
        color: var(--text-muted);
        margin-top: 0.25rem;
    }

        .search-result-highlights mark {
            background: rgba(var(--warning-rgb), 0.3);
            padding: 0.125rem 0.25rem;
            border-radius: 0.125rem;
        }

    .search-result-meta {
        display: flex;
        gap: 1rem;
        margin-top: 0.5rem;
        font-size: var(--font-size-xs);
    }

    .meta-label {
        color: var(--text-muted);
    }

    .meta-value {
        color: var(--text-secondary);
        font-weight: var(--font-weight-medium);
    }

    /* Recent Searches */
    .recent-search-item {
        display: flex;
        align-items: center;
        width: 100%;
        padding: 0.5rem 0.75rem;
        background: none;
        border: 1px solid var(--border-color);
        border-radius: var(--radius);
        margin-bottom: 0.5rem;
        text-align: left;
        cursor: pointer;
        transition: all var(--transition-base);
    }

        .recent-search-item:hover {
            background: var(--gray-50);
            border-color: var(--primary);
        }

    /* Quick Actions */
    .quick-actions {
        display: grid;
        gap: 0.75rem;
    }

    .quick-action-item {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 0.75rem;
        background: var(--gray-50);
        border: 1px solid var(--border-color);
        border-radius: var(--radius);
        text-decoration: none;
        color: inherit;
        transition: all var(--transition-base);
    }

        .quick-action-item:hover {
            background: var(--gray-100);
            border-color: var(--primary);
            transform: translateX(2px);
        }

    .quick-action-icon {
        width: 40px;
        height: 40px;
        border-radius: var(--radius);
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
    }

    .quick-action-title {
        font-weight: var(--font-weight-medium);
        margin-bottom: 0.125rem;
    }

    .quick-action-desc {
        font-size: var(--font-size-sm);
        color: var(--text-muted);
    }

    /* Suggestions */
    .search-suggestions {
        margin-top: 1rem;
        padding-top: 1rem;
        border-top: 1px solid var(--border-color);
    }

    .suggestion-list {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-top: 0.5rem;
    }

    .suggestion-item {
        padding: 0.25rem 0.75rem;
        background: var(--gray-100);
        border: 1px solid var(--border-color);
        border-radius: var(--radius-full);
        font-size: var(--font-size-sm);
        cursor: pointer;
        transition: all var(--transition-base);
    }

        .suggestion-item:hover {
            background: var(--primary);
            color: var(--text-white);
            border-color: var(--primary);
        }

    /* Loading & Empty States */
    .search-loading,
    .search-no-results {
        text-align: center;
        padding: 3rem 1rem;
    }

    /* Footer */
    .search-footer {
        padding: 1rem 1.5rem;
        border-top: 1px solid var(--border-color);
        flex-shrink: 0;
    }

    .search-hints {
        display: flex;
        justify-content: center;
        gap: 1.5rem;
        font-size: var(--font-size-sm);
        color: var(--text-muted);
    }

    .hint-item kbd {
        background: var(--gray-100);
        border: 1px solid var(--border-color);
        border-radius: 0.25rem;
        padding: 0.125rem 0.375rem;
        font-size: 0.75rem;
        margin: 0 0.125rem;
    }

    /* Utility classes for soft backgrounds */
    .bg-primary-soft {
        background: rgba(var(--primary-rgb), 0.1);
        color: var(--primary);
    }

    .bg-success-soft {
        background: rgba(var(--success-rgb), 0.1);
        color: var(--success);
    }

    .bg-info-soft {
        background: rgba(var(--info-rgb), 0.1);
        color: var(--info);
    }
</style>