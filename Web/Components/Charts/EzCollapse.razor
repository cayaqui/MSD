@inject IJSRuntime JS

<div @ref="collapseElement"
     class="@GetCollapseClass()"
     id="@Id"
     style="@GetStyle()">
    @ChildContent
</div>

@code {
    [Parameter] public string Id { get; set; } = $"collapse-{Guid.NewGuid():N}";
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public bool IsExpanded { get; set; } = false;
    [Parameter] public EventCallback<bool> IsExpandedChanged { get; set; }
    [Parameter] public bool Horizontal { get; set; } = false;
    [Parameter] public string? Class { get; set; }
    [Parameter] public string? Style { get; set; }
    [Parameter] public int AnimationDuration { get; set; } = 350; // milliseconds

    // Eventos
    [Parameter] public EventCallback OnShow { get; set; }
    [Parameter] public EventCallback OnShown { get; set; }
    [Parameter] public EventCallback OnHide { get; set; }
    [Parameter] public EventCallback OnHidden { get; set; }

    private ElementReference collapseElement;
    private bool isTransitioning = false;
    private bool isInitialized = false;
    private string? currentHeight;
    private string? currentWidth;

    protected override async Task OnParametersSetAsync()
    {
        if (isInitialized && IsExpanded != IsExpandedChanged.HasDelegate)
        {
            if (IsExpanded)
            {
                await ShowAsync();
            }
            else
            {
                await HideAsync();
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isInitialized = true;

            // Si debe estar expandido inicialmente, mostrar sin animación
            if (IsExpanded)
            {
                StateHasChanged();
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task ToggleAsync()
    {
        if (IsExpanded)
        {
            await HideAsync();
        }
        else
        {
            await ShowAsync();
        }
    }

    public async Task ShowAsync()
    {
        if (isTransitioning || IsExpanded) return;

        isTransitioning = true;

        await OnShow.InvokeAsync();

        // Obtener dimensiones del elemento
        var dimension = await GetDimension();

        // Comenzar la animación
        if (Horizontal)
        {
            currentWidth = "0";
        }
        else
        {
            currentHeight = "0";
        }

        IsExpanded = true;
        await IsExpandedChanged.InvokeAsync(true);
        StateHasChanged();

        // Forzar reflow
        await Task.Delay(10);

        // Establecer la dimensión objetivo
        if (Horizontal)
        {
            currentWidth = $"{dimension}px";
        }
        else
        {
            currentHeight = $"{dimension}px";
        }
        StateHasChanged();

        // Esperar a que termine la animación
        await Task.Delay(AnimationDuration);

        // Remover la dimensión fija para permitir que el contenido sea responsive
        if (Horizontal)
        {
            currentWidth = null;
        }
        else
        {
            currentHeight = null;
        }

        isTransitioning = false;
        StateHasChanged();

        await OnShown.InvokeAsync();
    }

    public async Task HideAsync()
    {
        if (isTransitioning || !IsExpanded) return;

        isTransitioning = true;

        await OnHide.InvokeAsync();

        // Obtener y establecer la dimensión actual
        var dimension = await GetDimension();
        if (Horizontal)
        {
            currentWidth = $"{dimension}px";
        }
        else
        {
            currentHeight = $"{dimension}px";
        }
        StateHasChanged();

        // Forzar reflow
        await Task.Delay(10);

        // Colapsar a 0
        if (Horizontal)
        {
            currentWidth = "0";
        }
        else
        {
            currentHeight = "0";
        }
        StateHasChanged();

        // Esperar a que termine la animación
        await Task.Delay(AnimationDuration);

        IsExpanded = false;
        await IsExpandedChanged.InvokeAsync(false);

        // Remover las dimensiones fijas
        currentHeight = null;
        currentWidth = null;

        isTransitioning = false;
        StateHasChanged();

        await OnHidden.InvokeAsync();
    }

    private async Task<double> GetDimension()
    {
        if (Horizontal)
        {
            return await JS.InvokeAsync<double>("EzCollapse.getWidth", collapseElement);
        }
        else
        {
            return await JS.InvokeAsync<double>("EzCollapse.getHeight", collapseElement);
        }
    }

    private string GetCollapseClass()
    {
        var classes = new List<string> { "collapse" };

        if (Horizontal)
        {
            classes.Add("collapse-horizontal");
        }

        if (IsExpanded && !isTransitioning)
        {
            classes.Add("show");
        }

        if (isTransitioning)
        {
            classes.Add("collapsing");
        }

        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }

        return string.Join(" ", classes);
    }

    private string GetStyle()
    {
        var styles = new List<string>();

        if (!string.IsNullOrEmpty(currentHeight))
        {
            styles.Add($"height: {currentHeight}");
        }

        if (!string.IsNullOrEmpty(currentWidth))
        {
            styles.Add($"width: {currentWidth}");
        }

        if (!string.IsNullOrEmpty(Style))
        {
            styles.Add(Style);
        }

        return string.Join("; ", styles);
    }
}

<style>
    .collapse {
        visibility: visible;
    }

        .collapse:not(.show) {
            display: none;
        }

    .collapsing {
        height: 0;
        overflow: hidden;
        transition: height 0.35s ease;
    }

        .collapsing.collapse-horizontal {
            width: 0;
            height: auto;
            transition: width 0.35s ease;
        }

    @@media (prefers-reduced-motion: reduce) {
        .collapsing {
            transition: none;
        }
    }
</style>