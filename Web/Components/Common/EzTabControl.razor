@implements IDisposable

<div class="@GetTabsContainerClass()">
    @if (TabPosition == Position.Top || TabPosition == Position.Left)
    {
        @RenderTabList()
    }

    <div class="tab-content @ContentClass">
        @if (tabs.Any())
        {
            @foreach (var tab in tabs)
            {
                <div class="@GetTabPaneClass(tab)"
                     id="@GetTabPaneId(tab)"
                     role="tabpanel"
                     aria-labelledby="@GetTabId(tab)">
                    @if (tab.IsActive || !LazyLoad)
                    {
                        @tab.Content
                    }
                </div>
            }
        }
        else if (ChildContent != null)
        {
            <CascadingValue Value="this">
                @ChildContent
            </CascadingValue>
        }
    </div>

    @if (TabPosition == Position.Bottom || TabPosition == Position.Right)
    {
        @RenderTabList()
    }
</div>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? ActiveTabId { get; set; }
    [Parameter] public EventCallback<string> ActiveTabIdChanged { get; set; }
    [Parameter] public TabVariant Variant { get; set; } = TabVariant.Default;
    [Parameter] public Position TabPosition { get; set; } = Position.Top;
    [Parameter] public TabAlignment Alignment { get; set; } = TabAlignment.Start;
    [Parameter] public bool Fill { get; set; } = false;
    [Parameter] public bool Justified { get; set; } = false;
    [Parameter] public bool LazyLoad { get; set; } = true;
    [Parameter] public bool Fade { get; set; } = true;
    [Parameter] public bool ShowBorder { get; set; } = true;

    // CSS Classes
    [Parameter] public string? ContainerClass { get; set; }
    [Parameter] public string? TabListClass { get; set; }
    [Parameter] public string? ContentClass { get; set; }

    // Events
    [Parameter] public EventCallback<TabChangingEventArgs> OnTabChanging { get; set; }
    [Parameter] public EventCallback<TabChangedEventArgs> OnTabChanged { get; set; }

    // Direct tab definition (alternative to using EzTab children)
    [Parameter] public RenderFragment? Tabs { get; set; }

    public enum TabVariant
    {
        Default,
        Pills,
        Underline,
        Bordered
    }

    public enum Position
    {
        Top,
        Bottom,
        Left,
        Right
    }

    public enum TabAlignment
    {
        Start,
        Center,
        End
    }

    private List<TabItem> tabs = new();
    private string? currentActiveTabId;

    protected override void OnInitialized()
    {
        currentActiveTabId = ActiveTabId;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && string.IsNullOrEmpty(currentActiveTabId) && tabs.Any())
        {
            // Activate first tab if none specified
            await ActivateTab(tabs.First().Id);
        }
    }

    internal void RegisterTab(EzTab tab)
    {
        var tabItem = new TabItem
        {
            Id = tab.TabId,
            Title = tab.Title,
            Icon = tab.Icon,
            BadgeText = tab.BadgeText,
            BadgeCount = tab.BadgeCount,
            BadgeVariant = tab.BadgeVariant,
            IsDisabled = tab.IsDisabled,
            IsVisible = tab.IsVisible,
            Content = tab.ChildContent,
            IsActive = tab.TabId == currentActiveTabId
        };

        tabs.Add(tabItem);

        if (tab.IsActive && string.IsNullOrEmpty(currentActiveTabId))
        {
            _ = ActivateTab(tab.TabId);
        }

        StateHasChanged();
    }

    internal void UnregisterTab(EzTab tab)
    {
        tabs.RemoveAll(t => t.Id == tab.TabId);
        StateHasChanged();
    }

    internal async Task ActivateTab(string tabId)
    {
        var tab = tabs.FirstOrDefault(t => t.Id == tabId);
        if (tab == null || tab.IsDisabled) return;

        // Fire changing event
        var changingArgs = new TabChangingEventArgs
        {
            CurrentTabId = currentActiveTabId,
            NewTabId = tabId
        };

        await OnTabChanging.InvokeAsync(changingArgs);

        if (changingArgs.Cancel) return;

        // Update active state
        foreach (var t in tabs)
        {
            t.IsActive = t.Id == tabId;
        }

        var previousTabId = currentActiveTabId;
        currentActiveTabId = tabId;
        await ActiveTabIdChanged.InvokeAsync(tabId);

        StateHasChanged();

        // Fire changed event
        await OnTabChanged.InvokeAsync(new TabChangedEventArgs
        {
            PreviousTabId = previousTabId,
            CurrentTabId = tabId
        });
    }

    private RenderFragment RenderTabList() => builder =>
    {
        builder.OpenElement(0, "ul");
        builder.AddAttribute(1, "class", GetTabListClass());
        builder.AddAttribute(2, "role", "tablist");

        foreach (var tab in tabs.Where(t => t.IsVisible))
        {
            builder.OpenElement(3, "li");
            builder.AddAttribute(4, "class", "nav-item");
            builder.AddAttribute(5, "role", "presentation");

            builder.OpenElement(6, "button");
            builder.AddAttribute(7, "class", GetTabButtonClass(tab));
            builder.AddAttribute(8, "id", GetTabId(tab));
            builder.AddAttribute(9, "data-bs-toggle", "tab");
            builder.AddAttribute(10, "data-bs-target", $"#{GetTabPaneId(tab)}");
            builder.AddAttribute(11, "type", "button");
            builder.AddAttribute(12, "role", "tab");
            builder.AddAttribute(13, "aria-controls", GetTabPaneId(tab));
            builder.AddAttribute(14, "aria-selected", tab.IsActive.ToString().ToLower());
            builder.AddAttribute(15, "disabled", tab.IsDisabled);
            builder.AddAttribute(16, "onclick", EventCallback.Factory.Create(this, () => ActivateTab(tab.Id)));

            // Icon
            if (!string.IsNullOrEmpty(tab.Icon))
            {
                builder.OpenElement(17, "i");
                builder.AddAttribute(18, "class", $"{tab.Icon} me-2");
                builder.CloseElement();
            }

            // Title
            builder.AddContent(19, tab.Title);

            // Badge
            if (tab.BadgeCount > 0 || !string.IsNullOrEmpty(tab.BadgeText))
            {
                builder.OpenElement(20, "span");
                builder.AddAttribute(21, "class", $"badge bg-{tab.BadgeVariant ?? "secondary"} ms-2");
                builder.AddContent(22, tab.BadgeCount > 0 ? tab.BadgeCount.ToString() : tab.BadgeText);
                builder.CloseElement();
            }

            builder.CloseElement(); // button
            builder.CloseElement(); // li
        }

        builder.CloseElement(); // ul
    };

    private string GetTabsContainerClass()
    {
        var classes = new List<string>();

        if (TabPosition == Position.Left || TabPosition == Position.Right)
        {
            classes.Add("d-flex");
            if (TabPosition == Position.Right)
            {
                classes.Add("flex-row-reverse");
            }
        }

        if (!string.IsNullOrEmpty(ContainerClass))
        {
            classes.Add(ContainerClass);
        }

        return string.Join(" ", classes);
    }

    private string GetTabListClass()
    {
        var classes = new List<string> { "nav" };

        // Variant
        switch (Variant)
        {
            case TabVariant.Pills:
                classes.Add("nav-pills");
                break;
            case TabVariant.Underline:
                classes.Add("nav-underline");
                break;
            case TabVariant.Bordered:
                classes.Add("nav-tabs nav-bordered");
                break;
            default:
                classes.Add("nav-tabs");
                break;
        }

        // Position
        if (TabPosition == Position.Left || TabPosition == Position.Right)
        {
            classes.Add("flex-column");
            if (TabPosition == Position.Left)
            {
                classes.Add("me-3");
            }
            else
            {
                classes.Add("ms-3");
            }
        }

        // Alignment
        switch (Alignment)
        {
            case TabAlignment.Center:
                classes.Add("justify-content-center");
                break;
            case TabAlignment.End:
                classes.Add("justify-content-end");
                break;
        }

        // Fill/Justified
        if (Fill)
        {
            classes.Add("nav-fill");
        }
        else if (Justified)
        {
            classes.Add("nav-justified");
        }

        if (!string.IsNullOrEmpty(TabListClass))
        {
            classes.Add(TabListClass);
        }

        return string.Join(" ", classes);
    }

    private string GetTabButtonClass(TabItem tab)
    {
        var classes = new List<string> { "nav-link" };

        if (tab.IsActive)
        {
            classes.Add("active");
        }

        if (tab.IsDisabled)
        {
            classes.Add("disabled");
        }

        return string.Join(" ", classes);
    }

    private string GetTabPaneClass(TabItem tab)
    {
        var classes = new List<string> { "tab-pane" };

        if (Fade)
        {
            classes.Add("fade");
        }

        if (tab.IsActive)
        {
            classes.Add("show active");
        }

        return string.Join(" ", classes);
    }

    private string GetTabId(TabItem tab) => $"tab-{tab.Id}";
    private string GetTabPaneId(TabItem tab) => $"tabpane-{tab.Id}";

    public void Dispose()
    {
        tabs.Clear();
    }

    private class TabItem
    {
        public string Id { get; set; } = string.Empty;
        public string Title { get; set; } = string.Empty;
        public string? Icon { get; set; }
        public string? BadgeText { get; set; }
        public int BadgeCount { get; set; }
        public string? BadgeVariant { get; set; }
        public bool IsDisabled { get; set; }
        public bool IsVisible { get; set; } = true;
        public bool IsActive { get; set; }
        public RenderFragment? Content { get; set; }
    }

    public class TabChangingEventArgs : EventArgs
    {
        public string? CurrentTabId { get; set; }
        public string? NewTabId { get; set; }
        public bool Cancel { get; set; }
    }

    public class TabChangedEventArgs : EventArgs
    {
        public string? PreviousTabId { get; set; }
        public string? CurrentTabId { get; set; }
    }
}

<style>
    /* Custom tab styles */
    .nav-tabs {
        border-bottom: 1px solid var(--bs-border-color);
    }

        .nav-tabs .nav-link {
            color: var(--bs-secondary-color);
            background-color: transparent;
            border: 1px solid transparent;
            border-top-left-radius: 0.375rem;
            border-top-right-radius: 0.375rem;
            padding: 0.5rem 1rem;
            transition: all 0.2s ease;
        }

            .nav-tabs .nav-link:hover {
                border-color: var(--bs-gray-200) var(--bs-gray-200) var(--bs-border-color);
                isolation: isolate;
            }

            .nav-tabs .nav-link.active {
                color: var(--bs-body-color);
                background-color: var(--bs-body-bg);
                border-color: var(--bs-border-color) var(--bs-border-color) var(--bs-body-bg);
            }

    /* Pills variant */
    .nav-pills .nav-link {
        border-radius: 0.375rem;
        color: var(--bs-body-color);
    }

        .nav-pills .nav-link.active {
            background-color: var(--bs-primary);
            color: white;
        }

    /* Underline variant */
    .nav-underline {
        border-bottom: 1px solid var(--bs-border-color);
    }

        .nav-underline .nav-link {
            border: none;
            border-bottom: 2px solid transparent;
            border-radius: 0;
            padding: 0.5rem 1rem;
            margin-bottom: -1px;
        }

            .nav-underline .nav-link.active {
                border-bottom-color: var(--bs-primary);
                color: var(--bs-primary);
                background-color: transparent;
            }

    /* Bordered variant */
    .nav-bordered {
        background-color: var(--bs-gray-100);
        border: 1px solid var(--bs-border-color);
        border-radius: 0.375rem;
        padding: 0.25rem;
    }

        .nav-bordered .nav-link {
            border-radius: 0.25rem;
            margin: 0 0.125rem;
        }

            .nav-bordered .nav-link.active {
                background-color: var(--bs-white);
                border: 1px solid var(--bs-border-color);
            }

    /* Vertical tabs */
    .nav.flex-column .nav-link {
        text-align: left;
        margin-bottom: 0.25rem;
    }

    /* Tab content */
    .tab-content {
        padding: 1.5rem 0;
    }

        .tab-content.bordered {
            border: 1px solid var(--bs-border-color);
            border-top: none;
            padding: 1.5rem;
            border-bottom-left-radius: 0.375rem;
            border-bottom-right-radius: 0.375rem;
        }

    /* Transitions */
    .tab-pane.fade {
        transition: opacity 0.15s ease;
    }

        .tab-pane.fade:not(.show) {
            opacity: 0;
        }

    /* Badge in tabs */
    .nav-link .badge {
        font-size: 0.625rem;
        padding: 0.125rem 0.375rem;
        vertical-align: middle;
    }

    /* Disabled state */
    .nav-link.disabled {
        color: var(--bs-nav-link-disabled-color);
        pointer-events: none;
        cursor: default;
        opacity: 0.5;
    }
</style>