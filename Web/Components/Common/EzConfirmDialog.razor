@implements IAsyncDisposable
@inject IJSRuntime JS

<div class="modal fade @(isVisible ? "show" : "")"
     tabindex="-1"
     style="display: @(isVisible ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);"
     @onclick="HandleBackdropClick">
    <div class="modal-dialog modal-dialog-centered @GetSizeClass()" @onclick:stopPropagation="true">
        <div class="modal-content">
            <div class="modal-header @GetHeaderClass()">
                <h5 class="modal-title">
                    @if (!string.IsNullOrEmpty(icon))
                    {
                        <i class="@icon me-2"></i>
                    }
                    @title
                </h5>
                @if (showCloseButton)
                {
                    <button type="button" class="btn-close" @onclick="Cancel"></button>
                }
            </div>

            <div class="modal-body">
                @if (!string.IsNullOrEmpty(message))
                {
                    <p class="mb-0">@message</p>
                }
                @if (Body != null)
                {
                    @Body
                }
            </div>

            <div class="modal-footer">
                <button type="button"
                        class="btn @GetCancelButtonClass()"
                        @onclick="Cancel"
                        disabled="@isProcessing">
                    @if (showCancelIcon)
                    {
                        <i class="fa-light fa-times me-1"></i>
                    }
                    @cancelText
                </button>
                <button type="button"
                        class="btn @GetConfirmButtonClass()"
                        @onclick="Confirm"
                        disabled="@isProcessing">
                    @if (isProcessing)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status">
                            <span class="visually-hidden">Procesando...</span>
                        </span>
                    }
                    else if (showConfirmIcon)
                    {
                        <i class="@GetConfirmIcon() me-1"></i>
                    }
                    @confirmText
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isVisible = false;
    private bool isProcessing = false;
    private string title = "Confirmar";
    private string message = "";
    private string confirmText = "Confirmar";
    private string cancelText = "Cancelar";
    private string icon = "";
    private bool showCloseButton = true;
    private bool showConfirmIcon = true;
    private bool showCancelIcon = false;
    private bool closeOnBackdropClick = true;

    private DialogType dialogType = DialogType.Info;
    private DialogSize dialogSize = DialogSize.Default;
    private RenderFragment? Body;

    private TaskCompletionSource<bool>? resultTcs;
    private Func<Task>? onConfirmCallback;
    private Func<Task>? onCancelCallback;

    public enum DialogType
    {
        Info,
        Success,
        Warning,
        Danger,
        Question
    }

    public enum DialogSize
    {
        Small,
        Default,
        Large
    }

    public class DialogOptions
    {
        public string Title { get; set; } = "Confirmar";
        public string Message { get; set; } = "";
        public string ConfirmText { get; set; } = "Confirmar";
        public string CancelText { get; set; } = "Cancelar";
        public DialogType Type { get; set; } = DialogType.Info;
        public DialogSize Size { get; set; } = DialogSize.Default;
        public string? Icon { get; set; }
        public bool ShowCloseButton { get; set; } = true;
        public bool ShowConfirmIcon { get; set; } = true;
        public bool ShowCancelIcon { get; set; } = false;
        public bool CloseOnBackdropClick { get; set; } = true;
        public RenderFragment? Body { get; set; }
        public Func<Task>? OnConfirm { get; set; }
        public Func<Task>? OnCancel { get; set; }
    }

    public async Task<bool> ShowAsync(string message, string? title = null, string? confirmText = null, string? cancelText = null)
    {
        var options = new DialogOptions
        {
            Message = message,
            Title = title ?? "Confirmar",
            ConfirmText = confirmText ?? "Confirmar",
            CancelText = cancelText ?? "Cancelar"
        };

        return await ShowAsync(options);
    }

    public async Task<bool> ShowAsync(DialogOptions options)
    {
        title = options.Title;
        message = options.Message;
        confirmText = options.ConfirmText;
        cancelText = options.CancelText;
        dialogType = options.Type;
        dialogSize = options.Size;
        icon = options.Icon ?? GetDefaultIcon();
        showCloseButton = options.ShowCloseButton;
        showConfirmIcon = options.ShowConfirmIcon;
        showCancelIcon = options.ShowCancelIcon;
        closeOnBackdropClick = options.CloseOnBackdropClick;
        Body = options.Body;
        onConfirmCallback = options.OnConfirm;
        onCancelCallback = options.OnCancel;

        resultTcs = new TaskCompletionSource<bool>();
        isVisible = true;
        isProcessing = false;
        StateHasChanged();

        // Añadir clase al body para prevenir scroll
        await JS.InvokeVoidAsync("document.body.classList.add", "modal-open");

        return await resultTcs.Task;
    }

    public async Task<bool> ShowDeleteAsync(string itemName)
    {
        return await ShowAsync(new DialogOptions
        {
            Title = "Eliminar",
            Message = $"¿Está seguro que desea eliminar {itemName}? Esta acción no se puede deshacer.",
            ConfirmText = "Eliminar",
            CancelText = "Cancelar",
            Type = DialogType.Danger,
            Icon = "fa-light fa-trash"
        });
    }

    public async Task<bool> ShowWarningAsync(string message, string? title = null)
    {
        return await ShowAsync(new DialogOptions
        {
            Title = title ?? "Advertencia",
            Message = message,
            Type = DialogType.Warning,
            Icon = "fa-light fa-exclamation-triangle"
        });
    }

    public async Task<bool> ShowSuccessAsync(string message, string? title = null)
    {
        return await ShowAsync(new DialogOptions
        {
            Title = title ?? "Éxito",
            Message = message,
            Type = DialogType.Success,
            Icon = "fa-light fa-check-circle",
            ConfirmText = "Aceptar",
            ShowCancelIcon = false
        });
    }

    private async Task Confirm()
    {
        if (isProcessing) return;

        if (onConfirmCallback != null)
        {
            isProcessing = true;
            StateHasChanged();

            try
            {
                await onConfirmCallback();
            }
            finally
            {
                isProcessing = false;
            }
        }

        await Close(true);
    }

    private async Task Cancel()
    {
        if (isProcessing) return;

        if (onCancelCallback != null)
        {
            await onCancelCallback();
        }

        await Close(false);
    }

    private async Task Close(bool result)
    {
        isVisible = false;
        StateHasChanged();

        // Remover clase del body
        await JS.InvokeVoidAsync("document.body.classList.remove", "modal-open");

        resultTcs?.TrySetResult(result);
    }

    private async Task HandleBackdropClick()
    {
        if (closeOnBackdropClick && !isProcessing)
        {
            await Cancel();
        }
    }

    private string GetDefaultIcon()
    {
        return dialogType switch
        {
            DialogType.Success => "fa-light fa-check-circle",
            DialogType.Warning => "fa-light fa-exclamation-triangle",
            DialogType.Danger => "fa-light fa-exclamation-circle",
            DialogType.Question => "fa-light fa-question-circle",
            _ => "fa-light fa-info-circle"
        };
    }

    private string GetConfirmIcon()
    {
        return dialogType switch
        {
            DialogType.Danger => "fa-light fa-trash",
            DialogType.Success => "fa-light fa-check",
            _ => "fa-light fa-check"
        };
    }

    private string GetSizeClass()
    {
        return dialogSize switch
        {
            DialogSize.Small => "modal-sm",
            DialogSize.Large => "modal-lg",
            _ => ""
        };
    }

    private string GetHeaderClass()
    {
        return dialogType switch
        {
            DialogType.Success => "border-success",
            DialogType.Warning => "border-warning",
            DialogType.Danger => "border-danger",
            DialogType.Question => "border-info",
            _ => "border-primary"
        };
    }

    private string GetConfirmButtonClass()
    {
        return dialogType switch
        {
            DialogType.Success => "btn-success",
            DialogType.Warning => "btn-warning",
            DialogType.Danger => "btn-danger",
            DialogType.Question => "btn-primary",
            _ => "btn-primary"
        };
    }

    private string GetCancelButtonClass()
    {
        return dialogType == DialogType.Danger ? "btn-outline-secondary" : "btn-secondary";
    }

    public async ValueTask DisposeAsync()
    {
        if (isVisible)
        {
            await Close(false);
        }
    }
}

<style>
    .modal.show {
        animation: fadeIn 0.15s ease-out;
    }

    .modal-dialog {
        animation: slideIn 0.3s ease-out;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    @@keyframes slideIn {
        from {
            transform: translate(0, -50px);
            opacity: 0;
        }

        to {
            transform: translate(0, 0);
            opacity: 1;
        }
    }

    .modal-header {
        border-bottom-width: 3px !important;
    }

    .modal-content {
        border: none;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }

    .btn:disabled {
        cursor: not-allowed;
        opacity: 0.65;
    }
</style>