@using Web.Services.Events
@implements IDisposable
@inject IEzErrorHandlingService ErrorHandler
@inject NavigationManager Navigation
@using ErrorEventArgs = Web.Services.Events.EzErrorEventArgs
<CascadingValue Value="this">
    <ErrorBoundary @ref="errorBoundary">
        <ChildContent>
            @ChildContent
        </ChildContent>
        <ErrorContent Context="exception">
            <div class="error-container">
                <div class="alert alert-danger shadow-sm border-0" role="alert">
                    <div class="d-flex align-items-start">
                        <div class="flex-shrink-0">
                            <i class="fa-light fa-exclamation-triangle fa-2x text-danger"></i>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h5 class="alert-heading">¡Ups! Algo salió mal</h5>
                            <p class="mb-2">Ha ocurrido un error inesperado. El equipo técnico ha sido notificado.</p>
                            <div class="d-flex gap-2">
                                <button class="btn btn-sm btn-danger" @onclick="RecoverError">
                                    <i class="fa-light fa-rotate-right me-1"></i>Reintentar
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="NavigateHome">
                                    <i class="fa-light fa-home me-1"></i>Ir al inicio
                                </button>
                            </div>
                            @if (ShowDetails)
                            {
                                <details class="mt-3">
                                    <summary class="text-muted small">Detalles del error</summary>
                                    <pre class="text-muted small mt-2">@exception.ToString()</pre>
                                </details>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </ErrorContent>
    </ErrorBoundary>
</CascadingValue>

@if (_currentError != null)
{
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 9999;">
        <div class="toast show @GetToastClass(_currentError.Severity)" role="alert">
            <div class="toast-header">
                <i class="@GetToastIcon(_currentError.Severity) me-2"></i>
                <strong class="me-auto">@GetToastTitle(_currentError.Severity)</strong>
                <button type="button" class="btn-close btn-sm" @onclick="ClearCurrentError"></button>
            </div>
            <div class="toast-body">
                @_currentError.Message

                @if (_currentError.ValidationErrors != null)
                {
                    <ul class="mb-0 mt-2 ps-3">
                        @foreach (var error in _currentError.ValidationErrors.SelectMany(e => e.Value))
                        {
                            <li class="small">@error</li>
                        }
                    </ul>
                }
            </div>
        </div>
    </div>
}


@code {
    private ErrorBoundary? errorBoundary;
    private ErrorEventArgs? _currentError;

    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public bool ShowDetails { get; set; } = false;

    protected override void OnInitialized()
    {
       
    }

    // Cambia la firma de HandleError para que coincida exactamente con EventHandler<ErrorEventArgs>
    private void HandleError(object? sender, ErrorEventArgs e)
    {
        _currentError = e;
        InvokeAsync(StateHasChanged);

        // Auto-hide después de 5 segundos para errores no críticos
        if (e.Severity != EzErrorSeverity.Critical)
        {
            Task.Delay(5000).ContinueWith(_ =>
            {
                ClearCurrentError();
            });
        }
    }

    private void RecoverError()
    {
        errorBoundary?.Recover();
    }

    private void NavigateHome()
    {
        Navigation.NavigateTo("/", true);
    }

    private void ClearCurrentError()
    {
        _currentError = null;
        InvokeAsync(StateHasChanged);
    }

    private string GetToastClass(EzErrorSeverity severity)
    {
        return severity switch
        {
            EzErrorSeverity.Info => "border-info",
            EzErrorSeverity.Warning => "border-warning",
            EzErrorSeverity.Error => "border-danger",
            EzErrorSeverity.Critical => "border-danger bg-danger text-white",
            _ => "border-secondary"
        };
    }

    private string GetToastIcon(EzErrorSeverity severity)
    {
        return severity switch
        {
            EzErrorSeverity.Info => "fa-light fa-circle-info text-info",
            EzErrorSeverity.Warning => "fa-light fa-triangle-exclamation text-warning",
            EzErrorSeverity.Error => "fa-light fa-circle-xmark text-danger",
            EzErrorSeverity.Critical => "fa-light fa-skull-crossbones text-white",
            _ => "fa-light fa-circle-info"
        };
    }

    private string GetToastTitle(EzErrorSeverity severity)
    {
        return severity switch
        {
            EzErrorSeverity.Info => "Información",
            EzErrorSeverity.Warning => "Advertencia",
            EzErrorSeverity.Error => "Error",
            EzErrorSeverity.Critical => "Error Crítico",
            _ => "Notificación"
        };
    }

    public void Dispose()
    {
       // ErrorHandler.OnError -= HandleError!;
    }
}


<style>
    .error-container {
        padding: 2rem;
        min-height: 400px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .toast {
        min-width: 350px;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }
</style>