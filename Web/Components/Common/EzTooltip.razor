@implements IAsyncDisposable
@inject IJSRuntime JS

<span @ref="tooltipElement"
      class="@WrapperClass"
      style="@WrapperStyle"
      @onmouseenter="HandleMouseEnter"
      @onmouseleave="HandleMouseLeave"
      @onfocus="HandleFocus"
      @onblur="HandleBlur"
      @onclick="HandleClick"
      @attributes="AdditionalAttributes">
    @ChildContent
</span>

@if (isVisible && !string.IsNullOrEmpty(currentContent))
{
    <div @ref="popperElement"
         class="ez-tooltip @GetTooltipClass() @(isVisible ? "show" : "")"
         role="tooltip"
         style="position: absolute; inset: 0px auto auto 0px; margin: 0px; @tooltipStyle">
        <div class="ez-tooltip-arrow" data-popper-arrow style="@arrowStyle"></div>
        <div class="ez-tooltip-inner">
            @if (IsHtml)
            {
                @((MarkupString)currentContent)
            }
            else
            {
                @currentContent
            }
        </div>
    </div>
}

@code {
    // Parámetros principales
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? Text { get; set; }
    [Parameter] public string? Title { get; set; }
    [Parameter] public bool IsHtml { get; set; } = false;
    [Parameter] public bool Disabled { get; set; } = false;

    // Comportamiento
    [Parameter] public TooltipTrigger Trigger { get; set; } = TooltipTrigger.Hover;
    [Parameter] public TooltipPlacement Placement { get; set; } = TooltipPlacement.Top;
    [Parameter] public int Delay { get; set; } = 200; // milisegundos
    [Parameter] public int HideDelay { get; set; } = 0; // milisegundos
    [Parameter] public bool ShowArrow { get; set; } = true;
    [Parameter] public bool Interactive { get; set; } = false; // Permite interactuar con el tooltip
    [Parameter] public int Offset { get; set; } = 8; // Distancia del elemento

    // Apariencia
    [Parameter] public TooltipTheme Theme { get; set; } = TooltipTheme.Dark;
    [Parameter] public TooltipSize Size { get; set; } = TooltipSize.Default;
    [Parameter] public string? MaxWidth { get; set; } = "200px";
    [Parameter] public string? MinWidth { get; set; }
    [Parameter] public bool NoWrap { get; set; } = false;

    // Clases y estilos personalizados
    [Parameter] public string? WrapperClass { get; set; }
    [Parameter] public string? WrapperStyle { get; set; }
    [Parameter] public string? TooltipClass { get; set; }
    [Parameter] public string? ContentClass { get; set; }

    // Eventos
    [Parameter] public EventCallback OnShow { get; set; }
    [Parameter] public EventCallback OnHide { get; set; }
    [Parameter] public EventCallback<bool> OnToggle { get; set; }

    // Atributos adicionales
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    // Enums
    public enum TooltipTrigger
    {
        Hover,
        Click,
        Focus,
        HoverFocus,
        Manual
    }

    public enum TooltipPlacement
    {
        Top,
        TopStart,
        TopEnd,
        Right,
        RightStart,
        RightEnd,
        Bottom,
        BottomStart,
        BottomEnd,
        Left,
        LeftStart,
        LeftEnd,
        Auto
    }

    public enum TooltipTheme
    {
        Dark,
        Light,
        Primary,
        Success,
        Warning,
        Danger,
        Info
    }

    public enum TooltipSize
    {
        Small,
        Default,
        Large
    }

    // Estado interno
    private ElementReference tooltipElement;
    private ElementReference popperElement;
    private bool isVisible = false;
    private string currentContent = "";
    private string tooltipStyle = "";
    private string arrowStyle = "";
    private Timer? showTimer;
    private Timer? hideTimer;
    private DotNetObjectReference<EzTooltip>? dotNetRef;
    private bool isInitialized = false;
    private bool isMouseOverTooltip = false;

    protected override async Task OnInitializedAsync()
    {
        dotNetRef = DotNetObjectReference.Create(this);
        UpdateContent();
    }

    protected override async Task OnParametersSetAsync()
    {
        UpdateContent();
        await base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isInitialized = true;

            // Inicializar Popper.js si el tooltip está visible
            if (isVisible)
            {
                await UpdatePosition();
            }
        }
    }

    // Métodos públicos
    public async Task ShowAsync()
    {
        if (Trigger == TooltipTrigger.Manual && !Disabled && !string.IsNullOrEmpty(currentContent))
        {
            await ShowTooltip();
        }
    }

    public async Task HideAsync()
    {
        if (Trigger == TooltipTrigger.Manual)
        {
            await HideTooltip();
        }
    }

    public async Task ToggleAsync()
    {
        if (Trigger == TooltipTrigger.Manual)
        {
            if (isVisible)
            {
                await HideAsync();
            }
            else
            {
                await ShowAsync();
            }
        }
    }

    public async Task UpdateContentAsync(string newContent)
    {
        currentContent = newContent;
        if (isVisible)
        {
            StateHasChanged();
            await UpdatePosition();
        }
    }

    // Manejadores de eventos
    private async Task HandleMouseEnter()
    {
        if (ShouldTriggerOnHover() && !Disabled && !string.IsNullOrEmpty(currentContent))
        {
            CancelHideTimer();

            if (Delay > 0)
            {
                showTimer?.Dispose();
                showTimer = new Timer(async _ =>
                {
                    await InvokeAsync(async () => await ShowTooltip());
                }, null, Delay, Timeout.Infinite);
            }
            else
            {
                await ShowTooltip();
            }
        }
    }

    private async Task HandleMouseLeave()
    {
        if (ShouldTriggerOnHover())
        {
            CancelShowTimer();

            if (Interactive)
            {
                // Dar tiempo para mover el mouse al tooltip
                hideTimer?.Dispose();
                hideTimer = new Timer(async _ =>
                {
                    await InvokeAsync(async () =>
                    {
                        if (!isMouseOverTooltip)
                        {
                            await HideTooltip();
                        }
                    });
                }, null, 100, Timeout.Infinite);
            }
            else if (HideDelay > 0)
            {
                hideTimer?.Dispose();
                hideTimer = new Timer(async _ =>
                {
                    await InvokeAsync(async () => await HideTooltip());
                }, null, HideDelay, Timeout.Infinite);
            }
            else
            {
                await HideTooltip();
            }
        }
    }

    private async Task HandleClick()
    {
        if (Trigger == TooltipTrigger.Click && !Disabled && !string.IsNullOrEmpty(currentContent))
        {
            if (isVisible)
            {
                await HideTooltip();
            }
            else
            {
                await ShowTooltip();
            }
        }
    }

    private async Task HandleFocus()
    {
        if (ShouldTriggerOnFocus() && !Disabled && !string.IsNullOrEmpty(currentContent))
        {
            await ShowTooltip();
        }
    }

    private async Task HandleBlur()
    {
        if (ShouldTriggerOnFocus())
        {
            await HideTooltip();
        }
    }

    // Métodos privados
    private async Task ShowTooltip()
    {
        if (!isVisible && isInitialized)
        {
            isVisible = true;
            StateHasChanged();

            await Task.Yield(); // Permitir que el DOM se actualice

            await UpdatePosition();
            await OnShow.InvokeAsync();
            await OnToggle.InvokeAsync(true);
        }
    }

    private async Task HideTooltip()
    {
        if (isVisible)
        {
            isVisible = false;
            StateHasChanged();

            await OnHide.InvokeAsync();
            await OnToggle.InvokeAsync(false);
        }
    }

    private async Task UpdatePosition()
    {
        if (isInitialized && isVisible)
        {
            await JS.InvokeVoidAsync("EzTooltip.updatePosition",
                tooltipElement, popperElement, GetPlacementString(), Offset);
        }
    }

    private void UpdateContent()
    {
        currentContent = Text ?? Title ?? "";
    }

    private bool ShouldTriggerOnHover()
    {
        return Trigger == TooltipTrigger.Hover || Trigger == TooltipTrigger.HoverFocus;
    }

    private bool ShouldTriggerOnFocus()
    {
        return Trigger == TooltipTrigger.Focus || Trigger == TooltipTrigger.HoverFocus;
    }

    private void CancelShowTimer()
    {
        showTimer?.Dispose();
        showTimer = null;
    }

    private void CancelHideTimer()
    {
        hideTimer?.Dispose();
        hideTimer = null;
    }

    private string GetTooltipClass()
    {
        var classes = new List<string> { "ez-tooltip" };

        // Tema
        classes.Add($"ez-tooltip-{GetThemeString()}");

        // Tamaño
        if (Size != TooltipSize.Default)
        {
            classes.Add($"ez-tooltip-{GetSizeString()}");
        }

        // Placement
        classes.Add($"bs-tooltip-{GetPlacementClass()}");

        // Sin flecha
        if (!ShowArrow)
        {
            classes.Add("ez-tooltip-no-arrow");
        }

        // No wrap
        if (NoWrap)
        {
            classes.Add("text-nowrap");
        }

        // Clase personalizada
        if (!string.IsNullOrEmpty(TooltipClass))
        {
            classes.Add(TooltipClass);
        }

        return string.Join(" ", classes);
    }

    private string GetPlacementString()
    {
        return Placement switch
        {
            TooltipPlacement.TopStart => "top-start",
            TooltipPlacement.TopEnd => "top-end",
            TooltipPlacement.RightStart => "right-start",
            TooltipPlacement.RightEnd => "right-end",
            TooltipPlacement.BottomStart => "bottom-start",
            TooltipPlacement.BottomEnd => "bottom-end",
            TooltipPlacement.LeftStart => "left-start",
            TooltipPlacement.LeftEnd => "left-end",
            TooltipPlacement.Auto => "auto",
            _ => Placement.ToString().ToLower()
        };
    }

    private string GetPlacementClass()
    {
        return Placement switch
        {
            TooltipPlacement.TopStart => "top",
            TooltipPlacement.TopEnd => "top",
            TooltipPlacement.RightStart => "end",
            TooltipPlacement.RightEnd => "end",
            TooltipPlacement.BottomStart => "bottom",
            TooltipPlacement.BottomEnd => "bottom",
            TooltipPlacement.LeftStart => "start",
            TooltipPlacement.LeftEnd => "start",
            TooltipPlacement.Right => "end",
            TooltipPlacement.Left => "start",
            TooltipPlacement.Auto => "auto",
            _ => Placement.ToString().ToLower()
        };
    }

    private string GetThemeString()
    {
        return Theme.ToString().ToLower();
    }

    private string GetSizeString()
    {
        return Size.ToString().ToLower();
    }

    [JSInvokable]
    public async Task HandleTooltipMouseEnter()
    {
        isMouseOverTooltip = true;
        CancelHideTimer();
    }

    [JSInvokable]
    public async Task HandleTooltipMouseLeave()
    {
        isMouseOverTooltip = false;
        if (ShouldTriggerOnHover())
        {
            await HideTooltip();
        }
    }

    public async ValueTask DisposeAsync()
    {
        CancelShowTimer();
        CancelHideTimer();

        if (isVisible)
        {
            await HideTooltip();
        }

        if (isInitialized)
        {
            await JS.InvokeVoidAsync("EzTooltip.dispose", popperElement);
        }

        dotNetRef?.Dispose();
    }
}

<style>
    /* Tooltip base styles */
    .ez-tooltip {
        position: absolute;
        z-index: var(--z-tooltip, 1070);
        display: block;
        margin: 0;
        font-family: var(--bs-font-sans-serif);
        font-style: normal;
        font-weight: 400;
        line-height: 1.5;
        text-align: left;
        text-decoration: none;
        text-shadow: none;
        text-transform: none;
        letter-spacing: normal;
        word-break: normal;
        word-spacing: normal;
        white-space: normal;
        line-break: auto;
        font-size: 0.875rem;
        word-wrap: break-word;
        opacity: 0;
        transition: opacity 0.15s ease-in-out;
    }

        .ez-tooltip.show {
            opacity: 1;
        }

    .ez-tooltip-arrow {
        position: absolute;
        display: block;
        width: 0.8rem;
        height: 0.4rem;
    }

        .ez-tooltip-arrow::before {
            position: absolute;
            content: "";
            border-color: transparent;
            border-style: solid;
        }

    /* Dark theme (default) */
    .ez-tooltip-dark .ez-tooltip-inner {
        background-color: #000;
        color: #fff;
    }

    .bs-tooltip-top .ez-tooltip-dark .ez-tooltip-arrow::before,
    .bs-tooltip-auto[data-popper-placement^="top"] .ez-tooltip-dark .ez-tooltip-arrow::before {
        border-top-color: #000;
    }

    .bs-tooltip-end .ez-tooltip-dark .ez-tooltip-arrow::before,
    .bs-tooltip-auto[data-popper-placement^="right"] .ez-tooltip-dark .ez-tooltip-arrow::before {
        border-right-color: #000;
    }

    .bs-tooltip-bottom .ez-tooltip-dark .ez-tooltip-arrow::before,
    .bs-tooltip-auto[data-popper-placement^="bottom"] .ez-tooltip-dark .ez-tooltip-arrow::before {
        border-bottom-color: #000;
    }

    .bs-tooltip-start .ez-tooltip-dark .ez-tooltip-arrow::before,
    .bs-tooltip-auto[data-popper-placement^="left"] .ez-tooltip-dark .ez-tooltip-arrow::before {
        border-left-color: #000;
    }

    /* Light theme */
    .ez-tooltip-light .ez-tooltip-inner {
        background-color: #fff;
        color: #212529;
        border: 1px solid #dee2e6;
        box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.1);
    }

    /* Color themes */
    .ez-tooltip-primary .ez-tooltip-inner {
        background-color: var(--bs-primary);
        color: #fff;
    }

    .ez-tooltip-success .ez-tooltip-inner {
        background-color: var(--bs-success);
        color: #fff;
    }

    .ez-tooltip-warning .ez-tooltip-inner {
        background-color: var(--bs-warning);
        color: #000;
    }

    .ez-tooltip-danger .ez-tooltip-inner {
        background-color: var(--bs-danger);
        color: #fff;
    }

    .ez-tooltip-info .ez-tooltip-inner {
        background-color: var(--bs-info);
        color: #fff;
    }

    /* Arrow positioning */
    .bs-tooltip-top,
    .bs-tooltip-auto[data-popper-placement^="top"] {
        padding: 0.4rem 0;
    }

        .bs-tooltip-top .ez-tooltip-arrow,
        .bs-tooltip-auto[data-popper-placement^="top"] .ez-tooltip-arrow {
            bottom: 0;
        }

            .bs-tooltip-top .ez-tooltip-arrow::before,
            .bs-tooltip-auto[data-popper-placement^="top"] .ez-tooltip-arrow::before {
                top: -1px;
                border-width: 0.4rem 0.4rem 0;
            }

    .bs-tooltip-end,
    .bs-tooltip-auto[data-popper-placement^="right"] {
        padding: 0 0.4rem;
    }

        .bs-tooltip-end .ez-tooltip-arrow,
        .bs-tooltip-auto[data-popper-placement^="right"] .ez-tooltip-arrow {
            left: 0;
            width: 0.4rem;
            height: 0.8rem;
        }

            .bs-tooltip-end .ez-tooltip-arrow::before,
            .bs-tooltip-auto[data-popper-placement^="right"] .ez-tooltip-arrow::before {
                right: -1px;
                border-width: 0.4rem 0.4rem 0.4rem 0;
            }

    .bs-tooltip-bottom,
    .bs-tooltip-auto[data-popper-placement^="bottom"] {
        padding: 0.4rem 0;
    }

        .bs-tooltip-bottom .ez-tooltip-arrow,
        .bs-tooltip-auto[data-popper-placement^="bottom"] .ez-tooltip-arrow {
            top: 0;
        }

            .bs-tooltip-bottom .ez-tooltip-arrow::before,
            .bs-tooltip-auto[data-popper-placement^="bottom"] .ez-tooltip-arrow::before {
                bottom: -1px;
                border-width: 0 0.4rem 0.4rem;
            }

    .bs-tooltip-start,
    .bs-tooltip-auto[data-popper-placement^="left"] {
        padding: 0 0.4rem;
    }

        .bs-tooltip-start .ez-tooltip-arrow,
        .bs-tooltip-auto[data-popper-placement^="left"] .ez-tooltip-arrow {
            right: 0;
            width: 0.4rem;
            height: 0.8rem;
        }

            .bs-tooltip-start .ez-tooltip-arrow::before,
            .bs-tooltip-auto[data-popper-placement^="left"] .ez-tooltip-arrow::before {
                left: -1px;
                border-width: 0.4rem 0 0.4rem 0.4rem;
            }

    /* Inner content */
    .ez-tooltip-inner {
        max-width: 200px;
        padding: 0.25rem 0.5rem;
        text-align: center;
        border-radius: 0.25rem;
    }

    /* Size variations */
    .ez-tooltip-small .ez-tooltip-inner {
        padding: 0.125rem 0.375rem;
        font-size: 0.75rem;
    }

    .ez-tooltip-large .ez-tooltip-inner {
        padding: 0.5rem 0.75rem;
        font-size: 1rem;
    }

    /* No arrow */
    .ez-tooltip-no-arrow .ez-tooltip-arrow {
        display: none;
    }

    /* Interactive tooltip */
    .ez-tooltip-interactive {
        pointer-events: auto;
    }

    /* Wrapper styles */
    .ez-tooltip-wrapper {
        display: inline-block;
        cursor: pointer;
    }
</style>