@implements IDisposable

<div class="search-box @ContainerClass">
    <div class="input-group @Size">
        <span class="input-group-text">
            <i class="fa-light fa-search"></i>
        </span>

        <input type="text"
               class="form-control"
               value="@Value"
               @oninput="OnInput"
               @onfocus="OnFocus"
               @onblur="OnBlur"
               placeholder="@Placeholder"
               disabled="@Disabled" />

        @if (!string.IsNullOrEmpty(Value))
        {
            <button type="button" class="btn btn-outline-secondary" @onclick="Clear">
                <i class="fa-light fa-times"></i>
            </button>
        }

        @if (ShowAdvancedButton)
        {
            <button type="button" class="btn btn-outline-secondary" @onclick="ToggleAdvanced"
                    title="Búsqueda avanzada">
                <i class="fa-light fa-sliders"></i>
            </button>
        }
    </div>

    @if (ShowSuggestions && suggestions.Any() && isFocused)
    {
        <div class="search-suggestions">
            @foreach (var suggestion in suggestions)
            {
                <button type="button" class="suggestion-item" @onclick="() => SelectSuggestion(suggestion)">
                    <i class="fa-light fa-history me-2"></i>@suggestion
                </button>
            }
        </div>
    }

    @if (showAdvanced)
    {
        <div class="advanced-search mt-3 p-3 border rounded">
            @AdvancedContent
        </div>
    }
</div>

@code {
    [Parameter] public string Value { get; set; } = "";
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public EventCallback<string> OnSearch { get; set; }
    [Parameter] public string Placeholder { get; set; } = "Buscar...";
    [Parameter] public string ContainerClass { get; set; } = "";
    [Parameter] public string Size { get; set; } = ""; // input-group-sm, input-group-lg
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public bool ShowSuggestions { get; set; } = true;
    [Parameter] public bool ShowAdvancedButton { get; set; } = false;
    [Parameter] public RenderFragment? AdvancedContent { get; set; }
    [Parameter] public int DebounceDelay { get; set; } = 300; // milisegundos
    [Parameter] public List<string> RecentSearches { get; set; } = new();

    private Timer? debounceTimer;
    private bool isFocused = false;
    private bool showAdvanced = false;
    private List<string> suggestions = new();

    protected override void OnInitialized()
    {
        UpdateSuggestions();
    }

    private async Task OnInput(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString() ?? "";
        Value = newValue;
        await ValueChanged.InvokeAsync(newValue);

        // Cancelar el timer anterior
        debounceTimer?.Dispose();

        // Crear nuevo timer para debounce
        debounceTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await OnSearch.InvokeAsync(newValue);
                UpdateSuggestions();
            });
        }, null, DebounceDelay, Timeout.Infinite);
    }

    private void OnFocus()
    {
        isFocused = true;
        UpdateSuggestions();
    }

    private void OnBlur()
    {
        // Retrasar para permitir clicks en sugerencias
        Task.Delay(200).ContinueWith(_ =>
        {
            InvokeAsync(() =>
            {
                isFocused = false;
                StateHasChanged();
            });
        });
    }

    private async Task Clear()
    {
        Value = "";
        await ValueChanged.InvokeAsync("");
        await OnSearch.InvokeAsync("");
        UpdateSuggestions();
    }

    private async Task SelectSuggestion(string suggestion)
    {
        Value = suggestion;
        await ValueChanged.InvokeAsync(suggestion);
        await OnSearch.InvokeAsync(suggestion);
        isFocused = false;
    }

    private void ToggleAdvanced()
    {
        showAdvanced = !showAdvanced;
    }

    private void UpdateSuggestions()
    {
        if (!ShowSuggestions || string.IsNullOrEmpty(Value))
        {
            suggestions = RecentSearches.Take(5).ToList();
        }
        else
        {
            suggestions = RecentSearches
                .Where(s => s.Contains(Value, StringComparison.OrdinalIgnoreCase))
                .Take(5)
                .ToList();
        }
    }

    public void Dispose()
    {
        debounceTimer?.Dispose();
    }
}

<style>
    .search-box {
        position: relative;
    }

    .search-suggestions {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        z-index: 1000;
        background-color: white;
        border: 1px solid var(--bs-border-color);
        border-top: 0;
        border-radius: 0 0 var(--bs-border-radius) var(--bs-border-radius);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        max-height: 200px;
        overflow-y: auto;
    }

    .suggestion-item {
        display: block;
        width: 100%;
        padding: 0.5rem 1rem;
        text-align: left;
        border: none;
        background: none;
        transition: background-color 0.15s ease;
    }

        .suggestion-item:hover {
            background-color: var(--bs-gray-100);
        }

        .suggestion-item:not(:last-child) {
            border-bottom: 1px solid var(--bs-gray-200);
        }

    .advanced-search {
        background-color: var(--bs-gray-50);
    }
</style>