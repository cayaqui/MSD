@implements IEzAccordion
@implements IDisposable

<div class="@GetAccordionClass()" id="@accordionId">
    <CascadingValue Value="(IEzAccordion)this">
        @ChildContent
    </CascadingValue>
</div>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? Class { get; set; }
    [Parameter] public bool AlwaysOpen { get; set; } = false;
    [Parameter] public bool Flush { get; set; } = false;
    [Parameter] public string? ActiveItemId { get; set; }
    [Parameter] public EventCallback<string?> ActiveItemIdChanged { get; set; }
    [Parameter] public EventCallback<AccordionItemEventArgs> OnItemShow { get; set; }
    [Parameter] public EventCallback<AccordionItemEventArgs> OnItemShown { get; set; }
    [Parameter] public EventCallback<AccordionItemEventArgs> OnItemHide { get; set; }
    [Parameter] public EventCallback<AccordionItemEventArgs> OnItemHidden { get; set; }

    private string accordionId = $"accordion-{Guid.NewGuid():N}";
    private Dictionary<string, IEzAccordionItem> items = new();
    private string? currentActiveItemId;

    protected override void OnInitialized()
    {
        currentActiveItemId = ActiveItemId;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (currentActiveItemId != ActiveItemId)
        {
            currentActiveItemId = ActiveItemId;

            // Actualizar el estado de los items
            foreach (var item in items.Values)
            {
                await item.UpdateExpandedStateAsync(item.ItemId == currentActiveItemId);
            }
        }
    }

    public void RegisterItem(IEzAccordionItem item)
    {
        if (item != null && !string.IsNullOrEmpty(item.ItemId))
        {
            items[item.ItemId] = item;
        }
    }

    public void UnregisterItem(IEzAccordionItem item)
    {
        if (item != null && !string.IsNullOrEmpty(item.ItemId))
        {
            items.Remove(item.ItemId);
        }
    }

    public async Task ToggleItemAsync(string itemId)
    {
        if (string.IsNullOrEmpty(itemId)) return;

        var item = items.GetValueOrDefault(itemId);
        if (item == null) return;

        var wasExpanded = item.IsExpanded;

        if (!AlwaysOpen && !wasExpanded)
        {
            // Colapsar otros items si no es AlwaysOpen
            foreach (var otherItem in items.Values.Where(i => i.ItemId != itemId && i.IsExpanded))
            {
                await HideItemAsync(otherItem.ItemId);
            }
        }

        if (wasExpanded)
        {
            await HideItemAsync(itemId);
        }
        else
        {
            await ShowItemAsync(itemId);
        }
    }

    private async Task ShowItemAsync(string itemId)
    {
        var item = items.GetValueOrDefault(itemId);
        if (item == null) return;

        var args = new AccordionItemEventArgs { ItemId = itemId, Item = item };

        await OnItemShow.InvokeAsync(args);
        await item.UpdateExpandedStateAsync(true);

        currentActiveItemId = itemId;
        await ActiveItemIdChanged.InvokeAsync(itemId);

        await OnItemShown.InvokeAsync(args);
    }

    private async Task HideItemAsync(string itemId)
    {
        var item = items.GetValueOrDefault(itemId);
        if (item == null) return;

        var args = new AccordionItemEventArgs { ItemId = itemId, Item = item };

        await OnItemHide.InvokeAsync(args);
        await item.UpdateExpandedStateAsync(false);

        if (currentActiveItemId == itemId)
        {
            currentActiveItemId = null;
            await ActiveItemIdChanged.InvokeAsync(null);
        }

        await OnItemHidden.InvokeAsync(args);
    }

    private string GetAccordionClass()
    {
        var classes = new List<string> { "accordion" };

        if (Flush)
        {
            classes.Add("accordion-flush");
        }

        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }

        return string.Join(" ", classes);
    }

    public void Dispose()
    {
        items.Clear();
    }
}