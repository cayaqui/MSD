@inject ILoadingService LoadingService
@implements IDisposable

@if (isLoading)
{
    <div class="loading-overlay">
        <div class="loading-content">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            @if (!string.IsNullOrEmpty(loadingMessage))
            {
                <p class="mt-3 mb-0">@loadingMessage</p>
            }
        </div>
    </div>
}

@code {
    private bool isLoading;
    private string loadingMessage = "";
    
    protected override void OnInitialized()
    {
        LoadingService.OnLoadingChanged += UpdateLoading;
    }
    
    private void UpdateLoading(bool loading, string message)
    {
        isLoading = loading;
        loadingMessage = message;
        InvokeAsync(StateHasChanged);
    }
    
    public void Dispose()
    {
        LoadingService.OnLoadingChanged -= UpdateLoading;
    }
}

<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
    }
    
    .loading-content {
        background-color: white;
        padding: 2rem;
        border-radius: var(--border-radius);
        text-align: center;
        box-shadow: var(--shadow-lg);
    }
    
    .loading-content .spinner-border {
        width: 3rem;
        height: 3rem;
    }
</style>