<div class="@GetAvatarClass()" @attributes="AdditionalAttributes">
    @if (!string.IsNullOrEmpty(Src))
    {
        <img src="@Src"
             alt="@Alt"
             class="avatar-img"
             @onerror="HandleImageError" />
    }
    else if (!string.IsNullOrEmpty(Icon))
    {
        <i class="@Icon @IconClass"></i>
    }
    else if (!string.IsNullOrEmpty(Text))
    {
        <span class="avatar-text">@GetInitials()</span>
    }
    else if (ChildContent != null)
    {
        @ChildContent
    }
    else
    {
        <!-- Fallback: User icon -->
        <i class="fa-light fa-user"></i>
    }

    @if (ShowStatus)
    {
        <span class="@GetStatusClass()"></span>
    }

    @if (BadgeContent != null)
    {
        <span class="avatar-badge">
            @BadgeContent
        </span>
    }
</div>

@if (ShowTooltip && !string.IsNullOrEmpty(TooltipText))
{
    <EzTooltip Text="@TooltipText" Placement="EzTooltip.TooltipPlacement.Top">
        <span></span>
    </EzTooltip>
}

@code {
    // Contenido
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? BadgeContent { get; set; }
    [Parameter] public string? Src { get; set; }
    [Parameter] public string? Alt { get; set; }
    [Parameter] public string? Text { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public string? IconClass { get; set; }

    // Apariencia
    [Parameter] public AvatarSize Size { get; set; } = AvatarSize.Default;
    [Parameter] public AvatarShape Shape { get; set; } = AvatarShape.Circle;
    [Parameter] public AvatarVariant Variant { get; set; } = AvatarVariant.Default;
    [Parameter] public bool Bordered { get; set; } = false;
    [Parameter] public string? BorderColor { get; set; }

    // Estado
    [Parameter] public bool ShowStatus { get; set; } = false;
    [Parameter] public StatusType Status { get; set; } = StatusType.Offline;
    [Parameter] public StatusPosition StatusPlacement { get; set; } = StatusPosition.BottomEnd;

    // Tooltip
    [Parameter] public bool ShowTooltip { get; set; } = false;
    [Parameter] public string? TooltipText { get; set; }

    // Grupo
    [Parameter] public bool Stacked { get; set; } = false;

    // CSS personalizado
    [Parameter] public string? Class { get; set; }
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    // Eventos
    [Parameter] public EventCallback<ErrorEventArgs> OnImageError { get; set; }
    [Parameter] public EventCallback OnClick { get; set; }

    // Enums
    public enum AvatarSize
    {
        ExtraSmall,
        Small,
        Default,
        Large,
        ExtraLarge,
        Jumbo
    }

    public enum AvatarShape
    {
        Circle,
        Square,
        Rounded
    }

    public enum AvatarVariant
    {
        Default,
        Primary,
        Secondary,
        Success,
        Danger,
        Warning,
        Info,
        Light,
        Dark
    }

    public enum StatusType
    {
        Online,
        Away,
        Busy,
        Offline
    }

    public enum StatusPosition
    {
        TopStart,
        TopEnd,
        BottomStart,
        BottomEnd
    }

    private bool imageLoadFailed = false;

    private string GetAvatarClass()
    {
        var classes = new List<string> { "avatar" };

        // Tamaño
        classes.Add($"avatar-{GetSizeString()}");

        // Forma
        if (Shape != AvatarShape.Circle)
        {
            classes.Add($"avatar-{Shape.ToString().ToLower()}");
        }

        // Variante
        if (Variant != AvatarVariant.Default)
        {
            classes.Add($"avatar-{Variant.ToString().ToLower()}");
        }

        // Borde
        if (Bordered)
        {
            classes.Add("avatar-bordered");
            if (!string.IsNullOrEmpty(BorderColor))
            {
                classes.Add($"border-{BorderColor}");
            }
        }

        // Click
        if (OnClick.HasDelegate)
        {
            classes.Add("avatar-clickable");
        }

        // Stacked
        if (Stacked)
        {
            classes.Add("avatar-stacked");
        }

        // Sin imagen o con error
        if (string.IsNullOrEmpty(Src) || imageLoadFailed)
        {
            classes.Add("avatar-placeholder");
        }

        // Clase personalizada
        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }

        return string.Join(" ", classes);
    }

    private string GetSizeString()
    {
        return Size switch
        {
            AvatarSize.ExtraSmall => "xs",
            AvatarSize.Small => "sm",
            AvatarSize.Large => "lg",
            AvatarSize.ExtraLarge => "xl",
            AvatarSize.Jumbo => "xxl",
            _ => "md"
        };
    }

    private string GetStatusClass()
    {
        var classes = new List<string> { "avatar-status" };

        // Tipo de estado
        classes.Add($"status-{Status.ToString().ToLower()}");

        // Posición
        classes.Add(GetStatusPositionClass());

        return string.Join(" ", classes);
    }

    private string GetStatusPositionClass()
    {
        return StatusPlacement switch
        {
            StatusPosition.TopStart => "top-0 start-0",
            StatusPosition.TopEnd => "top-0 end-0",
            StatusPosition.BottomStart => "bottom-0 start-0",
            StatusPosition.BottomEnd => "bottom-0 end-0",
            _ => "bottom-0 end-0"
        };
    }

    private string GetInitials()
    {
        if (string.IsNullOrEmpty(Text)) return "";

        var words = Text.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (words.Length == 0) return "";

        if (words.Length == 1)
        {
            return words[0].Length > 0 ? words[0][0].ToString().ToUpper() : "";
        }

        // Tomar las iniciales de las primeras dos palabras
        var initials = "";
        if (words[0].Length > 0) initials += words[0][0].ToString().ToUpper();
        if (words[1].Length > 0) initials += words[1][0].ToString().ToUpper();

        return initials;
    }

    private async Task HandleImageError(ErrorEventArgs args)
    {
        imageLoadFailed = true;
        await OnImageError.InvokeAsync(args);
        StateHasChanged();
    }
}

<style>
    /* Avatar base */
    .avatar {
        position: relative;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        vertical-align: middle;
        flex-shrink: 0;
        font-size: 1rem;
        font-weight: 500;
        height: 2.5rem;
        width: 2.5rem;
        border-radius: 50%;
        background-color: var(--bs-gray-200);
        color: var(--bs-gray-600);
        overflow: hidden;
    }

    /* Tamaños */
    .avatar-xs {
        height: 1.5rem;
        width: 1.5rem;
        font-size: 0.75rem;
    }

    .avatar-sm {
        height: 2rem;
        width: 2rem;
        font-size: 0.875rem;
    }

    .avatar-md {
        height: 2.5rem;
        width: 2.5rem;
        font-size: 1rem;
    }

    .avatar-lg {
        height: 3rem;
        width: 3rem;
        font-size: 1.25rem;
    }

    .avatar-xl {
        height: 4rem;
        width: 4rem;
        font-size: 1.5rem;
    }

    .avatar-xxl {
        height: 5rem;
        width: 5rem;
        font-size: 2rem;
    }

    /* Formas */
    .avatar-square {
        border-radius: 0;
    }

    .avatar-rounded {
        border-radius: 0.375rem;
    }

    /* Imagen */
    .avatar-img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    /* Texto */
    .avatar-text {
        font-weight: 500;
        line-height: 1;
        user-select: none;
    }

    /* Variantes de color */
    .avatar-primary {
        background-color: var(--bs-primary);
        color: white;
    }

    .avatar-secondary {
        background-color: var(--bs-secondary);
        color: white;
    }

    .avatar-success {
        background-color: var(--bs-success);
        color: white;
    }

    .avatar-danger {
        background-color: var(--bs-danger);
        color: white;
    }

    .avatar-warning {
        background-color: var(--bs-warning);
        color: var(--bs-dark);
    }

    .avatar-info {
        background-color: var(--bs-info);
        color: white;
    }

    .avatar-light {
        background-color: var(--bs-light);
        color: var(--bs-dark);
    }

    .avatar-dark {
        background-color: var(--bs-dark);
        color: white;
    }

    /* Placeholder (sin imagen) */
    .avatar-placeholder {
        background-color: var(--bs-gray-200);
        color: var(--bs-gray-600);
    }

        .avatar-placeholder.avatar-primary {
            background-color: rgba(var(--bs-primary-rgb), 0.1);
            color: var(--bs-primary);
        }

        .avatar-placeholder.avatar-secondary {
            background-color: rgba(var(--bs-secondary-rgb), 0.1);
            color: var(--bs-secondary);
        }

        .avatar-placeholder.avatar-success {
            background-color: rgba(var(--bs-success-rgb), 0.1);
            color: var(--bs-success);
        }

        .avatar-placeholder.avatar-danger {
            background-color: rgba(var(--bs-danger-rgb), 0.1);
            color: var(--bs-danger);
        }

        .avatar-placeholder.avatar-warning {
            background-color: rgba(var(--bs-warning-rgb), 0.1);
            color: var(--bs-warning);
        }

        .avatar-placeholder.avatar-info {
            background-color: rgba(var(--bs-info-rgb), 0.1);
            color: var(--bs-info);
        }

    /* Borde */
    .avatar-bordered {
        border: 2px solid var(--bs-white);
        box-shadow: 0 0 0 1px var(--bs-gray-300);
    }

    /* Clickable */
    .avatar-clickable {
        cursor: pointer;
        transition: transform 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

        .avatar-clickable:hover {
            transform: scale(1.05);
            box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.15);
        }

        .avatar-clickable:active {
            transform: scale(0.98);
        }

    /* Estado de presencia */
    .avatar-status {
        position: absolute;
        display: block;
        width: 25%;
        height: 25%;
        min-width: 0.5rem;
        min-height: 0.5rem;
        border-radius: 50%;
        border: 2px solid var(--bs-white);
    }

    .status-online {
        background-color: var(--bs-success);
    }

    .status-away {
        background-color: var(--bs-warning);
    }

    .status-busy {
        background-color: var(--bs-danger);
    }

    .status-offline {
        background-color: var(--bs-gray-400);
    }

    /* Badge en avatar */
    .avatar-badge {
        position: absolute;
        bottom: 0;
        right: 0;
        transform: translate(25%, 25%);
    }

    /* Grupo de avatares apilados */
    .avatar-group {
        display: inline-flex;
        align-items: center;
    }

        .avatar-group .avatar-stacked {
            margin-right: -0.75rem;
            border: 2px solid var(--bs-white);
            transition: transform 0.15s ease-in-out, z-index 0.15s ease-in-out;
        }

            .avatar-group .avatar-stacked:hover {
                transform: translateY(-0.125rem);
                z-index: 1;
            }

            .avatar-group .avatar-stacked:last-child {
                margin-right: 0;
            }

    /* Avatar más para grupos */
    .avatar-more {
        background-color: var(--bs-gray-300);
        color: var(--bs-gray-700);
        font-size: 0.875em;
        font-weight: 600;
    }

    /* Animación de carga */
    .avatar-loading {
        position: relative;
        overflow: hidden;
    }

        .avatar-loading::after {
            content: "";
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient( 90deg, transparent, rgba(255, 255, 255, 0.4), transparent );
            animation: avatar-loading 1.5s infinite;
        }

    @@keyframes avatar-loading {
        0% {
            left: -100%;
        }

        100% {
            left: 100%;
        }
    }
</style>