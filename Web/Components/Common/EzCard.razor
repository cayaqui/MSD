<div class="@GetCardClasses()" @attributes="AdditionalAttributes">
    @if (Header != null || !string.IsNullOrEmpty(Title) || HeaderActions != null)
    {
        <div class="@GetHeaderClasses()">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    @if (!string.IsNullOrEmpty(Icon))
                    {
                        <i class="@Icon me-2"></i>
                    }
                    @if (!string.IsNullOrEmpty(Title))
                    {
                        <h5 class="card-title mb-0">@Title</h5>
                    }
                    @if (Header != null)
                    {
                        @Header
                    }
                </div>
                @if (HeaderActions != null)
                {
                    <div class="card-header-actions">
                        @HeaderActions
                    </div>
                }
            </div>
        </div>
    }

    @if (IsLoading)
    {
        <div class="card-body">
            <div class="d-flex justify-content-center align-items-center" style="min-height: @LoadingHeight">
                <div class="text-center">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                    @if (!string.IsNullOrEmpty(LoadingText))
                    {
                        <p class="text-muted mb-0">@LoadingText</p>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        @if (Body != null || ChildContent != null)
        {
            <div class="@GetBodyClasses()">
                @(Body ?? ChildContent)
            </div>
        }
    }

    @if (Footer != null)
    {
        <div class="@GetFooterClasses()">
            @Footer
        </div>
    }
</div>

@code {
    [Parameter] public string? Title { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public RenderFragment? Header { get; set; }
    [Parameter] public RenderFragment? HeaderActions { get; set; }
    [Parameter] public RenderFragment? Body { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? Footer { get; set; }

    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public string LoadingText { get; set; } = "Cargando...";
    [Parameter] public string LoadingHeight { get; set; } = "200px";

    [Parameter] public bool NoPadding { get; set; }
    [Parameter] public bool NoBodyPadding { get; set; }
    [Parameter] public bool Bordered { get; set; } = true;
    [Parameter] public bool Shadow { get; set; } = true;
    [Parameter] public bool Hoverable { get; set; }
    [Parameter] public bool Collapsible { get; set; }
    [Parameter] public bool Collapsed { get; set; }

    [Parameter] public string? Class { get; set; }
    [Parameter] public string? HeaderClass { get; set; }
    [Parameter] public string? BodyClass { get; set; }
    [Parameter] public string? FooterClass { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    private string GetCardClasses()
    {
        var classes = new List<string> { "card", "ez-card" };

        if (!Bordered)
            classes.Add("border-0");

        if (Shadow)
            classes.Add("shadow-sm");

        if (Hoverable)
            classes.Add("card-hoverable");

        if (NoPadding)
            classes.Add("p-0");

        if (!string.IsNullOrEmpty(Class))
            classes.Add(Class);

        return string.Join(" ", classes);
    }

    private string GetHeaderClasses()
    {
        var classes = new List<string> { "card-header" };

        if (!string.IsNullOrEmpty(HeaderClass))
            classes.Add(HeaderClass);

        return string.Join(" ", classes);
    }

    private string GetBodyClasses()
    {
        var classes = new List<string> { "card-body" };

        if (NoBodyPadding)
            classes.Add("p-0");

        if (!string.IsNullOrEmpty(BodyClass))
            classes.Add(BodyClass);

        return string.Join(" ", classes);
    }

    private string GetFooterClasses()
    {
        var classes = new List<string> { "card-footer" };

        if (!string.IsNullOrEmpty(FooterClass))
            classes.Add(FooterClass);

        return string.Join(" ", classes);
    }
}

<style>
    .ez-card {
        border-radius: var(--border-radius);
        background-color: var(--bg-surface);
        margin-bottom: 1.5rem;
        transition: all 0.3s ease;
    }

        .ez-card.shadow-sm {
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }

        .ez-card.card-hoverable:hover {
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
            transform: translateY(-2px);
        }

        .ez-card .card-header {
            background-color: var(--bg-light);
            border-bottom: 1px solid var(--border-color);
            padding: 1rem 1.5rem;
            border-radius: var(--border-radius) var(--border-radius) 0 0;
        }

            .ez-card .card-header .card-title {
                color: var(--text-primary);
                font-weight: 600;
                font-size: 1.1rem;
            }

        .ez-card .card-header-actions {
            display: flex;
            gap: 0.5rem;
            align-items: center;
        }

        .ez-card .card-body {
            padding: 1.5rem;
        }

        .ez-card .card-footer {
            background-color: var(--bg-light);
            border-top: 1px solid var(--border-color);
            padding: 1rem 1.5rem;
            border-radius: 0 0 var(--border-radius) var(--border-radius);
        }

    /* Variables CSS (deberían estar en variables.css) */
    :root {
        --border-radius: 0.5rem;
        --bg-surface: #ffffff;
        --bg-light: #f8f9fa;
        --border-color: #dee2e6;
        --text-primary: #212529;
    }

    /* Tema oscuro */
    @@media (prefers-color-scheme: dark) {
        : root {
            --bg-surface: #1a1a1a;
            --bg-light: #2a2a2a;
            --border-color: #404040;
            --text-primary: #f8f9fa;
        }
    }
</style>