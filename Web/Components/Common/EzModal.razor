@implements IAsyncDisposable
@inject IJSRuntime JS

<div class="modal fade @(IsVisible ? "show" : "") @AnimationClass"
     tabindex="-1"
     style="display: @(IsVisible ? "block" : "none");"
     @onclick="HandleBackdropClick">
    @if (ShowBackdrop)
    {
        <div class="modal-backdrop fade @(IsVisible ? "show" : "")" style="opacity: @BackdropOpacity"></div>
    }

    <div class="modal-dialog @GetSizeClass() @GetPositionClass() @(IsScrollable ? "modal-dialog-scrollable" : "")"
         @onclick:stopPropagation="true">
        <div class="modal-content @ContentClass">
            @if (ShowHeader)
            {
                <div class="modal-header @HeaderClass">
                    @if (Header != null)
                    {
                        @Header
                    }
                    else
                    {
                        <h5 class="modal-title @TitleClass">
                            @if (!string.IsNullOrEmpty(Icon))
                            {
                                <i class="@Icon me-2"></i>
                            }
                            @Title
                        </h5>
                    }

                    @if (ShowCloseButton)
                    {
                        <button type="button"
                                class="btn-close @CloseButtonClass"
                                aria-label="Cerrar"
                                @onclick="CloseModal"
                                disabled="@IsLoading">
                        </button>
                    }
                </div>
            }

            <div class="modal-body @BodyClass">
                @if (IsLoading)
                {
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Cargando...</span>
                        </div>
                        @if (!string.IsNullOrEmpty(LoadingText))
                        {
                            <p class="mt-3 text-muted">@LoadingText</p>
                        }
                    </div>
                }
                else if (Body != null)
                {
                    @Body
                }
                else if (ChildContent != null)
                {
                    @ChildContent
                }
            </div>

            @if (ShowFooter && Footer != null)
            {
                <div class="modal-footer @FooterClass">
                    @Footer
                </div>
            }
        </div>
    </div>
</div>

@code {
    // Parámetros principales
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public string Icon { get; set; } = "";
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? Header { get; set; }
    [Parameter] public RenderFragment? Body { get; set; }
    [Parameter] public RenderFragment? Footer { get; set; }

    // Opciones de comportamiento
    [Parameter] public bool ShowHeader { get; set; } = true;
    [Parameter] public bool ShowFooter { get; set; } = true;
    [Parameter] public bool ShowCloseButton { get; set; } = true;
    [Parameter] public bool CloseOnBackdropClick { get; set; } = true;
    [Parameter] public bool CloseOnEscape { get; set; } = true;
    [Parameter] public bool ShowBackdrop { get; set; } = true;
    [Parameter] public double BackdropOpacity { get; set; } = 0.5;
    [Parameter] public bool IsScrollable { get; set; } = false;
    [Parameter] public bool IsCentered { get; set; } = true;
    [Parameter] public bool IsFullscreen { get; set; } = false;
    [Parameter] public bool IsLoading { get; set; } = false;
    [Parameter] public string LoadingText { get; set; } = "Cargando...";

    // Tamaño del modal
    [Parameter] public ModalSize Size { get; set; } = ModalSize.Default;
    [Parameter] public ModalPosition Position { get; set; } = ModalPosition.Center;

    // Clases CSS personalizadas
    [Parameter] public string ModalClass { get; set; } = "";
    [Parameter] public string HeaderClass { get; set; } = "";
    [Parameter] public string TitleClass { get; set; } = "";
    [Parameter] public string BodyClass { get; set; } = "";
    [Parameter] public string FooterClass { get; set; } = "";
    [Parameter] public string ContentClass { get; set; } = "";
    [Parameter] public string CloseButtonClass { get; set; } = "";
    [Parameter] public string AnimationClass { get; set; } = "";

    // Eventos
    [Parameter] public EventCallback OnShow { get; set; }
    [Parameter] public EventCallback OnShown { get; set; }
    [Parameter] public EventCallback OnHide { get; set; }
    [Parameter] public EventCallback OnHidden { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnBackdropClick { get; set; }

    // Enums
    public enum ModalSize
    {
        Small,
        Default,
        Large,
        ExtraLarge,
        Fullscreen
    }

    public enum ModalPosition
    {
        Top,
        Center,
        Bottom
    }

    private bool _isVisible;
    private DotNetObjectReference<EzModal>? _dotNetRef;
    private bool _isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        _dotNetRef = DotNetObjectReference.Create(this);
        _isInitialized = true;
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_isVisible != IsVisible)
        {
            _isVisible = IsVisible;

            if (IsVisible)
            {
                await ShowModalInternal();
            }
            else
            {
                await HideModalInternal();
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && IsVisible)
        {
            await ShowModalInternal();
        }
    }

    // Métodos públicos
    public async Task ShowAsync()
    {
        if (!IsVisible)
        {
            IsVisible = true;
            await IsVisibleChanged.InvokeAsync(true);
            await ShowModalInternal();
        }
    }

    public async Task HideAsync()
    {
        if (IsVisible)
        {
            IsVisible = false;
            await IsVisibleChanged.InvokeAsync(false);
            await HideModalInternal();
        }
    }

    public async Task ToggleAsync()
    {
        if (IsVisible)
        {
            await HideAsync();
        }
        else
        {
            await ShowAsync();
        }
    }

    // Métodos privados
    private async Task ShowModalInternal()
    {
        if (!_isInitialized) return;

        await OnShow.InvokeAsync();

        // Añadir clase al body para prevenir scroll
        await JS.InvokeVoidAsync("document.body.classList.add", "modal-open");

        // Registrar manejador de tecla Escape si está habilitado
        if (CloseOnEscape)
        {
            await JS.InvokeVoidAsync("EzModal.registerEscapeHandler", _dotNetRef);
        }

        StateHasChanged();

        // Simular animación completa
        await Task.Delay(150);
        await OnShown.InvokeAsync();
    }

    private async Task HideModalInternal()
    {
        if (!_isInitialized) return;

        await OnHide.InvokeAsync();

        // Remover clase del body
        await JS.InvokeVoidAsync("document.body.classList.remove", "modal-open");

        // Desregistrar manejador de tecla Escape
        if (CloseOnEscape)
        {
            await JS.InvokeVoidAsync("EzModal.unregisterEscapeHandler");
        }

        StateHasChanged();

        // Simular animación completa
        await Task.Delay(150);
        await OnHidden.InvokeAsync();
    }

    private async Task CloseModal()
    {
        await HideAsync();
    }

    private async Task HandleBackdropClick(MouseEventArgs e)
    {
        await OnBackdropClick.InvokeAsync(e);

        if (CloseOnBackdropClick && !IsLoading)
        {
            await HideAsync();
        }
    }

    [JSInvokable]
    public async Task HandleEscapeKey()
    {
        if (CloseOnEscape && !IsLoading)
        {
            await HideAsync();
        }
    }

    private string GetSizeClass()
    {
        return Size switch
        {
            ModalSize.Small => "modal-sm",
            ModalSize.Large => "modal-lg",
            ModalSize.ExtraLarge => "modal-xl",
            ModalSize.Fullscreen => "modal-fullscreen",
            _ => ""
        };
    }

    private string GetPositionClass()
    {
        if (IsFullscreen) return "";

        return Position switch
        {
            ModalPosition.Top => "",
            ModalPosition.Center => IsCentered ? "modal-dialog-centered" : "",
            ModalPosition.Bottom => "modal-dialog-bottom",
            _ => IsCentered ? "modal-dialog-centered" : ""
        };
    }

    public async ValueTask DisposeAsync()
    {
        if (IsVisible)
        {
            await HideModalInternal();
        }

        _dotNetRef?.Dispose();
    }
}

<style>
    /* Animaciones personalizadas */
    .modal.fade {
        transition: opacity 0.15s linear;
    }

        .modal.fade.show {
            opacity: 1;
        }

        .modal.fade .modal-dialog {
            transition: transform 0.3s ease-out;
            transform: translate(0, -50px);
        }

        .modal.fade.show .modal-dialog {
            transform: none;
        }

    /* Posición inferior */
    .modal-dialog-bottom {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        margin: 0;
        max-width: 100%;
    }

        .modal-dialog-bottom .modal-content {
            border-radius: 0;
            border-bottom: none;
        }

    /* Mejoras visuales */
    .modal-content {
        border: none;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }

    .modal-header {
        border-bottom: 1px solid var(--border-color);
    }

    .modal-footer {
        border-top: 1px solid var(--border-color);
        background-color: var(--bg-light);
    }

    /* Estado de carga */
    .modal-body.loading {
        min-height: 200px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    /* Scrollable */
    .modal-dialog-scrollable .modal-body {
        overflow-y: auto;
    }

    /* Fullscreen responsive */
    @@media (max-width: 576px) {
        .modal-fullscreen-sm-down

    {
        width: 100vw;
        max-width: none;
        height: 100%;
        margin: 0;
    }

    .modal-fullscreen-sm-down .modal-content {
        height: 100%;
        border: 0;
        border-radius: 0;
    }

    .modal-fullscreen-sm-down .modal-body {
        overflow-y: auto;
    }

    }
</style>