<div class="date-range-picker @ContainerClass">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label class="form-label">
            @Label
            @if (Required)
            {
                <span class="text-danger">*</span>
            }
        </label>
    }
    
    <div class="input-group">
        <InputDate @bind-Value="StartDate" Placeholder="Fecha inicio" ShowTodayButton="false" ShowClearButton="false" Max="EndDate" Disabled="@Disabled" ContainerClass="" />
        <span class="input-group-text">
            <i class="fa-light fa-arrow-right"></i>
        </span>
        <InputDate @bind-Value="EndDate" Placeholder="Fecha fin" ShowTodayButton="false" ShowClearButton="false" Min="StartDate" Disabled="@Disabled" ContainerClass="" />
        
        <button type="button" class="btn btn-outline-secondary dropdown-toggle" 
                data-bs-toggle="dropdown" aria-expanded="false" disabled="@Disabled">
            <i class="fa-light fa-calendar-alt"></i>
        </button>
        
        <ul class="dropdown-menu dropdown-menu-end">
            <li><h6 class="dropdown-header">Rangos rápidos</h6></li>
            <li><button class="dropdown-item" @onclick="() => SetQuickRange(QuickRange.Today)">
                <i class="fa-light fa-calendar-day me-2"></i>Hoy
            </button></li>
            <li><button class="dropdown-item" @onclick="() => SetQuickRange(QuickRange.Yesterday)">
                <i class="fa-light fa-calendar me-2"></i>Ayer
            </button></li>
            <li><button class="dropdown-item" @onclick="() => SetQuickRange(QuickRange.Last7Days)">
                <i class="fa-light fa-calendar-week me-2"></i>Últimos 7 días
            </button></li>
            <li><button class="dropdown-item" @onclick="() => SetQuickRange(QuickRange.Last30Days)">
                <i class="fa-light fa-calendar-alt me-2"></i>Últimos 30 días
            </button></li>
            <li><button class="dropdown-item" @onclick="() => SetQuickRange(QuickRange.ThisMonth)">
                <i class="fa-light fa-calendar me-2"></i>Este mes
            </button></li>
            <li><button class="dropdown-item" @onclick="() => SetQuickRange(QuickRange.LastMonth)">
                <i class="fa-light fa-calendar-minus me-2"></i>Mes anterior
            </button></li>
            <li><button class="dropdown-item" @onclick="() => SetQuickRange(QuickRange.ThisYear)">
                <i class="fa-light fa-calendar me-2"></i>Este año
            </button></li>
            @if (ShowCustomRanges && CustomRanges != null)
            {
                <li><hr class="dropdown-divider"></li>
                <li><h6 class="dropdown-header">Rangos personalizados</h6></li>
                @foreach (var range in CustomRanges)
                {
                    <li><button class="dropdown-item" @onclick="() => SetCustomRange(range)">
                        @range.Name
                    </button></li>
                }
            }
            <li><hr class="dropdown-divider"></li>
            <li><button class="dropdown-item text-danger" @onclick="Clear">
                <i class="fa-light fa-times me-2"></i>Limpiar
            </button></li>
        </ul>
    </div>
    
    @if (!string.IsNullOrEmpty(HelpText))
    {
        <small class="form-text text-muted">@HelpText</small>
    }
    
    @if (ShowRangeSummary && StartDate.HasValue && EndDate.HasValue)
    {
        <small class="form-text text-info">
            <i class="fa-light fa-info-circle me-1"></i>
            @GetRangeSummary()
        </small>
    }
</div>

@code {
    [Parameter] public DateTime? StartDate { get; set; }
    [Parameter] public EventCallback<DateTime?> StartDateChanged { get; set; }
    [Parameter] public DateTime? EndDate { get; set; }
    [Parameter] public EventCallback<DateTime?> EndDateChanged { get; set; }
    [Parameter] public string Label { get; set; } = "";
    [Parameter] public string HelpText { get; set; } = "";
    [Parameter] public string ContainerClass { get; set; } = "";
    [Parameter] public bool Required { get; set; } = false;
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public bool ShowRangeSummary { get; set; } = true;
    [Parameter] public bool ShowCustomRanges { get; set; } = false;
    [Parameter] public List<CustomDateRange>? CustomRanges { get; set; }

    private enum QuickRange
    {
        Today,
        Yesterday,
        Last7Days,
        Last30Days,
        ThisMonth,
        LastMonth,
        ThisYear
    }

    private async Task SetQuickRange(QuickRange range)
    {
        var today = DateTime.Today;
        
        switch (range)
        {
            case QuickRange.Today:
                StartDate = today;
                EndDate = today;
                break;
            case QuickRange.Yesterday:
                StartDate = today.AddDays(-1);
                EndDate = today.AddDays(-1);
                break;
            case QuickRange.Last7Days:
                StartDate = today.AddDays(-6);
                EndDate = today;
                break;
            case QuickRange.Last30Days:
                StartDate = today.AddDays(-29);
                EndDate = today;
                break;
            case QuickRange.ThisMonth:
                StartDate = new DateTime(today.Year, today.Month, 1);
                EndDate = today;
                break;
            case QuickRange.LastMonth:
                var lastMonth = today.AddMonths(-1);
                StartDate = new DateTime(lastMonth.Year, lastMonth.Month, 1);
                EndDate = new DateTime(lastMonth.Year, lastMonth.Month, DateTime.DaysInMonth(lastMonth.Year, lastMonth.Month));
                break;
            case QuickRange.ThisYear:
                StartDate = new DateTime(today.Year, 1, 1);
                EndDate = today;
                break;
        }
        
        await NotifyChanges();
    }

    private async Task SetCustomRange(CustomDateRange range)
    {
        StartDate = range.StartDate;
        EndDate = range.EndDate;
        await NotifyChanges();
    }

    private async Task Clear()
    {
        StartDate = null;
        EndDate = null;
        await NotifyChanges();
    }

    private async Task NotifyChanges()
    {
        await StartDateChanged.InvokeAsync(StartDate);
        await EndDateChanged.InvokeAsync(EndDate);
    }

    private string GetRangeSummary()
    {
        if (!StartDate.HasValue || !EndDate.HasValue)
            return "";
        
        var days = (EndDate.Value - StartDate.Value).Days + 1;
        
        if (days == 1)
            return "1 día seleccionado";
        else
            return $"{days} días seleccionados";
    }

    public class CustomDateRange
    {
        public string Name { get; set; } = "";
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
    }
}

<style>
    .date-range-picker .input-group > .form-group {
        margin-bottom: 0;
    }
    
    .date-range-picker .input-group > .form-group:first-child input {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }
    
    .date-range-picker .input-group > .form-group:nth-child(3) input {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
    }
</style>