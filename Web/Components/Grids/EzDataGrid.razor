@typeparam TItem

<div class="data-grid">
    @if (ShowHeader)
    {
        <div class="grid-header mb-3">
            <div class="row align-items-center">
                <div class="col">
                    @if (!string.IsNullOrEmpty(Title))
                    {
                        <h5 class="mb-0">@Title</h5>
                    }
                </div>
                <div class="col-auto">
                    <div class="d-flex gap-2 align-items-center">
                        @if (ShowSearch)
                        {
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="fa-light fa-search"></i>
                                </span>
                                <input type="text" class="form-control" placeholder="@SearchPlaceholder" 
                                       @bind="searchTerm" @bind:event="oninput" />
                            </div>
                        }
                        @if (HeaderActions != null)
                        {
                            @HeaderActions
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    @if (IsLoading)
    {
        <EzLoadingIndicator IsLoading="true" Message="@LoadingMessage" />
    }
    else if (filteredItems.Any())
    {
        <div class="table-responsive">
            <table class="table @TableClass">
                @if (HeaderTemplate != null)
                {
                    <thead>
                        @HeaderTemplate
                    </thead>
                }
                <tbody>
                    @foreach (var item in pagedItems)
                    {
                        @RowTemplate(item)
                    }
                </tbody>
                @if (FooterTemplate != null)
                {
                    <tfoot>
                        @FooterTemplate
                    </tfoot>
                }
            </table>
        </div>

        @if (ShowPagination && totalPages > 1)
        {
            <div class="d-flex justify-content-between align-items-center mt-3">
                <div class="text-muted">
                    Mostrando @((currentPage - 1) * pageSize + 1) - @Math.Min(currentPage * pageSize, filteredItems.Count) 
                    de @filteredItems.Count registros
                    @if (filteredItems.Count < Items.Count())
                    {
                        <span>(filtrados de @Items.Count() total)</span>
                    }
                </div>
                <nav>
                    <ul class="pagination mb-0">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="() => GoToPage(1)" disabled="@(currentPage == 1)">
                                <i class="fa-light fa-angle-double-left"></i>
                            </button>
                        </li>
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="PreviousPage" disabled="@(currentPage == 1)">
                                <i class="fa-light fa-angle-left"></i>
                            </button>
                        </li>
                        
                        @foreach (var visPage in GetVisiblePages())
                        {
                            @if (visPage == -1)
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                            }
                            else
                            {
                                <li class="page-item @(visPage == currentPage ? "active" : "")">
                                    <button class="page-link" @onclick="() => GoToPage(visPage)">
                                        @visPage
                                    </button>
                                </li>
                            }
                        }
                        
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="NextPage" disabled="@(currentPage == totalPages)">
                                <i class="fa-light fa-angle-right"></i>
                            </button>
                        </li>
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="() => GoToPage(totalPages)" 
                                    disabled="@(currentPage == totalPages)">
                                <i class="fa-light fa-angle-double-right"></i>
                            </button>
                        </li>
                    </ul>
                </nav>
            </div>
        }
    }
    else
    {
        @if (EmptyTemplate != null)
        {
            @EmptyTemplate
        }
        else
        {
            <div class="text-center py-5">
                <i class="fa-light fa-inbox fa-3x text-muted mb-3"></i>
                <p class="text-muted">@EmptyMessage</p>
            </div>
        }
    }
</div>

@code {
    [Parameter, EditorRequired] public IEnumerable<TItem> Items { get; set; } = Enumerable.Empty<TItem>();
    [Parameter, EditorRequired] public RenderFragment<TItem> RowTemplate { get; set; } = null!;
    [Parameter] public RenderFragment? HeaderTemplate { get; set; }
    [Parameter] public RenderFragment? FooterTemplate { get; set; }
    [Parameter] public RenderFragment? EmptyTemplate { get; set; }
    [Parameter] public RenderFragment? HeaderActions { get; set; }
    
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public string TableClass { get; set; } = "table-hover";
    [Parameter] public string EmptyMessage { get; set; } = "No hay datos para mostrar";
    [Parameter] public string LoadingMessage { get; set; } = "Cargando...";
    [Parameter] public string SearchPlaceholder { get; set; } = "Buscar...";
    
    [Parameter] public bool IsLoading { get; set; } = false;
    [Parameter] public bool ShowHeader { get; set; } = true;
    [Parameter] public bool ShowSearch { get; set; } = true;
    [Parameter] public bool ShowPagination { get; set; } = true;
    
    [Parameter] public int PageSize { get; set; } = 10;
    [Parameter] public Func<TItem, string, bool>? SearchPredicate { get; set; }
    
    private string searchTerm = "";
    private int currentPage = 1;
    private int pageSize => PageSize;
    private int totalPages => (int)Math.Ceiling((double)filteredItems.Count / pageSize);
    
    private List<TItem> filteredItems = new();
    private List<TItem> pagedItems = new();

    protected override void OnParametersSet()
    {
        FilterItems();
        UpdatePagedItems();
    }

    private void FilterItems()
    {
        if (string.IsNullOrWhiteSpace(searchTerm) || SearchPredicate == null)
        {
            filteredItems = Items.ToList();
        }
        else
        {
            filteredItems = Items.Where(item => SearchPredicate(item, searchTerm)).ToList();
        }
        
        // Reset to first page when filtering
        if (currentPage > totalPages)
        {
            currentPage = 1;
        }
    }

    private void UpdatePagedItems()
    {
        var skip = (currentPage - 1) * pageSize;
        pagedItems = filteredItems.Skip(skip).Take(pageSize).ToList();
    }

    private void GoToPage(int page)
    {
        currentPage = page;
        UpdatePagedItems();
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            UpdatePagedItems();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            UpdatePagedItems();
        }
    }

    private List<int> GetVisiblePages()
    {
        var pages = new List<int>();
        var maxVisible = 5;
        
        if (totalPages <= maxVisible + 2)
        {
            // Show all pages
            for (int i = 1; i <= totalPages; i++)
            {
                pages.Add(i);
            }
        }
        else
        {
            // Always show first page
            pages.Add(1);
            
            // Calculate range around current page
            var start = Math.Max(2, currentPage - 1);
            var end = Math.Min(totalPages - 1, currentPage + 1);
            
            // Add ellipsis if needed
            if (start > 2)
            {
                pages.Add(-1); // -1 represents ellipsis
            }
            
            // Add pages around current
            for (int i = start; i <= end; i++)
            {
                pages.Add(i);
            }
            
            // Add ellipsis if needed
            if (end < totalPages - 1)
            {
                pages.Add(-1); // -1 represents ellipsis
            }
            
            // Always show last page
            pages.Add(totalPages);
        }
        
        return pages;
    }
}

<style>
    .data-grid {
        background-color: var(--bg-white);
    }

    .grid-header {
        padding: 0 0 1rem 0;
    }
</style>