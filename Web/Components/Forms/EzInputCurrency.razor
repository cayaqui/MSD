@typeparam TValue
@inherits InputBase<TValue>
@implements IDisposable

<div class="form-group @ContainerClass">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@_inputId" class="form-label @LabelClass">
            @Label
            @if (IsRequired)
            {
                <span class="text-danger">*</span>
            }
        </label>
    }

    <div class="input-group @InputGroupClass">
        @if (ShowCurrencySelector && !IsDisabled && !IsReadOnly)
        {
            <select class="form-select currency-selector" @onchange="HandleCurrencyChange" disabled="@IsDisabled">
                @foreach (var curr in AvailableCurrencies)
                {
                    <option value="@curr.Code" selected="@(curr.Code == Currency)">
                        @curr.Code
                    </option>
                }
            </select>
        }
        else if (!string.IsNullOrEmpty(CurrencySymbol) && CurrencyPosition == CurrencyPosition.Start)
        {
            <span class="input-group-text currency-symbol">
                @CurrencySymbol
            </span>
        }

        @if (ShowSpinButtons && !IsDisabled && !IsReadOnly)
        {
            <button type="button" class="btn btn-outline-secondary" @onclick="DecrementValue" disabled="@(!CanDecrement())">
                <i class="bi bi-dash"></i>
            </button>
        }

        <input @ref="_inputElement"
               id="@_inputId"
               type="@(_showFormatted ? "text" : "number")"
               class="@CssClass"
               value="@DisplayValue"
               @oninput="OnInputHandler"
               @onblur="OnBlurHandler"
               @onfocus="OnFocusHandler"
               @onkeydown="OnKeyDownHandler"
               placeholder="@Placeholder"
               disabled="@IsDisabled"
               readonly="@IsReadOnly"
               step="@GetStepValue()"
               min="@GetMinValue()"
               max="@GetMaxValue()"
               autocomplete="@AutoComplete"
               @attributes="AdditionalAttributes" />

        @if (ShowSpinButtons && !IsDisabled && !IsReadOnly)
        {
            <button type="button" class="btn btn-outline-secondary" @onclick="IncrementValue" disabled="@(!CanIncrement())">
                <i class="bi bi-plus"></i>
            </button>
        }

        @if (!string.IsNullOrEmpty(CurrencySymbol) && CurrencyPosition == CurrencyPosition.End)
        {
            <span class="input-group-text currency-symbol">
                @CurrencySymbol
            </span>
        }

        @if (ShowCalculator && !IsDisabled && !IsReadOnly)
        {
            <button type="button" class="btn btn-outline-secondary" @onclick="OpenCalculator" title="Calculadora">
                <i class="bi bi-calculator"></i>
            </button>
        }

        @if (ShowClearButton && HasValue() && !IsDisabled && !IsReadOnly)
        {
            <button type="button" class="btn btn-outline-secondary" @onclick="ClearValue">
                <i class="bi bi-x-lg"></i>
            </button>
        }
    </div>

    @if (ShowConversion && ConversionRate.HasValue && !string.IsNullOrEmpty(ConversionCurrency))
    {
        <small class="form-text text-muted conversion-info">
            <i class="bi bi-arrow-left-right"></i>
            @($"{ConversionCurrency} {FormatCurrency(GetConvertedValue(), ConversionCurrency)}")
            @if (ShowConversionRate)
            {
                @($" (1 {Currency} = {ConversionRate:F4} {ConversionCurrency})")
            }
        </small>
    }

    @if (!string.IsNullOrEmpty(HelpText))
    {
        <small class="form-text text-muted">@HelpText</small>
    }

    @if (ShowRange && (Min != null || Max != null))
    {
        <small class="form-text text-muted float-end">
            @if (Min != null && Max != null)
            {
                @($"Rango: {FormatCurrency(Min, Currency)} - {FormatCurrency(Max, Currency)}")
            }
            else if (Min != null)
            {
                @($"Mínimo: {FormatCurrency(Min, Currency)}")
            }
            else
            {
                @($"Máximo: {FormatCurrency(Max, Currency)}")
            }
        </small>
    }

    <div class="invalid-feedback @(_showValidation ? "d-block" : "")">
        <ValidationMessage For="@ValueExpression" />
    </div>
</div>

@code {
    private string _inputId = $"input-currency-{Guid.NewGuid():N}";
    private ElementReference _inputElement;
    private bool _showValidation = false;
    private Timer? _debounceTimer;
    private string _cssClass = "";
    private bool _showFormatted = true;
    private string _rawValue = "";

    [Parameter] public string Label { get; set; } = "";
    [Parameter] public string Placeholder { get; set; } = "0.00";
    [Parameter] public string HelpText { get; set; } = "";
    [Parameter] public bool IsRequired { get; set; }
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public bool IsReadOnly { get; set; }
    [Parameter] public bool ShowClearButton { get; set; }
    [Parameter] public bool ShowSpinButtons { get; set; }
    [Parameter] public bool ShowCalculator { get; set; }
    [Parameter] public bool ShowRange { get; set; }
    [Parameter] public string AutoComplete { get; set; } = "off";
    [Parameter] public int DebounceDelay { get; set; } = 0;

    // Currency specific parameters
    [Parameter] public string Currency { get; set; } = "USD";
    [Parameter] public string CurrencySymbol { get; set; } = "$";
    [Parameter] public CurrencyPosition CurrencyPosition { get; set; } = CurrencyPosition.Start;
    [Parameter] public bool ShowCurrencySelector { get; set; }
    [Parameter] public List<CurrencyInfo> AvailableCurrencies { get; set; } = GetDefaultCurrencies();
    [Parameter] public int DecimalPlaces { get; set; } = 2;
    [Parameter] public bool UseThousandsSeparator { get; set; } = true;
    [Parameter] public bool AllowNegative { get; set; } = true;
    [Parameter] public bool ShowConversion { get; set; }
    [Parameter] public string ConversionCurrency { get; set; } = "";
    [Parameter] public decimal? ConversionRate { get; set; }
    [Parameter] public bool ShowConversionRate { get; set; } = true;

    // Number specific parameters
    [Parameter] public TValue? Min { get; set; }
    [Parameter] public TValue? Max { get; set; }
    [Parameter] public TValue? Step { get; set; }

    // CSS Classes customization
    [Parameter] public string ContainerClass { get; set; } = "";
    [Parameter] public string LabelClass { get; set; } = "";
    [Parameter] public string InputGroupClass { get; set; } = "";

    // Events
    [Parameter] public EventCallback<TValue> OnInput { get; set; }
    [Parameter] public EventCallback<TValue> OnChange { get; set; }
    [Parameter] public EventCallback<FocusEventArgs> OnFocus { get; set; }
    [Parameter] public EventCallback<FocusEventArgs> OnBlur { get; set; }
    [Parameter] public EventCallback OnClear { get; set; }
    [Parameter] public EventCallback<string> OnCurrencyChange { get; set; }
    [Parameter] public EventCallback OnCalculatorOpen { get; set; }

    protected string CssClass => _cssClass;

    private string DisplayValue
    {
        get
        {
            if (_showFormatted && CurrentValue != null)
            {
                return FormatForDisplay(CurrentValue);
            }
            return _rawValue;
        }
    }

    protected override void OnInitialized()
    {
        BuildCssClass();
        UpdateRawValue();
        UpdateCurrencySymbol();

        if (EditContext != null)
        {
            EditContext.OnValidationStateChanged += OnValidationStateChanged;
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        BuildCssClass();
        UpdateRawValue();
        UpdateCurrencySymbol();
    }

    private void BuildCssClass()
    {
        var baseClass = "form-control currency-input";

        if (ShowSpinButtons)
        {
            baseClass += " text-center";
        }
        else
        {
            baseClass += " text-end";
        }

        // Add size class if specified
        if (AdditionalAttributes?.TryGetValue("size", out var size) == true)
        {
            baseClass += $" form-control-{size}";
        }

        // Add validation state classes
        if (EditContext != null && FieldIdentifier.FieldName != null)
        {
            var fieldState = EditContext.GetValidationMessages(FieldIdentifier).Any();
            if (fieldState && _showValidation)
            {
                baseClass += " is-invalid";
            }
        }

        // Add custom classes from AdditionalAttributes
        if (AdditionalAttributes?.TryGetValue("class", out var customClass) == true)
        {
            baseClass += $" {customClass}";
        }

        _cssClass = baseClass;
    }

    private void UpdateRawValue()
    {
        if (CurrentValue != null)
        {
            _rawValue = CurrentValue.ToString() ?? "";
        }
        else
        {
            _rawValue = "";
        }
    }

    private void UpdateCurrencySymbol()
    {
        if (ShowCurrencySelector && !string.IsNullOrEmpty(Currency))
        {
            var currencyInfo = AvailableCurrencies.FirstOrDefault(c => c.Code == Currency);
            if (currencyInfo != null)
            {
                CurrencySymbol = currencyInfo.Symbol;
            }
        }
    }

    private string FormatForDisplay(TValue value)
    {
        var numericValue = Convert.ToDecimal(value);
        return FormatCurrency(numericValue, Currency);
    }

    private string FormatCurrency(object value, string currencyCode)
    {
        var numericValue = Convert.ToDecimal(value);
        var formatString = UseThousandsSeparator ? $"N{DecimalPlaces}" : $"F{DecimalPlaces}";
        return numericValue.ToString(formatString);
    }

    protected override string FormatValueAsString(TValue? value)
    {
        return value?.ToString() ?? "";
    }

    protected override bool TryParseValueFromString(string? value, out TValue result, out string validationErrorMessage)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            result = default!;
            validationErrorMessage = "";
            return true;
        }

        // Remove formatting characters
        var cleanValue = value.Replace(",", "")
                             .Replace(" ", "")
                             .Replace(CurrencySymbol, "")
                             .Trim();

        // Check for negative values
        if (!AllowNegative && cleanValue.StartsWith("-"))
        {
            result = default!;
            validationErrorMessage = "Los valores negativos no están permitidos";
            return false;
        }

        try
        {
            var type = Nullable.GetUnderlyingType(typeof(TValue)) ?? typeof(TValue);

            if (type == typeof(decimal))
            {
                if (decimal.TryParse(cleanValue, out var decimalValue))
                {
                    result = (TValue)(object)decimalValue;
                    validationErrorMessage = "";
                    return true;
                }
            }
            else if (type == typeof(double))
            {
                if (double.TryParse(cleanValue, out var doubleValue))
                {
                    result = (TValue)(object)doubleValue;
                    validationErrorMessage = "";
                    return true;
                }
            }
            else if (type == typeof(float))
            {
                if (float.TryParse(cleanValue, out var floatValue))
                {
                    result = (TValue)(object)floatValue;
                    validationErrorMessage = "";
                    return true;
                }
            }
        }
        catch
        {
            // Fall through to error
        }

        result = default!;
        validationErrorMessage = $"El valor '{value}' no es una cantidad válida";
        return false;
    }

    private async Task OnInputHandler(ChangeEventArgs e)
    {
        _rawValue = e.Value?.ToString() ?? "";

        if (DebounceDelay > 0)
        {
            _debounceTimer?.Dispose();
            _debounceTimer = new Timer(async _ =>
            {
                await InvokeAsync(async () =>
                {
                    await ProcessValueChange(_rawValue);
                });
            }, null, DebounceDelay, Timeout.Infinite);
        }
        else
        {
            await ProcessValueChange(_rawValue);
        }
    }

    private async Task ProcessValueChange(string value)
    {
        if (TryParseValueFromString(value, out var parsedValue, out _))
        {
            // Apply constraints
            if (Min != null && Comparer<TValue>.Default.Compare(parsedValue, Min) < 0)
            {
                parsedValue = Min;
            }
            if (Max != null && Comparer<TValue>.Default.Compare(parsedValue, Max) > 0)
            {
                parsedValue = Max;
            }

            CurrentValue = parsedValue;
            await OnInput.InvokeAsync(CurrentValue);
        }
        StateHasChanged();
    }

    private async Task OnFocusHandler(FocusEventArgs e)
    {
        _showFormatted = false;
        await OnFocus.InvokeAsync(e);
    }

    private async Task OnBlurHandler(FocusEventArgs e)
    {
        _showValidation = true;
        _showFormatted = true;

        // Reformat the value on blur
        if (CurrentValue != null)
        {
            _rawValue = FormatValueAsString(CurrentValue);
        }

        await OnBlur.InvokeAsync(e);
        await OnChange.InvokeAsync(CurrentValue);
    }

    private async Task OnKeyDownHandler(KeyboardEventArgs e)
    {
        if (ShowSpinButtons)
        {
            if (e.Key == "ArrowUp")
            {
                await IncrementValue();
            }
            else if (e.Key == "ArrowDown")
            {
                await DecrementValue();
            }
        }
    }

    private async Task IncrementValue()
    {
        if (!CanIncrement()) return;

        var step = GetStepAsDecimal();
        var current = GetCurrentAsDecimal();
        var newValue = current + step;

        await SetNumericValue(newValue);
    }

    private async Task DecrementValue()
    {
        if (!CanDecrement()) return;

        var step = GetStepAsDecimal();
        var current = GetCurrentAsDecimal();
        var newValue = current - step;

        await SetNumericValue(newValue);
    }

    private bool CanIncrement()
    {
        if (Max == null) return true;
        if (CurrentValue == null) return true;
        return Comparer<TValue>.Default.Compare(CurrentValue, Max) < 0;
    }

    private bool CanDecrement()
    {
        if (Min == null) return true;
        if (CurrentValue == null) return true;
        return Comparer<TValue>.Default.Compare(CurrentValue, Min) > 0;
    }

    private decimal GetStepAsDecimal()
    {
        if (Step != null)
        {
            return Convert.ToDecimal(Step);
        }
        return 1m;
    }

    private decimal GetCurrentAsDecimal()
    {
        if (CurrentValue != null)
        {
            return Convert.ToDecimal(CurrentValue);
        }
        return 0m;
    }

    private decimal GetConvertedValue()
    {
        if (CurrentValue != null && ConversionRate.HasValue)
        {
            return Convert.ToDecimal(CurrentValue) * ConversionRate.Value;
        }
        return 0m;
    }

    private async Task SetNumericValue(decimal value)
    {
        try
        {
            var type = Nullable.GetUnderlyingType(typeof(TValue)) ?? typeof(TValue);
            object convertedValue = Convert.ChangeType(value, type);

            CurrentValue = (TValue)convertedValue;
            _rawValue = FormatValueAsString(CurrentValue);
            await OnInput.InvokeAsync(CurrentValue);
            await OnChange.InvokeAsync(CurrentValue);
        }
        catch
        {
            // Handle conversion errors silently
        }
    }

    private async Task ClearValue()
    {
        CurrentValue = default!;
        _rawValue = "";
        _showValidation = false;
        await OnClear.InvokeAsync();
        await _inputElement.FocusAsync();
    }

    private async Task HandleCurrencyChange(ChangeEventArgs e)
    {
        var newCurrency = e.Value?.ToString() ?? Currency;
        Currency = newCurrency;
        UpdateCurrencySymbol();
        await OnCurrencyChange.InvokeAsync(newCurrency);
        StateHasChanged();
    }

    private async Task OpenCalculator()
    {
        await OnCalculatorOpen.InvokeAsync();
        // En una implementación real, abriría una modal con calculadora
    }

    private bool HasValue()
    {
        return CurrentValue != null && !CurrentValue.Equals(default(TValue));
    }

    private string? GetStepValue()
    {
        return Step?.ToString() ?? "0.01";
    }

    private string? GetMinValue()
    {
        return Min?.ToString();
    }

    private string? GetMaxValue()
    {
        return Max?.ToString();
    }

    private void OnValidationStateChanged(object? sender, ValidationStateChangedEventArgs e)
    {
        BuildCssClass();
        InvokeAsync(StateHasChanged);
    }

    public async ValueTask FocusAsync() => await _inputElement.FocusAsync();

    public void Dispose()
    {
        _debounceTimer?.Dispose();
        if (EditContext != null)
        {
            EditContext.OnValidationStateChanged -= OnValidationStateChanged;
        }
    }

    private static List<CurrencyInfo> GetDefaultCurrencies()
    {
        return new List<CurrencyInfo>
        {
            new() { Code = "USD", Symbol = "$", Name = "US Dollar" },
            new() { Code = "CLP", Symbol = "$", Name = "Chilean Peso" },
            new() { Code = "CLF", Symbol = "UF", Name = "Unidad de Fomento" },
            new() { Code = "EUR", Symbol = "€", Name = "Euro" },
            new() { Code = "GBP", Symbol = "£", Name = "British Pound" },
            new() { Code = "JPY", Symbol = "¥", Name = "Japanese Yen" },
            new() { Code = "BRL", Symbol = "R$", Name = "Brazilian Real" },
            new() { Code = "ARS", Symbol = "$", Name = "Argentine Peso" },
            new() { Code = "MXN", Symbol = "$", Name = "Mexican Peso" },
            new() { Code = "PEN", Symbol = "S/", Name = "Peruvian Sol" },
            new() { Code = "COP", Symbol = "$", Name = "Colombian Peso" }
        };
    }
}
