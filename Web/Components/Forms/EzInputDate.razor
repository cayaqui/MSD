@typeparam TValue
@inherits InputBase<TValue>

<div class="form-group @ContainerClass">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@Id" class="form-label">
            @Label
            @if (Required)
            {
                <span class="text-danger">*</span>
            }
        </label>
    }

    <div class="input-group">
        <span class="input-group-text">
            <i class="fa-light fa-calendar"></i>
        </span>

        <input @attributes="AdditionalAttributes"
               id="@Id"
               type="@InputType"
               class="@CssClass"
               value="@CurrentValueAsString"
               @onchange="EventCallback.Factory.CreateBinder<string>(this, __value => CurrentValueAsString = __value, CurrentValueAsString)"
               placeholder="@Placeholder"
               disabled="@Disabled"
               readonly="@ReadOnly"
               min="@MinDate"
               max="@MaxDate" />

        @if (ShowTodayButton)
        {
            <button type="button" class="btn btn-outline-secondary" @onclick="SetToday"
                    disabled="@(Disabled || ReadOnly)" title="Hoy">
                <i class="fa-light fa-calendar-day"></i>
            </button>
        }

        @if (ShowClearButton && HasValue)
        {
            <button type="button" class="btn btn-outline-secondary" @onclick="Clear"
                    disabled="@(Disabled || ReadOnly)" title="Limpiar">
                <i class="fa-light fa-times"></i>
            </button>
        }
    </div>

    @if (!string.IsNullOrEmpty(HelpText))
    {
        <small class="form-text text-muted">@HelpText</small>
    }

    @if (ShowRelativeTime && HasValue)
    {
        <small class="form-text text-info">
            <i class="fa-light fa-info-circle me-1"></i>@GetRelativeTime()
        </small>
    }

    <div class="invalid-feedback">
        <ValidationMessage For="@ValueExpression" />
    </div>
</div>

@code {
    [Parameter] public string Label { get; set; } = "";
    [Parameter] public string Placeholder { get; set; } = "";
    [Parameter] public string HelpText { get; set; } = "";
    [Parameter] public string ContainerClass { get; set; } = "";
    [Parameter] public bool Required { get; set; } = false;
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public bool ReadOnly { get; set; } = false;
    [Parameter] public bool ShowTodayButton { get; set; } = true;
    [Parameter] public bool ShowClearButton { get; set; } = false;
    [Parameter] public bool ShowRelativeTime { get; set; } = false;
    [Parameter] public bool IncludeTime { get; set; } = false;
    [Parameter] public DateTime? Min { get; set; }
    [Parameter] public DateTime? Max { get; set; }
    [Parameter] public new string? CssClass { get; set; }

    private string Id { get; } = $"input-{Guid.NewGuid():N}";
    private string InputType => IncludeTime ? "datetime-local" : "date";
    private bool HasValue => CurrentValue != null && !CurrentValue.Equals(default(TValue));

    private string? MinDate => Min?.ToString(IncludeTime ? "yyyy-MM-ddTHH:mm" : "yyyy-MM-dd");
    private string? MaxDate => Max?.ToString(IncludeTime ? "yyyy-MM-ddTHH:mm" : "yyyy-MM-dd");

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(CssClass))
        {
            CssClass = "form-control";
        }
    }

    protected override string? FormatValueAsString(TValue? value)
    {
        return value switch
        {
            DateTime dateTime => dateTime.ToString(IncludeTime ? "yyyy-MM-ddTHH:mm" : "yyyy-MM-dd"),
            DateTimeOffset dateTimeOffset => dateTimeOffset.ToString(IncludeTime ? "yyyy-MM-ddTHH:mm" : "yyyy-MM-dd"),
            DateOnly dateOnly => dateOnly.ToString("yyyy-MM-dd"),
            _ => null
        };
    }

    protected override bool TryParseValueFromString(string? value, out TValue result, out string validationErrorMessage)
    {
        validationErrorMessage = string.Empty;
        result = default!;

        if (string.IsNullOrWhiteSpace(value))
        {
            var type = typeof(TValue);
            if (type == typeof(DateTime?) || type == typeof(DateTimeOffset?) || type == typeof(DateOnly?))
            {
                return true;
            }
        }

        try
        {
            if (typeof(TValue) == typeof(DateTime) || typeof(TValue) == typeof(DateTime?))
            {
                if (DateTime.TryParse(value, out var dateTime))
                {
                    result = (TValue)(object)dateTime;
                    return true;
                }
            }
            else if (typeof(TValue) == typeof(DateTimeOffset) || typeof(TValue) == typeof(DateTimeOffset?))
            {
                if (DateTimeOffset.TryParse(value, out var dateTimeOffset))
                {
                    result = (TValue)(object)dateTimeOffset;
                    return true;
                }
            }
            else if (typeof(TValue) == typeof(DateOnly) || typeof(TValue) == typeof(DateOnly?))
            {
                if (DateOnly.TryParse(value, out var dateOnly))
                {
                    result = (TValue)(object)dateOnly;
                    return true;
                }
            }
        }
        catch
        {
            // Swallow parse exceptions
        }

        validationErrorMessage = $"El valor '{value}' no es una fecha válida.";
        return false;
    }

    private void SetToday()
    {
        if (typeof(TValue) == typeof(DateTime) || typeof(TValue) == typeof(DateTime?))
        {
            CurrentValue = (TValue)(object)DateTime.Now;
        }
        else if (typeof(TValue) == typeof(DateTimeOffset) || typeof(TValue) == typeof(DateTimeOffset?))
        {
            CurrentValue = (TValue)(object)DateTimeOffset.Now;
        }
        else if (typeof(TValue) == typeof(DateOnly) || typeof(TValue) == typeof(DateOnly?))
        {
            CurrentValue = (TValue)(object)DateOnly.FromDateTime(DateTime.Now);
        }
    }

    private void Clear()
    {
        CurrentValue = default!;
    }

    private string GetRelativeTime()
    {
        if (CurrentValue is DateTime dateTime)
        {
            var diff = dateTime - DateTime.Now;
            var days = Math.Abs(diff.Days);

            if (days == 0) return "Hoy";
            if (days == 1) return dateTime > DateTime.Now ? "Mañana" : "Ayer";
            if (days < 7) return $"{days} días {(dateTime > DateTime.Now ? "en el futuro" : "atrás")}";
            if (days < 30) return $"{days / 7} semanas {(dateTime > DateTime.Now ? "en el futuro" : "atrás")}";
            if (days < 365) return $"{days / 30} meses {(dateTime > DateTime.Now ? "en el futuro" : "atrás")}";

            return $"{days / 365} años {(dateTime > DateTime.Now ? "en el futuro" : "atrás")}";
        }

        return "";
    }
}