
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
<AuthorizeView>
    <Authorized>
        <div class="app-container @(sidebarCollapsed ? "sidebar-collapsed" : "")">
            <!-- Sidebar -->

            <SideNav IsCollapsed="sidebarCollapsed" />

            <!-- Main Content Area -->
            <div class="main-content">
                <!-- Top Bar -->
                <TopBar OnToggleSidebar="ToggleSidebar"
                        OnOpenSearch="OpenSearchModal"
                        OnOpenNotificationPanel="OpenNotificationPanel" />

                <!-- Page Content -->
                <main class="page-content">
                    <div class="container-fluid">
                        @Body
                    </div>
                </main>
            </div>

            <!-- Search Modal -->
            <SearchModal @bind-IsVisible="isSearchModalVisible"
                         OnHide="CloseSearchModal" />

            <!-- Notification Panel -->
            <NotificationPanel @bind-IsVisible="isNotificationPanelVisible"
                               OnHide="CloseNotificationPanel" />
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="d-flex justify-content-center align-items-center" style="min-height: 100vh;">
            <div class="text-center">
                <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Redirecting to login...</p>
                <RedirectToLogin/>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>
@code {
    private bool sidebarCollapsed = false;
    private bool isSearchModalVisible = false;
    private bool isNotificationPanelVisible = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize global keyboard shortcuts
            await JSRuntime.InvokeVoidAsync("window.addEventListener", "keydown",
                DotNetObjectReference.Create(this), "HandleGlobalKeyDown");

            // Initialize tooltips
            await JSRuntime.InvokeVoidAsync("blazorHelpers.initializeTooltips");

            // Check if sidebar should be collapsed on mobile
            await CheckMobileView();
        }
    }

    [JSInvokable]
    public async Task HandleGlobalKeyDown(string key, bool ctrlKey, bool shiftKey, bool altKey)
    {
        // Global keyboard shortcuts
        if (ctrlKey && key.ToLower() == "k")
        {
            await OpenSearchModal();
        }
        else if (key == "Escape")
        {
            await CloseAllModals();
        }

        StateHasChanged();
    }

    private async Task ToggleSidebar()
    {
        sidebarCollapsed = !sidebarCollapsed;

        // Usar el helper de localStorage
        await JSRuntime.InvokeVoidAsync("blazorHelpers.setLocalStorage",
            "sidebarCollapsed", sidebarCollapsed.ToString());

        StateHasChanged();
    }

    private async Task OpenSearchModal()
    {
        isSearchModalVisible = true;
        isNotificationPanelVisible = false; // Close notification panel if open
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task CloseSearchModal()
    {
        isSearchModalVisible = false;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task OpenNotificationPanel()
    {
        isNotificationPanelVisible = true;
        isSearchModalVisible = false; // Close search modal if open
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task CloseNotificationPanel()
    {
        isNotificationPanelVisible = false;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task CloseAllModals()
    {
        bool wasAnyModalOpen = isSearchModalVisible || isNotificationPanelVisible;

        isSearchModalVisible = false;
        isNotificationPanelVisible = false;

        if (wasAnyModalOpen)
        {
            StateHasChanged();
        }

        await Task.CompletedTask;
    }

    private async Task CheckMobileView()
    {
        try
        {
            // Usar la nueva función helper
            var windowWidth = await JSRuntime.InvokeAsync<int>("blazorHelpers.getWindowWidth");

            if (windowWidth < 768)
            {
                sidebarCollapsed = true;
            }
            else
            {
                // Usar el helper de localStorage
                var savedState = await JSRuntime.InvokeAsync<string>("blazorHelpers.getLocalStorage", "sidebarCollapsed");
                if (bool.TryParse(savedState, out bool collapsed))
                {
                    sidebarCollapsed = collapsed;
                }
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking mobile view: {ex.Message}");
        }
    }



    public void Dispose()
    {
        // Cleanup if needed
    }
}
